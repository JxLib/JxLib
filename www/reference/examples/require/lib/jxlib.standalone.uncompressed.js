/******************************************************************************
 * Jx UI Library, 3.2-dev
 * Copyright (c) 2006-2008, DM Solutions Group Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * 
 *******************************************************************************
 * reset.css - Copyright (c) 2006, Yahoo! Inc. All rights reserved.
 * Code licensed under the BSD License: http://developer.yahoo.net/yui/license.txt
 *****************************************************************************/
/*
---

name: Global

description: Creates the Jx namespace for global use of the library

license: MIT-style license.

provides: [Global]

...
*/

/**
 * This file simply creates the Jx global variable which indicates to everything
 * else that each component should be added to the global namespace
 */

if (Jx === undefined || Jx === null) {
    var Jx = {
        isGlobal: true    
    };
}


/**
 * This section is borrowed from Mootools 1.5amd branch by arian.
 * It has been modified for JxLib and will remain in until MooTool1.5 releases.
 *
 * This section simply replaces require and define with a version if the actual
 * one doesn't exist. This will only be used when compiling for a full build
 * that should be global.
 */
if (typeof define == 'undefined') (function(){

var loaded = {};

this.require = function(name){
	return loaded[name];
};

var define = this.define = function(id, deps, fn){
	if (typeof deps == 'function') fn = deps;
	var module = {exports: {}};
	var require = function(name){
		name = normalize(name, id);
		return loaded[name];
	};
	fn.call(module.exports, require, module.exports, module);
	loaded[id] = module.exports;
};

define.amd = {};


var normalize = function(name, relative){
	if (relative == null || name.slice(0, 1) != '.') return name;
	relative = relative.split('/');
	if (name.slice(0, 2) == './'){
		name = name.slice(2);
		relative.pop();
	}
	if (name.slice(0, 3) == '../') relative.pop();
	while (name.slice(0, 3) == '../'){
		name = name.slice(3);
		relative.pop();
	}
	relative.push(name);
	return relative.join('/');
};

})();

/*
---

name: Config

description: Creates the Jx namespace for global use of the library

license: MIT-style license.

provides: [Config]

...
*/

/**
 * This file simply defines a null config object. It canbe overridden in the
 * main HTML file by simply redefining it immediately after loading require.js.
 *
 * This file is only used when require.js is used. In a full build this file should
 * be excluded and the user will need to define any config "normally".
 */
define('config',[],function(){return null;});

/*!
---

name: Common

description: Jx namespace with methods and classes common to most Jx widgets

license: MIT-style license.

requires:
 - Core/Class
 - Core/Element
 - Core/Browser
 - Core/Element.Style
 - Core/Request
 - Core/Class.Extras
 - More/Class.Binds
 - Core/Array
 - Core/Element.Event
 - Core/Element.Dimensions
 - More/Element.Measure
 - More/Locale
 - Core/Slick.Finder
 - Core/Slick.Parser
 - Global
 - Config

provides: [Jx]

css:
 - license
 - reset
 - common

images:
 - a_pixel.png

...
 */

/*!
 * This file will contain the base code needed to run Jx. It will be loaded by Jx.Object
 * or anything else needing it as a dependency.
 * 
 * First, we need to override require's onError function so we can handle
 * missing files. In some cases, specifically plugins and adaptors, we
 * want missing files to return a null or undefined response. We use this
 * to force that behavior
 */
require.onError = function (err) {
   //for now, log the error then throw it until we debug a bit and
   //decide what to do
   console.log(err);
   throw err;
};

/**
 * The config dependency should be declared by the main html page and is used to pass
 * configuration options to this code. If you don't have any configuration to pass,
 * this will load the default config.js file in the same directory as this file
 * which passes a null reference. If you want to provide options, do the following
 * on the main HTML page :
 *
 * define('config', function(require, exports, module){
 *   module.exports = {...};  //create config object here
 * });
 *
 * We will also need to make sure core and more are available in this same directory
 * as well until they support AMD. Once they support AMD we will need to change these
 * to match the above dependencies.
 * 
 */
define('base',function(require, exports, module){
    
    var base = module.exports,
        config = require('config');
    
    if (typeof Jx != 'undefined') {
        exports.global = Jx;
        //move any global config to the base
        Object.append(base, exports.global);
    } else if (config !== null && config !== undefined) {
        //add in any config passed in
        Object.append(base, config);
    }
    
    base.version = "3.2-dev";
    
    /**
     * Function: $jx
     * dereferences a DOM Element to a JxLib object if possible and returns
     * a reference to the object, or null if not defined.
     *
     * TODO: need to decide if this would be better in the Widget class, accessed
     * either by (Jx.)Widget.getWidget(id) or this.getWidget(id) inside a widget class.
     */
    base.getWidget = window.$jx = function(id) {
      var widget = null;
      id = document.id(id);
      if (id) {
        widget = id.retrieve('jxWidget');
        if (!widget && id != document.body) {
          widget = $jx(id.getParent());
        }
      }
      return widget;
    }

    /**
     * mutator that sets jxFamily when creating a class so we can check
     * its type
     */
    Class.Mutators.Family = function(self, name) {
        
        this.prototype.$family = function(){
            return self;
        };
        this.prototype.jxFamily = self;
    };
    
    /**
     * APIProperty: {String} debug
     * This determines if the library is in debug mode or not. It allows toggling
     * the console object on and off without having to remove all of the console.XXX()
     * functions in the code.
     */
    if (base.debug === undefined || base.debug === null) {
        base.debug = false;
    }
    
    /**
     * The following is an override of the console object to toggle writing out 
     * based on the state of Jx.debug.
     *
     * TODO: Find a better way to do debugging and debug suppression.
     */

    /* firebug console supressor for IE/Safari/Opera */
    window.addEvent('load',
    function() {
        if (! ("console" in window)) {
            window.console = {};
            var empty = function(){};
            ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
             "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", 
             "profileEnd"].each(function(name){
                window.console[name] = empty;
            });
        } else {
            window.realConsole = window.console;
            window.console = {};
            ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
             "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", 
             "profileEnd"].each(function(name){
                window.console[name] = function(){
                    if (base.debug) {
                        window.realConsole[name].apply(realConsole,arguments);
                    }
                };
            });
        }
    });
    
    /**
     * APIProperty: {String} baseURL
     * This is the URL that Jx was loaded from, it is
     * automatically calculated from the script tag
     * src property that included Jx.
     *
     * Note that this assumes that you are loading Jx
     * from a js/ or lib/ folder in parallel to the
     * images/ folder that contains the various images
     * needed by Jx components.  If you have a different
     * folder structure, you can define Jx's base
     * by including the following before including
     * the jxlib javascript file:
     *
     * (code)
     * Jx = {
     *    baseURL: 'some/path'
     * }
     * (end)
     *
     *
     * TODO: need a way to find the baseUrl... most likely from require some how.
     */
    if (base.baseURL === undefined || base.baseURL === null) {
      (function() {
        var aScripts = document.getElementsByTagName('SCRIPT'),
            i, s, n, file;
        for (i = 0; i < aScripts.length; i++) {
          s = aScripts[i].src;
          n = s.lastIndexOf('/');
          file = s.slice(n+1,s.length-1);
          if (file.contains('jxlib') || file.contains('require')) {
            base.baseURL = s.slice(0,n);
            break;
          }
        }
      })();
    }
    
    /**
     * APIProperty: {Image} aPixel
     * aPixel is a single transparent pixel and is the only image we actually
     * use directly in JxLib code.  If you want to use your own transparent pixel
     * image or use it from a different location than the install of jxlib
     * javascript files, you can manually declare it before including jxlib code
     * (code)
     * Jx = {
     *   aPixel: new Element('img', {
     *     alt: '',
     *     title: '',
     *     width: 1,
     *     height: 1,
     *     src: 'path/to/a/transparent.png'
     *   });
     * }
     * (end)
     */
    if (base.aPixel === undefined || base.aPixel === null) {
      base.aPixel = new Element('img', {
        alt:'',
        title:'',
        src: base.baseURL +'/a_pixel.png'
      });
    }
    
    /**
     * APIProperty: {Boolean} isAir
     * indicates if JxLib is running in an Adobe Air environment.  This is
     * normally auto-detected but you can manually set it by declaring the Jx
     * namespace before including jxlib:
     * (code)
     * Jx = {
     *   isAir: true
     * }
     * (end)
     */
    if (base.isAir === undefined || base.isAir === null) {
      (function() {
        /**
         * Determine if we're running in Adobe AIR.
         */
        var aScripts = document.getElementsByTagName('SCRIPT'),
            src = aScripts[0].src;
        if (src.contains('app:')) {
          base.isAir = true;
        } else {
          base.isAir = false;
        }
      })();
    }
    
    /**
     * APIMethod: setLanguage
     * set the current language to be used by Jx widgets.  This uses the MooTools
     * lang module.  If an invalid or missing language is requested, the default
     * rules of Locale will be used (revert to en-US at time of writing).
     *
     * Parameters:
     * {String} language identifier, the language to set.
     */
    base.setLanguage = function(lang) {
      base.lang = lang;
      Locale.use(base.lang);
    };

    /**
     * APIProperty: {String} lang
     * Checks to see if Jx.lang is already set. If not, it sets it to the default
     * 'en-US'. We will then set the Motools.lang language to this setting
     * automatically.
     *
     * The language can be changed on the fly at anytime by calling
     * Jx.setLanguage().
     * By default all Jx.Widget subclasses will listen for the onChange event of
     * the Locale class. It will then call a method, changeText(), if it
     * exists on the particular widget. You will be able to disable listening for
     * these changes by setting the Jx.Widget option useLang to false.
     */
    if (base.lang === undefined || base.lang === null) {
      base.lang = 'en-US';
    };
    
    base.setLanguage(base.lang);
    
    /**
     * APIMethod: getText
     *
     * returns the localized text.
     *
     * Parameters:
     * val - <String> || <Function> || <Object> = { set: '', key: ''[, value: ''] } for a Locale object
     */
    base.getText = function(val) {
      var result = '';
      if (typeOf(val) == 'string' || typeOf(val) == 'number') {
        result = val;
      } else if (typeOf(val) == 'function') {
        result = val();
      } else if (typeOf(val) == 'object' && val.set !== undefined &&
                 val.set !== null && val.key !== undefined && val.key !== null){ 
        if(val.value !== undefined) {
          result = Locale.get(val.set + '.' + val.key + '.' + val.value);
        }else{
          result =  Locale.get(val.set + '.' + val.key);
        }
      }
      return result;
    };
    
    /**
     * APIMethod: applyPNGFilter
     *
     * Static method that applies the PNG Filter Hack for IE browsers
     * when showing 24bit PNG's.  Used automatically for img tags with
     * a class of png24.
     *
     * The filter is applied using a nifty feature of IE that allows javascript to
     * be executed as part of a CSS style rule - this ensures that the hack only
     * gets applied on IE browsers.
     *
     * The CSS that triggers this hack is only in the ie6.css files of the various
     * themes.
     *
     * Parameters:
     * object {Object} the object (img) to which the filter needs to be applied.
     */
    base.applyPNGFilter = function(o) {
        var t = base.aPixel.src, 
            s;
        if (o.src != t) {
            s = o.src;
            o.src = t;
            o.runtimeStyle.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + s + "',sizingMethod='scale')";
        }
    };
    
    /**
     * NOTE: We should consider moving the image loading code into a separate
     * class. Perhaps as Jx.Preloader which could extend Jx.Object
     */
    base.imgQueue = [];
    //The queue of images to be loaded
    base.imgLoaded = {};
    //a hash table of images that have been loaded and cached
    base.imagesLoading = 0;
    //counter for number of concurrent image loads
    /**
     * APIMethod: addToImgQueue
     * Request that an image be set to a DOM IMG element src attribute.  This puts
     * the image into a queue and there are private methods to manage that queue
     * and limit image loading to 2 at a time.
     *
     * Parameters:
     * obj - {Object} an object containing an element and src
     * property, where element is the element to update and src
     * is the url to the image.
     */
    base.addToImgQueue = function(obj) {
        if (base.imgLoaded[obj.src]) {
            //if this image was already requested (i.e. it's in cache) just set it directly
            obj.element.src = obj.src;
        } else {
            //otherwise stick it in the queue
            base.imgQueue.push(obj);
            base.imgLoaded[obj.src] = true;
        }
        //start the queue management process
        base.checkImgQueue();
    };
    
    /**
     * APIMethod: checkImgQueue
     *
     * An internal method that ensures no more than 2 images are loading at a
     * time.
     */
    base.checkImgQueue = function() {
        while (base.imagesLoading < 2 && base.imgQueue.length > 0) {
            base.loadNextImg();
        }
    };
    
    /**
     * Method: loadNextImg
     *
     * An internal method actually populate the DOM element with the image source.
     */
    base.loadNextImg = function() {
        var obj = base.imgQueue.shift();
        if (obj) {
            ++base.imagesLoading;
            obj.element.onload = function() {--base.imagesLoading;
                base.checkImgQueue();
            };
            obj.element.onerror = function() {--base.imagesLoading;
                base.checkImgQueue();
            };
            obj.element.src = obj.src;
        }
    };
    
    /**
     * APIMethod: getNumber
     * safely parse a number and return its integer value.  A NaN value
     * returns 0.  CSS size values are also parsed correctly.
     *
     * Parameters:
     * n - {Mixed} the string or object to parse.
     *
     * Returns:
     * {Integer} the integer value that the parameter represents
     */
    base.getNumber = function(n, def) {
        var result = n === null || isNaN(parseInt(n, 10)) ? (def || 0) : parseInt(n, 10);
        return result;
    };
    
    /**
     * APIMethod: getPageDimensions
     * return the dimensions of the browser client area.
     *
     * Returns:
     * {Object} an object containing a width and height property
     * that represent the width and height of the browser client area.
     */
    base.getPageDimensions = function() {
        return {
            width: window.getWidth(),
            height: window.getHeight()
        };
    };
    
    /**
     * APIMethod: type
     * safely return the type of an object using the mootools type system
     */
     //DEPRECATED:  With the new changes for 1.3 compatability this function is 
     //no longer needed as typeOf returns the necessary info.
    base.type = function(obj) {
      /**
      if (obj === null) return false;
      return typeof obj == 'undefined' ? false : obj.jxFamily || typeOf(obj);
      */
      return typeOf(obj);
    };
    
    (function($) {
        // Wrapper for document.id
    
        /**
         * Class: Element
         *
         * Element is a global object provided by the mootools library.  The
         * functions documented here are extensions to the Element object provided
         * by Jx to make cross-browser compatibility easier to achieve.  Most of
         * the methods are measurement related.
         *
         * While the code in these methods has been converted to use MooTools
         * methods, there may be better MooTools methods to use to accomplish
         * these things.
         * Ultimately, it would be nice to eliminate most or all of these and find
         * the MooTools equivalent or convince MooTools to add them.
         *
         * NOTE: Many of these methods can be replaced with mootools-more's
         * Element.Measure
         */
        Element.implement({
            /**
             * APIMethod: getBoxSizing
             * return the box sizing of an element, one of 'content-box' or
             *'border-box'.
             *
             * Parameters:
             * elem - {Object} the element to get the box sizing of.
             *
             * Returns:
             * {String} the box sizing of the element.
             */
            getBoxSizing: function() {
                var result = 'content-box',
                    cm,
                    sizing;
                if (Browser.ie || Browser.opera) {
                    cm = document.compatMode;
                    if (cm == "BackCompat" || cm == "QuirksMode") {
                        result = 'border-box';
                    } else {
                        result = 'content-box';
                    }
                } else {
                    if (arguments.length === 0) {
                        node = document.documentElement;
                    }
                    sizing = this.getStyle("-moz-box-sizing");
                    if (!sizing) {
                        sizing = this.getStyle("box-sizing");
                    }
                    result = (sizing ? sizing: 'content-box');
                }
                return result;
            },
            /**
             * APIMethod: getContentBoxSize
             * return the size of the content area of an element.  This is the
             * size of the element less margins, padding, and borders.
             *
             * Parameters:
             * elem - {Object} the element to get the content size of.
             *
             * Returns:
             * {Object} an object with two properties, width and height, that
             * are the size of the content area of the measured element.
             */
            getContentBoxSize: function() {
                var s = this.getSizes(['padding', 'border']);
                return {
                    width: this.offsetWidth - s.padding.left - s.padding.right - s.border.left - s.border.right,
                    height: this.offsetHeight - s.padding.bottom - s.padding.top - s.border.bottom - s.border.top
                };
            },
            /**
             * APIMethod: getBorderBoxSize
             * return the size of the border area of an element.  This is the size
             * of the element less margins.
             *
             * Parameters:
             * elem - {Object} the element to get the border sizing of.
             *
             * Returns:
             * {Object} an object with two properties, width and height, that
             * are the size of the border area of the measured element.
             */
            getBorderBoxSize: function() {
                return {
                    width: this.offsetWidth,
                    height: this.offsetHeight
                };
            },
    
            /**
             * APIMethod: getMarginBoxSize
             * return the size of the margin area of an element.  This is the size
             * of the element plus margins.
             *
             * Parameters:
             * elem - {Object} the element to get the margin sizing of.
             *
             * Returns:
             * {Object} an object with two properties, width and height, that
             * are the size of the margin area of the measured element.
             */
            getMarginBoxSize: function() {
                var s = this.getSizes(['margin']);
                return {
                    width: this.offsetWidth + s.margin.left + s.margin.right,
                    height: this.offsetHeight + s.margin.top + s.margin.bottom
                };
            },
            /**
             * APIMethod: getSizes
             * measure the size of various styles on various edges and return
             * the values.
             *
             * Parameters:
             * styles - array, the styles to compute.  By default, this is
             * ['padding', 'border','margin'].  If you don't need all the styles,
             * just request the ones you need to minimize compute time required.
             * edges - array, the edges to compute styles for.  By default,  this
             * is ['top','right','bottom','left'].  If you don't need all the
             * edges, then request the ones you need to minimize compute time.
             *
             * Returns:
             * {Object} an object with one member for each requested style.  Each
             * style member is an object containing members for each requested
             * edge. Values are the computed style for each edge in pixels.
             */
            getSizes: function(which, edges) {
                which = which || ['padding', 'border', 'margin'];
                edges = edges || ['left', 'top', 'right', 'bottom'];
                var result = {},
                    e,
                    n;
                which.each(function(style) {
                    result[style] = {};
                    edges.each(function(edge) {
                        e = (style == 'border') ? edge + '-width': edge;
                        n = this.getStyle(style + '-' + e);
                        result[style][edge] = n === null || isNaN(parseInt(n, 10)) ? 0: parseInt(n, 10);
                    },
                    this);
                },
                this);
                return result;
            },
            /**
             * APIMethod: setContentBoxSize
             * set either or both of the width and height of an element to
             * the provided size.  This function ensures that the content
             * area of the element is the requested size and the resulting
             * size of the element may be larger depending on padding and
             * borders.
             *
             * Parameters:
             * elem - {Object} the element to set the content area of.
             * size - {Object} an object with a width and/or height property that
             * is the size to set the content area of the element to.
             */
            setContentBoxSize: function(size) {
                var m,
                    width,
                    height;
                if (this.getBoxSizing() == 'border-box') {
                    m = this.measure(function() {
                        return this.getSizes(['padding', 'border']);
                    });
                    if (size.width !== undefined && size.width !== null) {
                        width = size.width + m.padding.left + m.padding.right + m.border.left + m.border.right;
                        if (width < 0) {
                            width = 0;
                        }
                        this.setStyle('width', width);
                    }
                    if (size.height !== undefined && size.height !== null) {
                        height = size.height + m.padding.top + m.padding.bottom + m.border.top + m.border.bottom;
                        if (height < 0) {
                            height = 0;
                        }
                        this.setStyle('height', height);
                    }
                } else {
                    if (size.width !== undefined && size.width !== null && size.width >= 0) {
                      this.setStyle('width', width);
                    }
                    if (size.height !== undefined && size.height !== null && size.height >= 0) {
                      this.setStyle('height', height);
                    }
                }
            },
            /**
             * APIMethod: setBorderBoxSize
             * set either or both of the width and height of an element to
             * the provided size.  This function ensures that the border
             * size of the element is the requested size and the resulting
             * content areaof the element may be larger depending on padding and
             * borders.
             *
             * Parameters:
             * elem - {Object} the element to set the border size of.
             * size - {Object} an object with a width and/or height property that
             * is the size to set the content area of the element to.
             */
            setBorderBoxSize: function(size) {
                var m, 
                    width, 
                    height;
                if (this.getBoxSizing() == 'content-box') {
                    m = this.measure(function() {
                        return this.getSizes();
                    });
    
                    if (size.width !== undefined && size.width !== null) {
                        width = size.width - m.padding.left - m.padding.right - m.border.left - m.border.right - m.margin.left - m.margin.right;
                        if (width < 0) {
                            width = 0;
                        }
                        this.setStyle('width', width);
                    }
                    if (size.height !== undefined && size.height !== null) {
                        height = size.height - m.padding.top - m.padding.bottom - m.border.top - m.border.bottom - m.margin.top - m.margin.bottom;
                        if (height < 0) {
                            height = 0;
                        }
                        this.setStyle('height', height);
                    }
                } else {
                    if (size.width !== undefined && size.width !== null && size.width >= 0) {
                      this.setStyle('width', width);
                    }
                    if (size.height !== undefined && size.height !== null && size.height >= 0) {
                      this.setStyle('height', height);
                    }
                }
            },
    
            /**
             * APIMethod: descendantOf
             * determines if the element is a descendent of the reference node.
             *
             * Parameters:
             * node - {HTMLElement} the reference node
             *
             * Returns:
             * {Boolean} true if the element is a descendent, false otherwise.
             */
            descendantOf: function(node) {
                var parent = document.id(this.parentNode);
                while (parent != node && parent && parent.parentNode && parent.parentNode != parent) {
                    parent = document.id(parent.parentNode);
                }
                return parent == node;
            },
    
            /**
             * APIMethod: findElement
             * search the parentage of the element to find an element of the given
             * tag name.
             *
             * Parameters:
             * type - {String} the tag name of the element type to search for
             *
             * Returns:
             * {HTMLElement} the first node (this one or first parent) with the
             * requested tag name or false if none are found.
             */
            findElement: function(type) {
                var o = this,
                    tagName = o.tagName;
                while (o.tagName != type && o && o.parentNode && o.parentNode != o) {
                    o = document.id(o.parentNode);
                }
                return o.tagName == type ? o: false;
            }
        });
        /**
         * Class: Array
         * Extensions to the javascript array object
         */
        Array.implement({
            /**
             * APIMethod: swap
             * swaps 2 elements of an array
             *
             * Parameters:
             * a - the first position to swap
             * b - the second position to swap
             */
            'swap': function(a, b) {
                var temp = this[a];
                this[a] = this[b];
                this[b] = temp;
            }
        });
    })(document.id || $);
    // End Wrapper for document.id
    
    //add all of base's members to the global context
    if (exports.global) {
        Object.append(exports.global, exports);
    }

});

/*
---

name: Jx.Object

description: Base class for all other object in the JxLib framework.

license: MIT-style license.

requires:
 - Jx

provides: [Jx.Object]

...
 */
// $Id$
/**
 * Class: Jx.Object
 * Base class for all other object in the JxLib framework. This class
 * implements both mootools mixins Events and Options so the rest of the
 * classes don't need to.
 *
 * The Initialization Pipeline:
 * Jx.Object provides a default initialize method to construct new instances
 * of objects that inherit from it.  No sub-class should override initialize
 * unless you know exactly what you're doing.  Instead, the initialization
 * pipeline provides an init() method that is intended to be overridden in
 * sub-classes to provide class-specific initialization as part of the
 * initialization pipeline.
 *
 * The basic initialization pipeline for a Jx.Object is to parse the
 * parameters provided to initialize(), separate out options from other formal
 * parameters based on the parameters property of the class, call init() and
 * initialize plugins.
 *
 * Parsing Parameters:
 * Because each sub-class no longer has an initialize method, it no longer has
 * direct access to parameters passed to the constructor.  Instead, a
 * sub-class is expected to provide a parameters attribute with an array of
 * parameter names in the order expected.  Jx.Object will enumerate the
 * attributes passed to its initialize method and automatically place them
 * in the options object under the appropriate key (the value from the
 * array).  Parameters not found will not be present or will be null.
 *
 * The default parameters are a single options object which is merged with
 * the options attribute of the class.
 *
 * Calling Init:
 * Jx.Object fires the event 'preInit' before calling the init() method,
 * calls the init() method, then fires the 'postInit' event.  It is expected
 * that most sub-class specific initialization will happen in the init()
 * method.  A sub-class may hook preInit and postInit events to perform tasks
 * in one of two ways.
 *
 * First, simply send onPreInit and onPostInit functions via the options
 * object as follows (they could be standalone functions or functions of
 * another object setup using .bind())
 *
 * (code)
 * var preInit = function () {}
 * var postInit = function () {}
 *
 * var options = {
 *   onPreInit: preInit,
 *   onPostInit: postInit,
 *   ...other options...
 * };
 *
 * var dialog = new Jx.Dialog(options);
 * (end)
 *
 * The second method you can use is to override the initialize method
 *
 * (code)
 * var MyClass = new Class({
 *   Family: 'MyClass',
 *   initialize: function() {
 *     this.addEvent('preInit', this.preInit.bind(this));
 *     this.addEvent('postInit', this.postInit.bind(this));
 *     this.parent.apply(this, arguments);
 *   },
 *   preInit: function() {
 *     // something just before init() is called
 *   },
 *   postInit: function() {
 *     // something just after init() is called
 *   },
 *   init: function() {
 *     this.parent();
 *     // initialization code here
 *   }
 * });
 * (end)
 *
 * When the object finishes initializing itself (including the plugin
 * initialization) it will fire off the initializeDone event. You can hook
 * into this event in the same way as the events mentioned above.
 *
 * Plugins:
 * Plugins provide pieces of additional, optional, functionality. They are not
 * necessary for the proper function of an object. All plugins should be
 * located in the Jx.Plugin namespace and they should be further segregated by
 * applicable object. While all objects can support plugins, not all of them
 * have the automatic instantiation of applicable plugins turned on. In order
 * to turn this feature on for an object you need to set the pluginNamespace
 * property of the object. The following is an example of setting the
 * property:
 *
 * (code)
 * var MyClass = new Class({
 *   Extends: Jx.Object,
 *   pluginNamespace: 'MyClass'
 * };
 * (end)
 *
 * The absence of this property does not mean you cannot attach a plugin to an
 * object. It simply means that you can't have Jx.Object create the
 * plugin for you.
 *
 * There are four ways to attach a plugin to an object. First, simply
 * instantiate the plugin yourself and call its attach() method (other class
 * options left out for the sake of simplicity):
 *
 * (code)
 * var MyGrid = new Jx.Grid();
 * var APlugin = new Jx.Plugin.Grid.Selector();
 * APlugin.attach(MyGrid);
 * (end)
 *
 * Second, you can instantiate the plugin first and pass it to the object
 * through the plugins array in the options object.
 *
 * (code)
 * var APlugin = new Jx.Plugin.Grid.Selector();
 * var MyGrid = new Jx.Grid({plugins: [APlugin]});
 * (end)
 *
 * The third way is to pass the information needed to instantiate the plugin
 * in the plugins array of the options object:
 *
 * (code)
 * var MyGrid = new Jx.Grid({
 *   plugins: [{
 *      name: 'Selector',
 *      options: {}    //options needed to create this plugin
 *   },{
 *      name: 'Sorter',
 *      options: {}
 *   }]
 * });
 * (end)
 *
 * The final way, if the plugin has no options, is to pass the name of the
 * plugin as a simple string in the plugins array.
 *
 * (code)
 * var MyGrid = new Jx.Grid({
 *   plugins: ['Selector','Sorter']
 * });
 * (end)
 *
 * Part of the process of initializing plugins is to call prePluginInit() and
 * postPluginInit(). These events provide you access to the object just before
 * and after the plugins are initialized and/or attached to the object using
 * methods 2 and 3 above. You can hook into these in the same way that you
 * hook into the preInit() and postInit() events.
 *
 * Destroying Jx.Object Instances:
 * Jx.Object provides a destroy method that cleans up potential memory leaks
 * when you no longer need an object.  Sub-classes are expected to implement
 * a cleanup() method that provides specific cleanup code for each
 * sub-class.  Remember to call this.parent() when providing a cleanup()
 * method. Destroy will also fire off 2 events: preDestroy and postDestroy.
 * You can hook into these methods in the same way as the init or plugin
 * events.
 *
 * The Family Attribute:
 * the Family attribute of a class is used internally by JxLib to identify Jx
 * objects within mootools.  The actual value of Family is unimportant to Jx.
 * If you do not provide a Family, a class will inherit it's base class family
 * up to Jx.Object.  Family is useful when debugging as you will be able to
 * identify the family in the firebug inspector, but is not as useful for
 * coding purposes as it does not allow for inheritance.
 *
 * Events:
 *
 * preInit
 * postInit
 * prePluginInit
 * postPluginInit
 * initializeDone
 * preDestroy
 * postDestroy
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define('jx/object',function(require, exports, module){
    
    var base = require('../base');
    
    var jxObject = module.exports = new Class({
        
        Family: "Jx.Object",
        Implements: [Options, Events],
        plugins: null,
        pluginNamespace: 'Other',
        /**
         * Constructor: Jx.Object
         * create a new instance of Jx.Object
         *
         * Parameters:
         * options - {Object} optional parameters for creating an object.
         */
        parameters: ['options'],
    
        options: {
          /**
           * Option: useLang
           * Turns on this widget's ability to react to changes in
           * the default language. Handy for changing text out on the fly.
           *
           * TODO: Should this be enabled or disabled by default?
           */
          useLang: true,
          /**
           * Option: plugins
           * {Array} an array of plugins to add to the object.
           */
          plugins: null
        },
    
        bound: null,
        /**
         * APIProperty: ready
         * Indicator if this object has completed through the initialize pipeline
         * and is ready to be used. Plugins can check this when attaching to 
         * determine if they need to listen for the postInit event to do additional
         * work or just do that work straight away.
         */
        ready: null,
    
        initialize: function(){
            this.plugins = {};
            this.bound = {};
            //normalize arguments
            var numArgs = arguments.length,
                options = {},
                parameters = this.parameters,
                numParams,
                index;
    
            if (numArgs > 0) {
                if (numArgs === 1 &&
                        (typeOf(arguments[0])==='object') &&
                        parameters.length === 1 &&
                        parameters[0] === 'options') {
                    options = arguments[0];
                } else {
                    numParams = parameters.length;
                    if (numParams <= numArgs) {
                        index = numParams;
                    } else {
                        index = numArgs;
                    }
                    for (var i = 0; i < index; i++) {
                        if (parameters[i] === 'options') {
                            Object.append(options, arguments[i]);
                        } else {
                            options[parameters[i]] = arguments[i];
                        }
                    }
                }
            }
    
            this.setOptions(options);
    
            this.bound.changeText = this.changeText.bind(this);
            if (this.options.useLang) {
                Locale.addEvent('change', this.bound.changeText);
            }
    
            //Changed the initPlugins() to before init and render so that 
            //plugins can connect to preInit and postInit functions as well as 
            //call methods before the object is completely initialized. This was
            //done mainly so grid plugins could call want events before render time.
            this.fireEvent('prePluginInit');
            this.initPlugins();
            this.fireEvent('postPluginInit');
            
            //after calling initPlugins we need to remove the plugins from the
            //options object or else every class that relies on the options will try 
            //to initialize the same plugins. By this point all of the plugins should
            //be registered in this.plugins.
            delete this.options.plugins;
            
            this.fireEvent('preInit');
            this.init();
            this.fireEvent('postInit');
            
            this.fireEvent('initializeDone');
            
            this.ready = true;
        },
    
        /**
         * Method: initPlugins
         * internal function to initialize plugins on object creation
         */
        initPlugins: function () {
            var p, klass, options, file,
                Plugin = require("./plugin");
            
            // pluginNamespace must be defined in order to pass plugins to the
            // object
            if (this.pluginNamespace !== undefined && this.pluginNamespace !== null) {
                if (this.options.plugins !== undefined &&
                        this.options.plugins !== null &&
                        typeOf(this.options.plugins) === 'array') {
                    this.options.plugins.each(function (plugin) {
                        
                        if (instanceOf(plugin, Plugin)) {
                            plugin.attach(this);
                        } else {
                            var type = typeOf(plugin);
                            if (type === 'object') {
                                klass = plugin.name;
                                options = plugin.options;
                            } else if (type === 'string') {
                                //this is a name for a plugin.
                                klass = plugin;
                                options = {};
                            }
                            
                            if (klass.contains('.js') || klass.contains('/')) {
                                //this is a require path - either a full path with .js
                                //  or a relative path since it has at least 1 slash.
                                file = klass;
                            } else {
                                //otherwise it's just a name and should be in the proper
                                //namespace. Create the require path.
                                file = './plugin/' + this.pluginNamespace.toLowerCase() + '/' + klass.toLowerCase();
                            }
                            //Not sure what this will return if it can't find the file in non-global situations
                            var plug = require(file);
                            if (plug === undefined || plug === null) {
                                //try the adaptor namespace if the plugin namespace turns up nothing...
                                file = './adaptor/' + this.pluginNamespace.toLowerCase() + '/' + klass.toLowerCase();
                                plug = require(file);
                            }
                            
                            if (plug !== undefined && plug !== null) {
                                p = new plug(options);
                                p.attach(this);
                            } else {
                                return;
                            }
                        }
                    }, this);
                }
            }
        },
        
    
        /**
         * APIMethod: destroy
         * destroy a Jx.Object, safely cleaning up any potential memory
         * leaks along the way.  Uses the cleanup method of an object to
         * actually do the cleanup.
         * Emits the preDestroy event before cleanup and the postDestroy event
         * after cleanup.
         */
        destroy: function () {
            this.fireEvent('preDestroy');
            this.cleanup();
            this.fireEvent('postDestroy');
        },
    
        /**
         * Method: cleanup
         * to be implemented by subclasses to do the actual work of destroying
         * an object.
         */
        cleanup: function () {
            //detach plugins
            if (this.plugins.getLength > 0) {
                Object.each(this.plugins, function (plugin) {
                    plugin.detach();
                    plugin.destroy();
                }, this);
            }
            this.plugins = {};
            if (this.options.useLang && this.bound.changeText !== undefined && this.bound.changeText !== null) {
                Locale.removeEvent('change', this.bound.changeText);
            }
            this.bound = null;
        },
    
        /**
         * Method: init
         * virtual initialization method to be implemented by sub-classes
         */
        init: function(){},
    
        /**
         * APIMethod: registerPlugin
         * This method is called by a plugin that has its attach method
         * called.
         *
         * Parameters:
         * plugin - the plugin to register with this object
         */
        registerPlugin: function (plugin) {
            if (!Object.keys(this.plugins).contains(plugin.name)) {
                this.plugins[plugin.name] = plugin;
            }
        },
        /**
         * APIMethod: deregisterPlugin
         * his method is called by a plugin that has its detach method
         * called.
         *
         * Parameters:
         * plugin - the plugin to deregister.
         */
        deregisterPlugin: function (plugin) {
            if (Object.keys(this.plugins).contains(plugin.name)) {
                delete this.plugins[plugin.name];
            }
        },
    
        /**
         * APIMethod: getPlugin
         * Allows a developer to get a reference to a plugin with only the
         * name of the plugin.
         *
         * Parameters:
         * name - the name of the plugin as defined in the plugin's name property
         */
        getPlugin: function (name) {
            if (Object.keys(this.plugins).contains(name)) {
                return this.plugins[name];
            }
            return null;
        },
    
        /**
         * APIMethod: getText
         *
         * returns the localized text.
         *
         * Parameters:
         * val - <String> || <Function> || <Object> = { set: '', key: ''[, value: ''] } for a Locale object
         */
        getText: function(val) {
          // COMMENT: just an idea how a localization object could be stored to the instance if needed somewhere else and options change?
          this.i18n = val;
          return base.getText(val);
        },
    
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         *
         * Parameters:
         * lang - the language being changed to or that had it's data set of
         *    translations changed.
         */
        changeText : function(){},
    
        /**
         * Method: generateId
         * Used to generate a unique ID for Jx Objects.
         */
        generateId: function(prefix){
            prefix = (prefix) ? prefix : 'jx-';
            var uid = Slick.uidOf(this);
            delete this.uid;
            return prefix + uid;
        }
    });
    
    
    /**
     * Rewrite Document.id so that we can call toElement on a Jx.Widget instance.
     * It is placed here as we need Jx.Object defined before we can use it.
     */
    Document.implement({
        
        id: (function(){
    
            var types = {
    
                    string: function(id, nocash, doc){
                            id = Slick.find(doc, '#' + id.replace(/(\W)/g, '\\$1'));
                            return (id) ? types.element(id, nocash) : null;
                    },
    
                    element: function(el, nocash){
                            Slick.uidOf(el);
                            if (!nocash && !el.$family && !(/^(?:object|embed)$/i).test(el.tagName)){
                                    el._fireEvent = el.fireEvent;
                                    Object.append(el, Element.Prototype);
                            }
                            return el;
                    },
    
                    object: function(obj, nocash, doc){
                            if (obj.toElement) return types.element(obj.toElement(doc), nocash);
                            return null;
                    }
    
            };
    
            types.textnode = types.whitespace = types.window = types.document = function(zero){
                    return zero;
            };
    
            return function(el, nocash, doc){
                    if (el && instanceOf(el, jxObject)) {
                        return types.element(el.toElement(doc || document), nocash);
                    }                
                    if (el && el.$family && el.uniqueNumber) return el;
                    var type = typeOf(el);
                    return (types[type]) ? types[type](el, nocash, doc || document) : null;
            };
    
        })()
    });
    

    if (base.global) {
        base.global.Object = module.exports;
    }

});

/*
---

name: Jx.Stack

description: A singleton object for managing a global z-index stack for widgets that need to order themselves in the z-index of the page relative to other such widgets.

license: MIT-style license.

requires:
 - Jx

provides: [Jx.Stack]

...
 */
/**
 * Class: Jx.Stack
 * Manage the zIndex of widgets
 *
 * This is a singleton and should be called directly, like so:
 *
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2010 Paul Spencer
 *
 * This file is licensed under an MIT style license
 */

define('jx/stack', function(require, exports, module){
    
    var base = require('../base');
    
    var stack = module.exports = new(new Class({
      /**
       * Property: els
       * {Array} the elements in the stack
       */
      els: [],
    
      /**
       * Property: base
       * {Integer} the base z-index value of the first element in the stack
       */
      base: 1000,
    
      /**
       * Property: increment
       * {Integer} the amount to increment the z-index between elements of the
       * stack
       */
      increment: 100,
    
      /**
       * APIMethod: stack
       * push an element onto the stack and set its z-index appropriately
       *
       * Parameters:
       * el - {DOMElement} a DOM element to push on the stack
       */
      stack: function(el) {
        this.unstack(el);
        this.els.push(el);
        this.setZIndex(el, this.els.length-1);
      },
    
      /**
       * APIMethod: unstack
       * pull an element off the stack and reflow the z-index of the remaining
       * elements in the stack if necessary
       *
       * Parameters:
       * el - {DOMElement} the DOM element to pull off the stack
       */
      unstack: function(el) {
        var elements = this.els;
        if (elements.contains(el)) {
          el.setStyle('z-index', '');
          var idx = elements.indexOf(el);
          elements.erase(el);
          for (var i=idx; i<elements.length; i++) {
            this.setZIndex(elements[i], i);
          }
        }
      },
    
      /**
       * Method: setZIndex
       * set the z-index of an element based on its position in the stack
       *
       * Parameters:
       * el - {DOMElement} the element to set the z-index for
       * idx - {Integer} optional, the index to assume for this object
       */
      setZIndex: function(obj, idx) {
        idx = idx || this.els.indexOf(obj);
        if (idx !== false) {
          document.id(obj).setStyle('z-index', this.base + (idx*this.increment));
        }
      }
    
    }))();
    
    if (base.global) {
        base.global.Stack = module.exports;
    }

});

/*
---

name: Locale.English.US

description: Default translations of text strings used in JX for US english (en-US)

license: MIT-style license.

requires:
 - More/Locale

provides: [Locale.English.US]

...
 */

define('jx/locale/english',function(require, exports, module){
    
    Locale.define('en-US', 'Jx', {
        
        'widget': {
            busyMessage: 'Working ...'
        },
        'colorpalette': {
            alphaLabel: 'alpha (%)'
        },
        notice: {
            closeTip: 'close this notice'
        },
        progressbar: {
            messageText: 'Loading...',
            progressText: '{progress} of {total}'
        },
        field: {
            requiredText: '*'
        },
        file: {
            browseLabel: 'Browse...'
        },
        'formatter': {
            'boolean': {
                'true': 'Yes',
                'false': 'No'
            },
            'currency': {
                sign: '$'
            },
            'number': {
                decimalSeparator: '.',
                thousandsSeparator: ','
            }
        },
        splitter: {
            barToolTip: 'drag this bar to resize'
        },
        panelset: {
            barToolTip: 'drag this bar to resize'
        },
        panel: {
            collapseTooltip: 'Collapse/Expand Panel',
            collapseLabel: 'Collapse',
            expandLabel: 'Expand',
            maximizeTooltip: 'Maximize Panel',
            maximizeLabel: 'Maximize',
            restoreTooltip: 'Restore Panel',
            restoreLabel: 'Restore',
            closeTooltip: 'Close Panel',
            closeLabel: 'Close'
        },
        confirm: {
            affirmativeLabel: 'Yes',
        negativeLabel: 'No'
        },
        dialog: {
            resizeToolTip: 'Resize dialog'
        },
        message: {
            okButton: 'Ok'
        },
        prompt: {
            okButton: 'Ok',
            cancelButton: 'Cancel'
        },
        upload: {
            buttonText: 'Upload Files'
        },
        'plugin': {
            'resize': {
                tooltip: 'Drag to resize, double click to auto-size.'
            },
            'editor': {
                submitButton: 'Save',
                cancelButton: 'Cancel'
            }
        }
    });

});

/*
---

name: Jx.Widget

description: Base class for all widgets (visual classes) in the JxLib Framework.

license: MIT-style license.

requires:
 - Jx.Object
 - Jx.Stack
 - Locale.English.US

provides: [Jx.Widget]

css:
 - chrome

images:
 - spinner_16.gif
 - spinner_24.gif

optional:
 - More/Spinner

...
 */
// $Id$
/**
 * Class: Jx.Widget
 * Base class for all widgets (visual classes) in the JxLib Framework. This
 * class extends <Jx.Object> and adds the Chrome, ContentLoader, Addable, and
 * AutoPosition mixins from the original framework.
 *
 * ContentLoader:
 *
 * ContentLoader functionality provides a consistent
 * mechanism for descendants of Jx.Widget to load content in one of
 * four different ways:
 *
 * o using an existing element, by id
 *
 * o using an existing element, by object reference
 *
 * o using an HTML string
 *
 * o using a URL to get the content remotely
 *
 * Chrome:
 *
 * Chrome is the extraneous visual element that provides the look and feel to
 * some elements i.e. dialogs.  Chrome is added inside the element specified
 * but may bleed outside the element to provide drop shadows etc.  This is
 * done by absolutely positioning the chrome objects in the container based on
 * calculations using the margins, borders, and padding of the jxChrome
 * class and the element it is added to.
 *
 * Chrome can consist of either pure CSS border and background colors, or
 * a background-image on the jxChrome class.  Using a background-image on
 * the jxChrome class creates four images inside the chrome container that
 * are positioned in the top-left, top-right, bottom-left and bottom-right
 * corners of the chrome container and are sized to fill 50% of the width
 * and height.  The images are positioned and clipped such that the
 * appropriate corners of the chrome image are displayed in those locations.
 *
 * Busy States:
 *
 * Any widget can be set as temporarily busy by calling the setBusy(true)
 * method and then as idle by calling setBusy(false).  By default, busy
 * widgets display an event mask that prevents them from being clicked and
 * a spinner image with a message.  By default, there are two configurations
 * for the spinner image and message, one for 'small' widgets like buttons
 * and inputs, and one for larger widgets like panels and dialogs.  The
 * framework automatically chooses the most appropriate configuration so you
 * don't need to worry about it unless you want to customize it.
 *
 * You can disable this behaviour entirely by setting busyMask: false in the
 * widget options when creating the widget.
 *
 * The mask and spinner functionality is provided by the MooTools Spinner
 * class.  You can use any options documented for Spinner or Mask by setting
 * the maskOptions option when creating a widget.
 *
 * Events:
 * Jx.Widget has several events called during it's lifetime (in addition to
 * the ones for its base class <Jx.Object>).
 *
 * preRender - called before rendering begins
 * postRender - called after rendering is done
 * deferRender - called when the deferRender option is set to true. The first
 *      two events (pre- and post- render will NOT be called if deferRender is
 *      set to true).
 * contentLoaded - called after content has been loaded successfully
 * contentLoadFailed - called if content can not be loaded for some reason
 * addTo - called when a widget is added to another element or widget
 * busy - called just before the busy mask is rendered/removed
 *
 * Locale Keys:
 * widget.busyMessage - sets the message of the waiter component when used
 */

define('jx/widget', function(require, exports, module) {

    var base = require('../base'),
        jxObject = require('./object'),
        Stack = require('./stack');
        
    require('./locale/english');
    
    var widget = module.exports = new Class({
        Extends: jxObject,
        Family: "Jx.Widget",
    
        options: {
            /* Option: id
             * (optional) {String} an HTML ID to assign to the widget
             */
            id: null,
            /**
             * Option: content
             * content may be an HTML element reference, the id of an HTML element
             * already in the DOM, or an HTML string that becomes the inner HTML
             * of the element.
             */
            content: null,
            /**
             * Option: contentURL
             * the URL to load content from
             */
            contentURL: null,
            /**
             * Option: loadOnDemand
             * {boolean} ajax content will only be loaded if the action is requested
             * (like loading the content into a tab when activated)
             */
            loadOnDemand : false,
            /**
             * Option: cacheContent
             * {boolean} determine whether the content should be loaded every time
             * or if it's being cached
             */
            cacheContent : true,
            /**
             * Option: template
             * the default HTML structure of this widget.  The default template
             * is just a div with a class of jxWidget in the base class
             */
            template: '<div class="jxWidget"></div>',
            /**
             * Option: busyClass
             * {String} a CSS class name to apply to busy mask when a widget is
             * set as busy.  The default is 'jxBusy'.
             */
            busyClass: 'jxBusy',
            /**
             * Option: busyMask
             * {Object} an object of options to pass to the MooTools Spinner
             * when masking a busy object.  Set to false if you do not want
             * to use the busy mask.
             */
            busyMask: {
              'class': 'jxSpinner jxSpinnerLarge',
              img: {'class':'jxSpinnerImage'},
              content: {'class':'jxSpinnerContent'},
              messageContainer: {'class':'jxSpinnerMessage'},
              useIframeShim: true,
              iframeShimOptions: {
                className: 'jxIframeShim'
              },
              fx: true
            },
            /**
             * Option: deferRender
             * Used to defer rendering of a widget to a later time. Useful when
             * we need data or other information not at hand at the moment
             * of Widget instantiation. If set to true, the user will need to call
             * render() at some later time. The only drawback to doing so will be
             * the loss of preRender and postRender events.
             */
            deferRender: false,
            /**
             * Option: parent
             * Indicates the parent of the widget. We will put the domObj inside this
             * parent before any rendering happens so that size calculations will 
             * work properly. Default is null which doesn't put this anywhere.
             */
            //parent: null
        },
    
        /**
         * Property: classes
         * {Object} object properties to CSS class names used to
         * automatically extract references to important DOM elements when
         * processing a widget template.  This allows developers to provide custom
         * HTML structures without affecting the functionality of widgets.
         */
        classes: {
            domObj: 'jxWidget'
        },
    
        /**
         * Property: busy
         * {Boolean} is the widget currently busy?  This should be considered
         * an internal property, use the API methods <Jx.Widget::setBusy> and
         * <Jx.Widget::isBusy> to manage the busy state of a widget.
         */
        busy: false,
    
        /**
         * Property: domObj
         * The HTMLElement that represents this widget.
         */
        domObj: null,
    
        /**
         * Property: contentIsLoaded
         * {Boolean} tracks the load state of the content, specifically useful
         * in the case of remote content.
         */
        contentIsLoaded: false,
    
        /**
         * Property: chrome
         * the DOM element that contains the chrome
         */
        chrome: null,
    
        /**
         * Method: init
         * sets up the base widget code and runs the render function.  Called
         * by the Jx.Object framework for object initialization, should not be
         * called directly.
         */
        init: function(){
            if (!this.options.deferRender) {
                this.fireEvent('preRender');
                this.render();
                this.fireEvent('postRender');
            } else {
                this.fireEvent('deferRender');
            }
        },
    
        /**
         * APIMethod: loadContent
         *
         * triggers loading of content based on options set for the current
         * object.
         *
         * Parameters:
         * element - {Object} the element to insert the content into
         *
         * Events:
         *
         * ContentLoader adds the following events to an object.  You can
         * register for these events using the addEvent method or by providing
         * callback functions via the on{EventName} properties in the options
         * object
         *
         * contentLoaded - called when the content has been loaded.  If the
         *     content is not asynchronous then this is called before loadContent
         *     returns.
         * contentLoadFailed - called if the content fails to load, primarily
         *     useful when using the contentURL method of loading content.
         */
        loadContent: function(element) {
            var c,
                options = this.options,
                timeout;
            element = document.id(element);
            if (options.content) {
                if (options.content.domObj) {
                    c = document.id(options.content.domObj);
                } else {
                    c = document.id(options.content);
                }
                if (c) {
                    if (options.content.addTo) {
                        options.content.addTo(element);
                    } else {
                        element.appendChild(c);
                    }
                    this.contentIsLoaded = true;
                } else {
                    element.innerHTML = options.content;
                    this.contentIsLoaded = true;
                }
            } else if (options.contentURL) {
                this.contentIsLoaded = false;
                this.req = new Request({
                    url: options.contentURL,
                    method:'get',
                    evalScripts:true,
                    onRequest:(function() {
                      //only use the mask when loading on demand. Jx.Panel is specifically excluded.
                      if(options.loadOnDemand && typeOf(this) != 'Jx.Panel') {
                          this.setBusy(true);
                      }
                    }).bind(this),
                    onSuccess:(function(html) {
                        element.innerHTML = html;
                        this.contentIsLoaded = true;
                        if (Browser.Features.air){
                            window.clearTimeout(this.reqTimeout);
                        }
                        this.setBusy(false);
                        this.fireEvent('contentLoaded', this);
                    }).bind(this),
                    onFailure: (function(){
                        this.contentIsLoaded = true;
                        this.fireEvent('contentLoadFailed', this);
                        this.setBusy(false);
                    }).bind(this)
                });
                this.req.send();
                if (Browser.Features.air) {
                    timeout = (options.timeout !== undefined && options.timeout !== null) ? options.timeout : 10000;
                    this.reqTimeout = this.checkRequest.delay(timeout, this);
                }
            } else {
                this.contentIsLoaded = true;
            }
            if (options.contentId) {
                element.id = this.options.contentId;
            }
            if (this.contentIsLoaded) {
                this.fireEvent('contentLoaded', this);
            }
        },
    
        /**
         * APIMethod: position
         * positions an element relative to another element
         * based on the provided options.  Positioning rules are
         * a string with two space-separated values.  The first value
         * references the parent element and the second value references
         * the thing being positioned.  In general, multiple rules can be
         * considered by passing an array of rules to the horizontal and
         * vertical options.  The position method will attempt to position
         * the element in relation to the relative element using the rules
         * specified in the options.  If the element does not fit in the
         * viewport using the rule, then the next rule is attempted.  If
         * all rules fail, the last rule is used and element may extend
         * outside the viewport.  Horizontal and vertical rules are
         * processed independently.
         *
         * Horizontal Positioning:
         * Horizontal values are 'left', 'center', 'right', and numeric values.
         * Some common rules are:
         * o 'left left' is interpreted as aligning the left
         * edge of the element to be positioned with the left edge of the
         * reference element.
         * o 'right right' aligns the two right edges.
         * o 'right left' aligns the left edge of the element to the right of
         * the reference element.
         * o 'left right' aligns the right edge of the element to the left
         * edge of the reference element.
         *
         * Vertical Positioning:
         * Vertical values are 'top', 'center', 'bottom', and numeric values.
         * Some common rules are:
         * o 'top top' is interpreted as aligning the top
         * edge of the element to be positioned with the top edge of the
         * reference element.
         * o 'bottom bottom' aligns the two bottom edges.
         * o 'bottom top' aligns the top edge of the element to the bottom of
         * the reference element.
         * o 'top bottom' aligns the bottom edge of the element to the top
         * edge of the reference element.
         *
         * Parameters:
         * element - the element to position
         * relative - the element to position relative to
         * options - the positioning options, see list below.
         *
         * Options:
         * horizontal - the horizontal positioning rule to use to position the
         *    element.  Valid values are 'left', 'center', 'right', and a numeric
         *    value.  The default value is 'center center'.
         * vertical - the vertical positioning rule to use to position the
         *    element.  Valid values are 'top', 'center', 'bottom', and a numeric
         *    value.  The default value is 'center center'.
         * offsets - an object containing numeric pixel offset values for the
         *    object being positioned as top, right, bottom and left properties.
         */
        position: function(element, relative, options) {
            element = document.id(element);
            relative = document.id(relative);
            var hor = Array.from(options.horizontal || ['center center']),
                ver = Array.from(options.vertical || ['center center']),
                offsets = Object.merge({},{top:0,right:0,bottom:0,left:0}, options.offsets || {}),
                coords = relative.getCoordinates(), //top, left, width, height,
                page, 
                scroll,
                size,
                left,
                rigbht,
                top,
                bottom,
                n,
                parts;
            if (!document.id(element.parentNode) || element.parentNode ==  document.body) {
                page = base.getPageDimensions();
                scroll = document.id(document.body).getScroll();
            } else {
                page = document.id(element.parentNode).getContentBoxSize(); //width, height
                scroll = document.id(element.parentNode).getScroll();
            }
            if (relative == document.body) {
                // adjust coords for the scroll offsets to make the object
                // appear in the right part of the page.
                coords.left += scroll.x;
                coords.top += scroll.y;
            } else if (element.parentNode == relative) {
                // if the element is opening *inside* its relative, we want
                // it to position correctly within it so top/left becomes
                // the reference system.
                coords.left = 0;
                coords.top = 0;
            }
            size = element.getMarginBoxSize(); //width, height
            if (!hor.some(function(opt) {
                parts = opt.split(' ');
                if (parts.length != 2) {
                    return false;
                }
                if (!isNaN(parseInt(parts[0],10))) {
                    n = parseInt(parts[0],10);
                    if (n>=0) {
                        left = n;
                    } else {
                        left = coords.left + coords.width + n;
                    }
                } else {
                    switch(parts[0]) {
                        case 'right':
                            left = coords.left + coords.width;
                            break;
                        case 'center':
                            left = coords.left + Math.round(coords.width/2);
                            break;
                        case 'left':
                        default:
                            left = coords.left;
                            break;
                    }
                }
                if (!isNaN(parseInt(parts[1],10))) {
                    n = parseInt(parts[1],10);
                    if (n<0) {
                        right = left + n;
                        left = right - size.width;
                    } else {
                        left += n;
                        right = left + size.width;
                    }
                    right = coords.left + coords.width + parseInt(parts[1],10);
                    left = right - size.width;
                } else {
                    switch(parts[1]) {
                        case 'left':
                            left -= offsets.left;
                            right = left + size.width;
                            break;
                        case 'right':
                            left += offsets.right;
                            right = left;
                            left = left - size.width;
                            break;
                        case 'center':
                        default:
                            left = left - Math.round(size.width/2);
                            right = left + size.width;
                            break;
                    }
                }
                return (left >= scroll.x && right <= scroll.x + page.width);
            })) {
                // all failed, snap the last position onto the page as best
                // we can - can't do anything if the element is wider than the
                // space available.
                if (right > page.width) {
                    left = scroll.x + page.width - size.width;
                }
                if (left < 0) {
                    left = 0;
                }
            }
            element.setStyle('left', left);
    
            if (!ver.some(function(opt) {
              parts = opt.split(' ');
              if (parts.length != 2) {
                return false;
              }
              if (!isNaN(parseInt(parts[0],10))) {
                top = parseInt(parts[0],10);
              } else {
                switch(parts[0]) {
                  case 'bottom':
                    top = coords.top + coords.height;
                    break;
                  case 'center':
                    top = coords.top + Math.round(coords.height/2);
                    break;
                  case 'top':
                  default:
                    top = coords.top;
                    break;
                }
              }
              if (!isNaN(parseInt(parts[1],10))) {
                  var n = parseInt(parts[1],10);
                  if (n>=0) {
                      top += n;
                      bottom = top + size.height;
                  } else {
                      bottom = top + n;
                      top = bottom - size.height;
                  }
              } else {
                  switch(parts[1]) {
                      case 'top':
                          top -= offsets.top;
                          bottom = top + size.height;
                          break;
                      case 'bottom':
                          top += offsets.bottom;
                          bottom = top;
                          top = top - size.height;
                          break;
                      case 'center':
                      default:
                          top = top - Math.round(size.height/2);
                          bottom = top + size.height;
                          break;
                  }
              }
              return (top >= scroll.y && bottom <= scroll.y + page.height);
          })) {
              // all failed, snap the last position onto the page as best
              // we can - can't do anything if the element is higher than the
              // space available.
              if (bottom > page.height) {
                  top = scroll.y + page.height - size.height;
              }
              if (top < 0) {
                  top = 0;
              }
          }
          element.setStyle('top', top);
    
          /* update the jx layout if necessary */
          var jxl = element.retrieve('jxLayout');
          if (jxl) {
              jxl.options.left = left;
              jxl.options.top = top;
          }
        },
    
        /**
         * Method: makeChrome
         * create chrome on an element.
         *
         * Parameters:
         * element - {HTMLElement} the element to put the chrome on.
         */
        makeChrome: function(element) {
            var c = new Element('div', {
                    'class':'jxChrome',
                    events: {
                      contextmenu: function(e) { e.stop(); }
                    }
                }),
                src;
    
            /* add to element so we can get the background image style */
            element.adopt(c);
    
            /* pick up any offset because of chrome, set
             * through padding on the chrome object.  Other code can then
             * make use of these offset values to fix positioning.
             */
            this.chromeOffsets = c.measure(function() {
                return this.getSizes(['padding']).padding;
            });
            c.setStyle('padding', 0);
    
            /* get the chrome image from the background image of the element */
            /* the app: protocol check is for adobe air support */
            src = c.getStyle('backgroundImage');
            if (src !== null) {
              if (!(src.contains('http://') || src.contains('https://') || src.contains('file://') || src.contains('app:/'))) {
                  src = null;
              } else {
                  src = src.slice(4,-1);
                  /* this only seems to be IE and Opera, but they add quotes
                   * around the url - yuck
                   */
                  if (src.charAt(0) == '"') {
                      src = src.slice(1,-1);
                  }
    
                  /* and remove the background image */
                  c.setStyle('backgroundImage', 'none');
    
                  /* make chrome */
                  ['TR','TL','BL','BR'].each(function(s){
                      c.adopt(
                          new Element('div',{
                              'class':'jxChrome'+s
                          }).adopt(
                          new Element('img',{
                              'class':'png24',
                              src:src,
                              alt: '',
                              title: ''
                          })));
                  }, this);
              }
            }
            /* create a shim so selects don't show through the chrome */
            if (window.IframeShim !== undefined) {
              this.shim = new IframeShim(c, {className: 'jxIframeShim'});
            }
    
            /* remove from DOM so the other resizing logic works as expected */
            c.dispose();
            this.chrome = c;
        },
    
        /**
         * APIMethod: showChrome
         * show the chrome on an element.  This creates the chrome if necessary.
         * If the chrome has been previously created and not removed, you can
         * call this without an element and it will just resize the chrome within
         * its existing element.  You can also pass in a different element from
         * which the chrome was previously attached to and it will move the chrome
         * to the new element.
         *
         * Parameters:
         * element - {HTMLElement} the element to show the chrome on.
         */
        showChrome: function(element) {
            element = document.id(element) || document.id(this);
            if (element) {
                if (!this.chrome) {
                    this.makeChrome(element);
                    element.addClass('jxHasChrome');
                }
                this.resizeChrome(element);
                if (this.shim) {
                  this.shim.show();
                }
                if (element && this.chrome.parentNode !== element) {
                    element.adopt(this.chrome);
                    this.chrome.setStyle('z-index',-1);
                }
            }
        },
    
        /**
         * APIMethod: hideChrome
         * removes the chrome from the DOM.  If you do this, you can't
         * call showChrome with no arguments.
         */
        hideChrome: function() {
            if (this.chrome) {
                if (this.shim) {
                  this.shim.hide();
                }
                this.chrome.parentNode.removeClass('jxHasChrome');
                this.chrome.dispose();
            }
        },
    
        /**
         * APIMethod: resizeChrome
         * manually resize the chrome on an element.
         *
         * Parameters:
         * element: {DOMElement} the element to resize the chrome for
         */
        resizeChrome: function(o) {
            if (this.chrome && Browser.ie && Browser.ie4) {
                this.chrome.setContentBoxSize(document.id(o).getBorderBoxSize());
                if (this.shim) {
                  this.shim.position();
                }
            }
        },
    
        /**
         * APIMethod: addTo
         * adds the object to the DOM relative to another element.  If you use
         * 'top' or 'bottom' then the element is added to the relative
         * element (becomes a child node).  If you use 'before' or 'after'
         * then the element is inserted adjacent to the reference node.
         *
         * Parameters:
         * reference - {Object} the DOM element or id of a DOM element
         * to append the object relative to
         * where - {String} where to append the element in relation to the
         * reference node.  Can be 'top', 'bottom', 'before' or 'after'.
         * The default is 'bottom'.
         *
         * Returns:
         * the object itself, which is useful for chaining calls together
         */
        addTo: function(reference, where) {
            var el = document.id(this.addable) || document.id(this.domObj);
            if (el) {
                if (reference instanceof widget && reference.add !== undefined) {
                    reference.add(el);
                } else {
                    ref = document.id(reference);
                    el.inject(ref,where);
                }
                this.fireEvent('addTo',this);
            }
            return this;
        },
    
        /**
         * APIMethod: toElement
         * return a DOM element reference for this widget, by default this
         * returns the local domObj reference.  This is used by the mootools
         * framework with the document.id() or $() methods allowing you to
         * manipulate a Jx.Widget sub class as if it were a DOM element.
         *
         * (code)
         * var button = new Jx.Button({label: 'test'});
         * $(button).inject('someElement');
         * (end)
         */
        toElement: function() {
            return this.domObj;
        },
    
        /**
         * APIMethod: processTemplate
         * This function pulls the needed elements from a provided template
         *
         * Parameters:
         * template - the template to use in grabbing elements
         * classes - an array of class names to use in grabbing elements
         * container - the container to add the template into
         *
         * Returns:
         * a hash object containing the requested Elements keyed by the class
         * names
         */
        processTemplate: function(template,classes,container){
            var h = {},
                element,
                el;
            if (container !== undefined && container !== null){
                element = container.set('html',template);
            } else {
                element = new Element('div',{html:template});
            }
            Object.each(classes, function(klass){
                el = element.getElement('.'+klass);
                if (el !== undefined && el !== null){
                    h[klass] = el;
                }
            });
            return h;
        },
    
        /**
         * APIMethod: dispose
         * remove the widget from the DOM
         */
        dispose: function(){
            var el = document.id(this.addable) || document.id(this.domObj);
            if (el) {
                el.dispose();
            }
        },
    
        /**
         * Method: cleanup
         * destroy the widget and clean up any potential memory leaks
         */
        cleanup: function(){
            if (this.domObj !== undefined && this.domObj !== null) {
                this.domObj.eliminate('jxWidget');
                this.domObj.destroy();
            }
            if (this.addable !== undefined && this.addable !== null) {
                this.addable.destroy();
            }
            if (this.domA !== undefined && this.domA !== null) {
                this.domA.destroy();
            }
            if (this.classes !== undefined && this.classes !== null) {
                for (var k in this.classes) {
                    this[k] = null;
                }
            }
            if (this.elements !== undefined && this.classes !== null){
                this.elements = null;
            }
            this.parent();
        },
    
        /**
         * Method: render
         * render the widget, internal function called by the framework.
         */
        render: function() {
            this.elements = this.processElements(this.options.template,
                this.classes);
            if (this.domObj !== undefined && this.domObj !== null) {
              if ( this.options.id !== undefined && this.options.id !== null) {
                this.domObj.set('id', this.options.id);
              }
              //if a parent is passed in add this widget to it
              if (this.options.parent !== undefined && this.options.parent !== null) {
                if (typeOf(this.options.parent) == 'string' && this.options.parent.toLowerCase() == 'body') {
                    this.options.parent = document.body;
                } 
                this.addTo(this.options.parent);
              }
              //TODO: Should we autogenerate an id when one is not provided? like so...
              // this.domObj.set('id',this.generateId());
              this.domObj.store('jxWidget', this);
            }
        },
    
        /**
         * Property: elements
         * a hash of elements extracted by processing the widget template
         */
        elements: null,
    
        /**
         * Method: processElements
         * process the template of the widget and populate the elements hash
         * with any objects.  Also set any object references based on the classes
         * hash.
         */
        processElements: function(template, classes) {
            var keys = [],
                values = [];
            for (var key in classes){
                if (key !== undefined) {
                    values.push(classes[key]);
                    keys.push(key);
                }
            }
            elements = this.processTemplate(template, values);
            keys.each(function(key){
                if (key != 'elements' && elements[classes[key]] !== undefined && elements[classes[key]] !== null) {
                    this[key] =  elements[classes[key]];
                }
            },this);
            return elements;
        },
    
        /**
         * APIMethod: isBusy
         * indicate if the widget is currently busy or not
         *
         * Returns:
         * {Boolean} true if busy, false otherwise.
         */
        isBusy: function() {
          return this.busy;
        },
    
        /**
         * APIMethod: setBusy
         * set the busy state of the widget
         *
         * Parameters:
         * busy         - {Boolean} true to set the widget as busy, false to set it as idle.
         * message      - {String||Jx Localized Object} (Optional) set a custom message directly
         *                next to the loading icon. Default is {set:'Jx',key:'widget',value:'busyMessage'}
         * forceMessage - {Boolean} force displaying a message for larger areas than 60px of height
         */
        setBusy: function(state, message, forceMessage) {
          if (this.busy == state) {
            return;
          }
          var options = this.options,
              z,
              size,
              opts,
              domObj = this.domObj;
              
            //if domObj is null or undefined we can't do this....
            if (domObj === null || domObj === undefined) return;
          message = (message !== undefined && message !== null) ? message : {
            set:'Jx',
            key:'widget',
            value:'busyMessage'
          };
          forceMessage = (forceMessage !== undefined && forceMessage !== null) ? forceMessage : false;
          this.busy = state;
          this.fireEvent('busy', state);
          if (state) {
            if (options.busyClass) {
              domObj.addClass(options.busyClass);
            }
            if (options.busyMask && domObj.spin) {
              /* put the spinner above the element in the z-index */
              z = Jx.getNumber(domObj.getStyle('z-index'));
              opts = {
                style: {
                  'z-index': z+1
                }
              };
              /* switch to the small size if the element is less than
               * 60 pixels high
               */
              size = domObj.getBorderBoxSize();
              if (size.height < 60 || forceMessage) {
                opts['class'] = 'jxSpinner jxSpinnerSmall';
                opts.img = null;
                opts.message = new Element('p',{
                  'class':'jxSpinnerMessage',
                  html: '<span class="jxSpinnerImage"></span>'+this.getText(message)
                });
              }
              opts = Object.merge({},options.busyMask, opts);
              domObj.set('spinner',opts);
              var spinner = domObj.get('spinner');
              spinner.show(!options.busyMask.fx);
            }
          } else {
            if (options.busyClass) {
              domObj.removeClass(options.busyClass);
            }
            if (options.busyMask && this.domObj.unspin) {
              domObj.get('spinner').hide(!options.busyMask.fx);
            }
          }
        },
    
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         *
         * Parameters:
         * lang - {string} the language being changed to or that had it's data set of
         *    translations changed.
         */
        changeText: function (lang) {
            //if the mask is being used then recreate it. The code will pull
            //the new text automatically
            if (this.busy) {
                this.setBusy(false);
                this.setBusy(true);
            }
        },
    
        /**
         * APIMethod: stack
         * stack this widget in the z-index of the DOM relative to other stacked
         * objects.
         *
         * Parameters:
         * el - {DOMElement} optional, the element to stack.  By default, the
         * element to stack is the one returned by the toElement method which
         * is typically this.domObj unless the method has been overloaded.
         */
        stack: function(el) {
          Stack.stack(el || document.id(this));
        },
    
        /**
         * APIMethod: unstack
         * remove this widget from the stack.
         *
         * Parameters:
         * el - {DOMElement} optional, the element to unstack.  By default, the
         * element to unstack is the one returned by the toElement method which
         * is typically this.domObj unless the method has been overloaded.
         */
        unstack: function(el) {
          Stack.unstack(el = el || document.id(this));
        }
    });
    
    
    /**
     * It seems AIR never returns an XHR that "fails" by not finding the
     * appropriate file when run in the application sandbox and retrieving a local
     * file. This affects Jx.ContentLoader in that a "failed" event is never fired.
     *
     * To fix this, I've added a timeout that waits about 10 seconds or so in the code above
     * for the XHR to return, if it hasn't returned at the end of the timeout, we cancel the
     * XHR and fire the failure event.
     *
     * This code only gets added if we're in AIR.
     */
    if (base.isAir){
        widget.implement({
            /**
             * Method: checkRequest
             * Is fired after a delay to check the request to make sure it's not
             * failing in AIR.
             */
            checkRequest: function(){
                if (this.req.xhr.readyState === 1) {
                    //we still haven't gotten the file. Cancel and fire the
                    //failure
                    window.clearTimeout(this.reqTimeout);
                    this.req.cancel();
                    this.contentIsLoaded = true;
                    this.fireEvent('contentLoadFailed', this);
                }
            }
        });
        
       
    }
    
    //put widget in global context if needed
    if (base.global) {
        base.global.Widget = module.exports;
    };

});

/*
---

name: Jx.Selection

description: A class to manage selection across multiple list objects

license: MIT-style license.

requires:
 - Jx.Object

provides: [Jx.Selection]

...
 */
// $Id$
/**
 * Class: Jx.Selection
 *
 * Manage selection of objects.
 *
 * Example:
 * (code)
 * var selection = new Jx.Selection();
 * (end)
 *
 * Events:
 * select - fired when an item is added to the selection.  This event may be
 *    changed by passing the eventToFire option when creating the selection
 *    object.
 * unselect - fired when an item is removed from the selection.  This event
 *    may be changed by passing the eventToFire option when creating the
 *    selection object.
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/selection',function(require, exports, module){

    var base = require('../base'),
        jxObject = require('./object');
        
    var selection = module.exports = new Class({
        
        Extends: jxObject,
        Family: 'Jx.Selection',
        options: {
            /**
             * Option: eventToFire
             * Allows the developer to change the event that is fired in case one
             * object is using multiple selectionManager instances.  The default
             * is to use 'select' and 'unselect'.  To modify the event names,
             * pass different values:
             * (code)
             * new Jx.Selection({
             *   eventToFire: {
             *     select: 'newSelect',
             *     unselect: 'newUnselect'
             *   }
             * });
             * (end)
             */
            eventToFire: {
                select: 'select',
                unselect: 'unselect'
            },
            /**
             * APIProperty: selectClass
             * the CSS class name to add to the wrapper element when it is
             * selected
             */
            selectClass: 'jxSelected',
            /**
             * Option: selectMode
             * {string} default single.  May be single or multiple.  In single
             * mode only one item may be selected.  Selecting a new item will
             * implicitly unselect the currently selected item.
             */
            selectMode: 'single',
            /**
             * Option: selectToggle
             * {Boolean} Default true.  Selection of a selected item will unselect
             * it.
             */
            selectToggle: true,
            /**
             * Option: minimumSelection
             * {Integer} Default 0.  The minimum number of items that must be
             * selected.  If set to a number higher than 0, items added to a list
             * are automatically selected until this minimum is met.  The user may
             * not unselect items if unselecting them will drop the total number
             * of items selected below the minimum.
             */
            minimumSelection: 0
        },
    
        /**
         * Property: selection
         * {Array} an array holding the current selection
         */
        selection: null,
    
        /**
         * Constructor: Jx.Selection
         * create a new instance of Jx.Selection
         *
         * Parameters:
         * options - {Object} options for the new instance
         */
        init: function () {
            this.selection = [];
            this.parent();
        },
    
        cleanup: function() {
          this.selection = null;
          this.parent();
        },
    
        /**
         * APIMethod: defaultSelect
         * select an item if the selection does not yet contain the minimum
         * number of selected items.  Uses <Jx.Selection::select> to select
         * the item, so the same criteria is applied to the item if it is
         * to be selected.
         */
        defaultSelect: function(item) {
            if (this.selection.length < this.options.minimumSelection) {
                this.select(item);
            }
        },
    
        /**
         * APIMethod: select
         * select an item.
         *
         * Parameters:
         * item - {DOMElement} a DOM element or an element ID.
         */
        select: function (item) {
            var options = this.options,
                selection = this.selection;
            item = document.id(item);
            if (options.selectMode === 'multiple') {
                if (selection.contains(item)) {
                    this.unselect(item);
                } else {
                    document.id(item).addClass(options.selectClass);
                    selection.push(item);
                    this.fireEvent(options.eventToFire.select, item);
                }
            } else if (options.selectMode == 'single') {
                if (!this.selection.contains(item)) {
                    document.id(item).addClass(options.selectClass);
                    selection.push(item);
                    if (selection.length > 1) {
                        this.unselect(selection[0]);
                    }
                    this.fireEvent(options.eventToFire.select, item);
                } else {
                    if (options.selectToggle) {
                      this.unselect(item);
                    }
                }
            }
        },
    
        /**
         * APIMethod: unselect
         * remove an item from the selection.  The item must already be in the
         * selection.
         *
         * Parameters:
         * item - {DOMElement} a DOM element or an element ID.
         */
        unselect: function (item) {
            var selection = this.selection,
                options = this.options;
            if (selection.contains(item) &&
                selection.length > options.minimumSelection) {
                document.id(item).removeClass(options.selectClass);
                selection.erase(item);
                this.fireEvent(options.eventToFire.unselect, [item, this]);
            }
        },
    
        /**
         * APIMethod: selected
         * returns the items in the current selection.
         *
         * Returns:
         * {Array} an array of DOM elements in the current selection
         */
        selected: function () {
            return this.selection;
        },
    
        /**
         * APIMethod: isSelected
         * test if an item is in the current selection.
         *
         * Parameters:
         * item - {DOMElement} a DOM element or an element ID.
         *
         * Returns:
         * {Boolean} true if the current selection contains the item, false
         * otherwise
         */
        isSelected: function(item) {
            return this.selection.contains(item);
        }
    });
    
    if (base.global) {
        base.global.Selection = module.exports;
    }

});


/*
---

name: Jx.Widget.List

description: A class that is used to manage lists of DOM elements

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Selection
 - Core/Element.Delegation

provides: [Jx.Widget.List]

...
 */
// $Id$
/**
 * Class: Jx.Widget.List
 *
 * Creates a Widget that has the capability to manage a list of DOM 
 * elements and provide an API and events for managing
 * those items within a container.  Works with Jx.Selection to manage
 * selection of items in the list.  You have two options for managing
 * selections.  The first, and default, option is to specify select: true
 * in the constructor options and any of the <Jx.Selection> options as well.
 * This will create a default Jx.Selection object to manage selections.  The
 * second option is to pass a Jx.Selection object as the third constructor
 * argument.  This allows sharing selection between multiple lists.
 * 
 * This class contains all of the methods in <Jx.Widget> as well as those defined
 * in <Jx.List> (though they are slightly modified.
 *
 * Example:
 * (code)
 * var list = new Jx.Widget.List({
 *   hover: true,
 *   select: true,
 *   onSelect: function(el) {
 *     alert(el.get('html'));
 *   }
 * });
 * list.add(new Element('li', {html:'1'}));
 * list.add(new Element('li', {html:'2'}));
 * list.add(new Element('li', {html:'3'}));
 *
 * (end)
 *
 * Events:
 * add - fired when an item is added
 * remove - fired when an item is removed
 * mouseenter - fired when the user mouses over an element
 * mouseleave - fired when the user mouses out of an element
 * select - fired when an item is selected
 * unselect - fired when an item is selected
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/widget/list', function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget"),
        Selection = require("../selection");
    
    var list = module.exports = new Class({
        
        Extends: Widget,
        Family: 'Jx.Widget.List',
        /**
         * Constructor: Jx.Widget.List
         * create a new instance of Jx.Widget.List
         *
         * Parameters:
         * options - {Object} an object containing optional parameters
         * selection - 
         */
        parameters: ['options'],
        /* does this object own the selection object (and should clean it up) */
        ownsSelection: false,
        /**
         * APIProperty: container
         * the element that will contain items as they are added
         */
        container: null,
        /**
         * APIProperty: selection
         * <Jx.Selection> a selection object if selection is enabled
         */
        selection: null,
        /**
         * APIProperty: holdEvents
         * Tells the event handlers whether they should continue. This allows outside
         * code to stop default handling of events to prevent them from firing
         * additional unwanted events in some circumstances.
         */
        holdEvents: false,
        
        options: {
            /**
             * Option: selection
             * {<Jx.Selection>} null or a Jx.Selection object. If the
             * select option is set to true, then list will use this selection object
             * to track selections or create its own if no selection object is
             * supplied.
             */
            selection: null,
            /**
             * Option: items
             * an array of items to add to the list right away
             */
            items: null,
            /**
             * Option: hover
             * {Boolean} default false.  If set to true, the wrapper element will
             * obtain the defined hoverClass if set and mouseenter/mouseleave
             * events will be emitted when the user hovers over and out of elements
             */
            hover: false,
            /**
             * Option: hoverClass
             * the CSS class name to add to the wrapper element when the mouse is
             * over an item
             */
            hoverClass: 'jxHover',
            /**
             * Option: press
             * {Boolean} default false.  If set to true, the wrapper element will
             * obtain the defined pressClass if set and mousedown/mouseup
             * events will be emitted when the user clicks on elements
             */
            press: false,
            /**
             * Option: pressedClass
             * the CSS class name to add to the wrapper element when the mouse is
             * down on an item
             */
            pressClass: 'jxPressed',
            /**
             * Option: select
             * {Boolean} default false.  If set to true, the wrapper element will
             * obtain the defined selectClass if set and select/unselect events
             * will be emitted when items are selected and unselected.  For other
             * selection objects, see <Jx.Selection>
             */
            select: false,
            /**
             * Option: returnJx
             * {Boolean} Determines whether the select and unselect methods fire with
             * a DOM object or Jx object as it's parameter. If true, then we run $jx()
             * on the selected, or unselected, element to find the first Jx object and
             * fire the event with that class as the parameter. Defaults to false.
             */
            returnJx: false,
            
            trackEvents: {
                mouseenter: {
                    on: true,
                    obj: 'li'
                },
                mouseleave: {
                    on: true,
                    obj: 'li'
                },
                mousedown: {
                    on: true,
                    obj: 'li'
                },
                mouseup: {
                    on: true,
                    obj: 'li'
                },
                keydown: {
                    on: true,
                    obj: 'li'
                },
                keyup: {
                    on: true,
                    obj: 'li'
                },
                click: {
                    on: true,
                    obj: 'li'
                },
                dblclick: {
                    on: true,
                    obj: 'li'
                },
                contextmenu: {
                    on: true,
                    obj: 'li'
                }
            },
            template: '<div class="jxWidget jxListContainer"></div>',
            /**
             * Option: selectionFunction
             * This should be a function that returns a boolean value indicating
             * whether the passed in node is selectable or not.
             */
            selectionFunction: function(el, e){
                var item = document.id(el).retrieve('jxListTargetItem') || el;
                return !item.hasClass('jxUnselectable');
            },
            /**
             * Option: selectionEvents
             * Determines whether we listen for and rethrow events from Jx.Selection
             */
            selectionEvents: {
                select: true,
                unselect: true
            }
        },
        
        classes: {
            domObj: 'jxWidget',
            container: 'jxListContainer'
        },
    
        /**
         * Method: init
         * internal method to initialize this object
         */
        init: function() {
            this.parent();
            
            //this.container = document.id(this.options.container);
            if (this.container) {
                this.container.store('jxList', this);
            }
    
            var target = this,
                options = this.options;
                
            
            //We'll be using Element Event delegation from moo-more so we don't need
            //all of the bound methods attached to every item in the list. This 
            //allows for fewer events attached and items can be dynamically added 
            //and removed without worrying about attaching or removing events.
            this.bound = Object.merge({},this.bound,{
                'mousedown': function(e,el) {
                    if (!target.holdEvents) {
                        el = document.id(base.getWidget(el));
                        if (target.isEnabled(el)) {
                            el.addClass(options.pressClass);
                            target.fireEvent('mousedown', [el, target, e]);
                        }
                    }
                },
                'mouseup': function(e,el) {
                    if (!target.holdEvents) {
                        el = document.id(base.getWidget(el));
                        if (target.isEnabled(el)) {
                            el.removeClass(options.pressClass);
                            target.fireEvent('mouseup', [el, target, e]);
                        }
                    }
                },
                'mouseenter': function(e,el) {
                    if (!target.holdEvents) {
                        //console.log('mouseenter in Widget.List on ',el);
                        el = document.id(base.getWidget(el));
                        if (target.isEnabled(el)) {
                            //remove class from any other item that has it as
                            //entering a nested li won't remove the class from 
                            //a higher level
                            var el2 = target.container.getElement('.' + options.hoverClass);
                            if (el2 !== null && el2 !== undefined) {
                                el2.removeClass(options.hoverClass);
                            }
                            el.addClass(options.hoverClass);
                            target.fireEvent('mouseenter', [el, target, e]);
                        }
                    }
                },
                'mouseleave': function(e,el) {
                    if (!target.holdEvents) {
                        //console.log('mouseleave in Widget.List on ',el);
                        el = document.id(base.getWidget(el));
                        if (target.isEnabled(el)) {
                            //remove hoverClass
                            el.removeClass(options.hoverClass);
                            //and the pressedClass
                            el.removeClass(options.pressClass);
                            target.fireEvent('mouseleave', [el, target, e]);
                        }
                    }
                },
                'keydown': function(e,el) {
                    if (!target.holdEvents) {
                        el = document.id(base.getWidget(el));
                        if (e.key == 'enter' && target.isEnabled(el)) {
                            el.addClass('jxPressed');
                        }
                    }
                },
                'keyup': function(e,el) {
                    if (!target.holdEvents) {
                        el = document.id(base.getWidget(el));
                        if (e.key == 'enter' && target.isEnabled(el)) {
                            el.removeClass('jxPressed');
                        }
                    }
                },
                'click': function (e,el) {
                    if (!target.holdEvents) {
                        el = document.id(base.getWidget(el));
                        console.log('click in Widget.List on ',el);
                        if (target.selection &&
                            target.isEnabled(el) &&
                            target.isSelectable(el, e)) {
                            target.selection.select(el, target);
                        }
                        target.fireEvent('click', [el, target, e]);
                    }
                },
                'dblclick': function (e,el) {
                    if (!target.holdEvents) {
                        el = document.id(base.getWidget(el));
                        if (target.selection &&
                            target.isEnabled(el) &&
                            target.isSelectable(el, e)) {
                            target.selection.select(el, target);
                        }
                        target.fireEvent('dblclick', [el, target, e]);
                    }
                },
                'contextmenu': function(e,el) {
                  if (!target.holdEvents) {
                      el = document.id(base.getWidget(el));
                      var cm = el.retrieve('jxContextMenu');
                      if (cm) {
                        cm.show(e);
                        el.removeClass(options.pressClass);
                        e.stop();  //only stop it if we have our own context menu
                      }
                  }
                },
                select: function(item) {
                    if (!target.holdEvents) {
                        item = document.id(base.getWidget(item));
                        if (this.isEnabled(item)) {
                            var itemTarget;
                            if (this.options.returnJx) {
                                itemTarget = base.getWidget(item);
                            } else {
                                itemTarget = item.retrieve('jxListTargetItem') || item;
                            }
                            this.fireEvent('select', itemTarget);
                        }
                    }
                }.bind(this),
                unselect: function(item) {
                    if (!target.holdEvents) {
                        item = document.id(base.getWidget(item));
                        if (this.isEnabled(item)) {
                            var itemTarget;
                            if (this.options.returnJx) {
                                itemTarget = base.getWidget(item);
                            } else {
                                itemTarget = item.retrieve('jxListTargetItem') || item;
                            }
                            this.fireEvent('unselect', itemTarget);
                        }
                    }
                }.bind(this)
            });
            
            //activate each event on the container
            var trackEvents = this.options.trackEvents;
            if (trackEvents) {
                for (var key in trackEvents) {
                    if (trackEvents[key].on){
                        if (trackEvents[key].obj !== null && trackEvents[key].obj !== undefined) {
                            this.container.addEvent(key + ':relay(' + trackEvents[key].obj + ')',this.bound[key]);
                        } else {
                            this.container.addEvent(key, this.bound[key]);
                        }
                    }
                }
            }
            
            if (options.selection) {
                this.setSelection(options.selection);
                options.select = true;
            } else if (options.select) {
                var opts = Object.merge({},options);
                delete opts.plugins;
                this.selection = new Selection(opts);
                this.ownsSelection = true;
            }
            
            if (this.selection !== undefined && this.selection !== null) {
                var selectionEvents = this.options.selectionEvents;
                for (var key in selectionEvents) {
                    if (selectionEvents[key]) {
                        this.selection.addEvent(key, this.bound[key])
                    }
                }
            }
    
            if (options.items !== undefined && options.items !== null) {
                this.add(options.items);
            }
        },
    
        isEnabled: function(el) {
            var item = el.retrieve('jxListTargetItem') || el;
            return !item.hasClass('jxDisabled');
        },
        
        isSelectable: function(el, e) {
            return this.options.selectionFunction(el, e);
        },
        
        setHoldEvents: function(state){
            this.holdEvents = state;
        },
        
        /**
         * Method: cleanup
         * destroy the list and release anything it references
         */
        cleanup: function() {
            this.container.getChildren().each(function(item){
                this.remove(item);
            }, this);
            if (this.selection && this.ownsSelection) {
                this.selection.removeEvents();
                this.selection.destroy();
            }
            this.setSelection(null);
            this.container.eliminate('jxList');
            var bound = this.bound;
            bound.mousedown=null;
            bound.mouseup=null;
            bound.mouseenter=null;
            bound.mouseleave=null;
            bound.keydown=null;
            bound.keyup=null;
            bound.click=null;
            bound.select=null;
            bound.unselect=null;
            bound.contextmenu=null;
            this.parent();
        },
        
        /**
         * APIMethod: stopListening
         * removes all events from this list so that the list no longer monitors them.
         * This is designed to be used when nesting one list within another so that
         * the first list can manage everything and the subsequent lists don't mess
         * things up.
         */
        stopListening: function(){
            this.container.removeEvents(this.bound);
        },
    
        /**
         * APIMethod: add
         * add an item to the list of items at the specified position
         *
         * Parameters:
         * item - {mixed} the object to add, a DOM element or an
         * object that provides a getElement method.  An array of items may also
         * be provided.  All items are inserted sequentially at the indicated
         * position.
         * position - {mixed} optional, the position to add the element, either
         * an integer position in the list or another item to place this item
         * after
         */
        add: function(item, position) {
            if (typeOf(item) == 'array') {
                item.each(function(what){
                  this.add(what, position);
                }.bind(this) );
                return;
            }
            /* the element being wrapped */
            var el = document.id(item),
                target = el.retrieve('jxListTarget') || el,
                bound = this.bound,
                options = this.options,
                container = this.container;
            if (target) {
                target.store('jxListTargetItem', el);
                
                if (position !== undefined && position !== null) {
                    if (typeOf(position) == 'number') {
                        if (position < container.childNodes.length) {
                            el.inject(container.childNodes[position],'before');
                        } else {
                            el.inject(container, 'bottom');
                        }
                    } else if (['top','bottom','after','before'].contains(position)) {
                        el.inject(container,position);   
                    } else {
                        var tempEl = document.id(position);
                        if (tempEl !== undefined && tempEl !== null &&
                            container.contains(tempEl)) {
                            el.inject(position,'after');
                        }
                    } 
                        
                } else {
                    el.inject(container, 'bottom');
                }
                if (this.options.returnJx) {
                    this.fireEvent('add', base.getWidget(item), this);
                } else {
                    this.fireEvent('add', item, this);
                }
                if (this.selection) {
                    this.selection.defaultSelect(el);
                }
            }
        },
        /**
         * APIMethod: remove
         * remove an item from the list of items
         *
         * Parameters:
         * item - {mixed} the item to remove or the index of the item to remove.
         * An array of items may also be provided.
         *
         * Returns:
         * {mixed} the item that was removed or null if the item is not a member
         * of this list.
         */
        remove: function(item) {
            var el = document.id(item),
                target;
            if (el && this.container.contains(el)) {
                this.unselect(el, true);
                el.dispose();
                target = el.retrieve('jxListTarget') || el;
                if (this.options.returnJx) {
                    this.fireEvent('remove', base.getWidget(item), this);
                } else {
                    this.fireEvent('remove', item, this);
                }
                return item;
            }
            return null;
        },
        /**
         * APIMethod: replace
         * replace one item with another
         *
         * Parameters:
         * item - {mixed} the item to replace or the index of the item to replace
         * withItem - {mixed} the object, DOM element, Jx.Object or an object
         * implementing getElement to add
         *
         * Returns:
         * {mixed} the item that was removed
         */
        replace: function(item, withItem) {
            if (this.container.contains(document.id(item))) {
                this.add(withItem, item);
                this.remove(item);
            }
        },
        /**
         * APIMethod: indexOf
         * find the index of an item in the list
         *
         * Parameters:
         * item - {mixed} the object, DOM element, Jx.Object or an object
         * implementing getElement to find the index of
         *
         * Returns:
         * {integer} the position of the item or -1 if not found
         */
        indexOf: function(item) {
            return Array.from(this.container.childNodes).indexOf(item);
        },
        /**
         * APIMethod: count
         * returns the number of items in the list
         */
        count: function() {
            return this.container.childNodes.length;
        },
        /**
         * APIMethod: items
         * returns an array of the items in the list
         */
        items: function() {
            var items = Array.from(this.container.childNodes);
            if (this.options.returnJx) {
                items = items.map(function(item) {
                    return base.getWidget(item);
                });
            }
            return items;
        },
        /**
         * APIMethod: each
         * applies the supplied function to each item
         *
         * Parameters:
         * func - {function} the function to apply, it will receive the item and
         * index of the item as parameters
         * context - {object} the context to execute the function in, null by
         * default.
         */
        each: function(f, context) {
            Array.from(this.container.childNodes).each(f, context);
        },
        /**
         * APIMethod: select
         * select an item
         *
         * Parameters:
         * item - {mixed} the object to select, a DOM element, a Jx.Object, or an
         * object that provides a getElement method.  An array of items may also be
         * provided.
         */
        select: function(item) {
            if (this.selection) {
                this.selection.select(item);
            }
        },
        /**
         * APIMethod: unselect
         * unselect an item or items
         *
         * Parameters:
         * item - {mixed} the object to select, a DOM element, a Jx.Object, or an
         * object that provides a getElement method.  An array of elements may also
         * be provided.
         * force - {Boolean} force deselection even if this violates the minimum
         * selection constraint (used internally when removing items)
         */
        unselect: function(item, force) {
            if (this.selection) {
                this.selection.unselect(item);
            }
        },
        /**
         * APIMethod: selected
         * returns the selected item or items
         *
         * Returns:
         * {mixed} the selected item or an array of selected items
         */
        selected: function() {
            return this.selection ? this.selection.selected : [];
        },
        /**
         * APIMethod: empty
         * clears all of the items from the list
         */
        empty: function(){
            this.container.getChildren().each(function(item){
                this.remove(item);
            }, this);
        },
        /**
         * APIMethod: setSelection
         * sets the <Jx.Selection> object that this list will use for selection
         * events.
         *
         * Parameters:
         * {<Jx.Selection>} the selection object, or null to remove it.
         */
        setSelection: function(selection) {
            var sel = this.selection;
            if (sel == selection) return;
    
            if (sel) {
                sel.removeEvents(this.bound);
                if (this.ownsSelection) {
                    sel.destroy();
                    this.ownsSelection = false;
                }
            }
    
            this.selection = selection;
            if (selection) {
                selection.addEvents({
                    select: this.bound.select,
                    unselect: this.bound.unselect
                });
            }
        }
    
    });
    
    if (base.global) {
        base.global.Widget.List = list;
    }
    
});

/*
---

name: Jx.Tree

description: Jx.Tree displays hierarchical data in a tree structure of folders and nodes.

license: MIT-style license.

requires:
 - Jx.Widget.List

provides: [Jx.Tree]

css:
 - tree

images:
 - tree.png
 - tree_vert_line.png
...
 */
// $Id$
/**
 * Class: Jx.Tree
 *
 * Jx.Tree displays hierarchical data in a tree structure of folders and nodes.
 *
 * Example:
 * (code)
 * (end)
 *
 * Extends: <Jx.Widget>
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tree", function(require, exports, module){
    
    var base = require("../base"),
        WidgetList = require("./widget/list"),
        Item = null,
        Folder = null;
        
    var tree = module.exports = new Class({
    
        Extends: WidgetList,
        Family: 'Jx.Tree',
        parameters: ['options'],
        pluginNamespace: 'Tree',
        /**
         * APIProperty: selection
         * {<Jx.Selection>} the selection object for this tree.
         */
        selection: null,
        /**
         * Property: ownsSelection
         * {Boolean} indicates if this object created the <Jx.Selection> object
         * or not.  If true then the selection object will be destroyed when the
         * tree is destroyed, otherwise the selection object will not be
         * destroyed.
         */
        ownsSelection: false,
        /**
         * Property: list
         * {<Jx.List>} the list object is used to manage the DOM elements of the
         * items added to the tree.
         */
        list: null,
        dirty: true,
        /**
         * APIProperty: domObj
         * {HTMLElement} the DOM element that contains the visual representation
         * of the tree.
         */
        domObj: null,
        options: {
            /**
             * Option: select
             * {Boolean} are items in the tree selectable?  See <Jx.Selection>
             * for other options relating to selections that can be set here.
             */
            select: true,
            /**
             * Option: template
             * the default HTML template for a tree can be overridden
             */
            template: '<ul class="jxTreeRoot jxListContainer"></ul>',
            
            trackEvents: {
                mouseenter: {
                    on: true,
                    obj: 'li > a'
                },
                mouseleave: {
                    on: true,
                    obj: 'li > a'
                },
                click: {
                    on: true,
                    obj: 'li > a, li > img'
                }
            }
        },
        /**
         * APIProperty: classes
         * {Object} anobject of property to CSS class names for extracting references
         * to DOM elements from the supplied templates.  Requires
         * domObj element, anything else is optional.
         */
        classes: {domObj: 'jxTreeRoot'},
        
        frozen: false,
        
        init: function(){
            Item = require("./tree/item");
            Folder = require("./tree/folder");
            this.parent();
        },
        
        /**
         * APIMethod: render
         * Render the Jx.Tree.
         */
        render: function() {
            this.parent();
    
            this.options.returnJx = true;
            
            this.bound.toggle = this.toggle.bind(this);
    
            this.addEvents({
                click: this.bound.toggle,
                dblclick: this.bound.toggle
            });
        },
        /**
         * APIMethod: freeze
         * stop the tree from processing updates every time something is added or
         * removed.  Used for bulk changes, call thaw() when done updating.  Note
         * the tree will still display the changes but it will delay potentially
         * expensive recursion across the entire tree on every change just to
         * update visual styles.
         */
        freeze: function() { this.frozen = true; },
        /**
         * APIMethod: thaw
         * unfreeze the tree and recursively update styles
         */
        thaw: function() { this.frozen = false; this.update(true); },
        
        setDirty: function(state) {
          this.dirty = state;
        },
    
        /**
         * APIMethod: add
         * add one or more items to the tree at a particular position in the tree
         *
         * Parameters:
         * item - {<Jx.Tree.Item>} or an array of items to be added
         * position - {mixed} optional location to add the items.  By default,
         * this is 'bottom' meaning the items are added at the end of the list.
         * See <Jx.Widget.List::add> for options
         *
         * Returns:
         * {<Jx.Tree>} a reference to this object for chaining calls
         */
        add: function(item, position) {
            if (typeOf(item) == 'array') {
                item.each(function(what){ this.add(what, position); }.bind(this) );
                return;
            }
            if (instanceOf(item, Folder)) {
                item.addEvents({
                    add: function(what) { 
                        this.fireEvent('add', what); 
                    }.bind(this),
                    remove: function(what) { 
                        this.fireEvent('remove', what); 
                    }.bind(this)
                    /*
                    click: function(what) { 
                        this.fireEvent('click', what); 
                    }.bind(this)
                    */
                });
                item.setSelection(this.selection);
                item.stopListening();
            }
            
            item.owner = this;
            this.parent(item,position);
            this.setDirty(true);
            this.update(true);
            this.fireEvent('add',item);
            return this;
        },
        /**
         * APIMethod: remove
         * remove an item from the tree
         *
         * Parameters:
         * item - {<Jx.Tree.Item>} the tree item to remove
         *
         * Returns:
         * {<Jx.Tree>} a reference to this object for chaining calls
         */
        remove: function(item) {
            if (instanceOf(item, Folder)) {
                item.removeEvents('add');
                item.removeEvents('remove');
                item.removeEvents('disclose');
                item.setSelection(null);
            }
            item.owner = null;
            this.parent(item);
            this.setDirty(true);
            this.update(true);
            return this;
        },
        /**
         * APIMethod: replace
         * replaces one item with another
         *
         * Parameters:
         * item - {<Jx.Tree.Item>} the tree item to remove
         * withItem - {<Jx.Tree.Item>} the tree item to insert
         *
         * Returns:
         * {<Jx.Tree>} a reference to this object for chaining calls
         */
        replace: function(item, withItem) {
            if (instanceOf(item, Folder)) {
                item.setSelection(null);
            }
            if (instanceOf(withItem, Folder)) {
                withItem.setSelection(this.selection);
            }
            item.owner = null;
            withItem.owner = this;
            this.parent(item, withItem);
            this.setDirty(true);
            this.update(true);
            return this;
        },
    
        /**
         * Method: cleanup
         * Clean up a Jx.Tree instance
         */
        cleanup: function() {
            // stop updates when removing existing items.
            this.freeze();
            this.parent();
        },
        
        /**
         * Method: update
         * Update the CSS of the Tree's DOM element in case it has changed
         * position
         *
         * Parameters:
         * shouldDescend - {Boolean} propagate changes to child nodes
         */
        update: function(shouldDescend) {
            // since the memory leak cleanup, it seems that update gets called
            // from the bound onRemove event after the list has been cleaned
            // up.  I suspect that there is a delayed function call for IE in
            // event handling (or some such thing) PS
            if (this.frozen) return;
            
            var last = this.count() - 1;
            this.items().each(function(item, idx){
                var lastItem = idx == last,
                    jx = $jx(item);
                if (instanceOf(jx, Folder)) {
                    jx.update(shouldDescend, lastItem);
                } else if (instanceOf(jx, Item)) {
                    jx.update(lastItem);
                }
            });
            this.setDirty(false);
        },
    
        /**
         * APIMethod: empty
         * recursively empty this tree and any folders in it
         */
        empty: function() {
            this.items().each(function(item){
              if (instanceOf(item, Folder)) {
                item.empty();
              } 
              this.remove(item);
              item.destroy();
            }, this);
            this.setDirty(true);
        },
    
        /**
         * APIMethod: findChild
         * Get a reference to a child node by recursively searching the tree
         *
         * Parameters:
         * path - {Array} an array of labels of nodes to search for
         *
         * Returns:
         * {Object} the node or null if the path was not found
         */
        findChild : function(path) {
            //path is empty - we are asking for this node
            if (path.length === 0) {
                return false;
            }
            //path has more than one thing in it, find a folder and descend into it
            var name = path[0];
            var result = false;
            this.items().some(function(item) {
                var treeItem = base.getWidget(item);
                if (treeItem && treeItem.getLabel() == name) {
                    if (path.length > 0) {
                        var folder = base.getWidget(item);
                        if (folder && instanceOf(folder, Folder) && path.length > 1) {
                            result = folder.findChild(path.slice(1, path.length));
                        } else {
                          result = treeItem;
                        }
                    } else {
                        result = treeItem;
                    }
                }
                return result;
            });
            return result;
        },
        
         /**
         * APIMethod: toggle
         * Checks if we have a folder and toggles its state between open and closed
         *
         * Returns:
         * {<Jx.Tree>} a reference to this for chaining
         */
        toggle: function(el, obj) {
            console.log('in toggle method');
            if (!this.holdEvents) {
                var jx = base.getWidget(el);
                if (instanceOf(jx, Folder) && jx.isEnabled(el)) {
                    if (jx.isOpen()) {
                        jx.collapse();
                    } else {
                        jx.expand();
                    }
                }
            }
            return this;
        },
        
        /**
         * APIMethod: setSelection
         * sets the <Jx.Selection> object to be used by this tree.  Used primarily
         * by <Jx.TreeFolder> to propogate a single selection object throughout a
         * tree.
         *
         * Parameters:
         * selection - {<Jx.Selection>} the new selection object to use
         *
         * Returns:
         * {<Jx.Tree>} a reference to this object for chaining
         */
        setSelection: function(selection) {
            if (this.selection && this.ownsSelection) {
                this.selection.removeEvents(this.bound);
                this.selection.destroy();
                this.ownsSelection = false;
            }
            this.selection = selection;
            this.parent(selection);
            this.each(function(item) {
                var jx = base.getWidget(item);
                if (instanceOf(jx, Folder)) {
                    jx.setSelection(selection);
                }
            });
            return this;
        }
    });
    
    if (base.global) {
        base.global.Tree = module.exports;
    }
    
});



/*
---

name: Jx.Button

description: Jx.Button creates a clickable element that can be added to a web page.

license: MIT-style license.

requires:
 - Jx.Widget

optional:
 - Core/Drag

provides: [Jx.Button]

css:
 - button

images:
 - button.png

...
 */
// $Id$
/**
 * Class: Jx.Button
 *
 * Extends: <Jx.Widget>
 *
 * Jx.Button creates a clickable element that can be added to a web page.
 * When the button is clicked, it fires a 'click' event.
 *
 * When you construct a new instance of Jx.Button, the button does not
 * automatically get inserted into the web page.  Typically a button
 * is used as part of building another capability such as a Jx.Toolbar.
 * However, if you want to manually insert the button into your application,
 * you may use the <Jx.Button::addTo> method to append or insert the button into the
 * page.
 *
 * There are two modes for a button, normal and toggle.  A toggle button
 * has an active state analogous to a checkbox.  A toggle button generates
 * different events (down and up) from a normal button (click).  To create
 * a toggle button, pass toggle: true to the Jx.Button constructor.
 *
 * To use a Jx.Button in an application, you should to register for the
 * 'click' event.  You can pass a function in the 'onClick' option when
 * constructing a button or you can call the addEvent('click', myFunction)
 * method.  The addEvent method can be called several times, allowing more
 * than one function to be called when a button is clicked.  You can use the
 * removeEvent('click', myFunction) method to stop receiving click events.
 *
 * Example:
 *
 * (code)
 * var button = new Jx.Button(options);
 * button.addTo('myListItem'); // the id of an LI in the page.
 * (end)
 *
 * (code)
 * Example:
 * var options = {
 *     imgPath: 'images/mybutton.png',
 *     tooltip: 'click me!',
 *     label: 'click me',
 *     onClick: function() {
 *         alert('you clicked me');
 *     }
 * };
 * var button = new Jx.Button(options);
 * button.addEvent('click', anotherFunction);
 *
 * function anotherFunction() {
 *   alert('a second alert for a single click');
 * }
 * (end)
 *
 * Events:
 * click - the button was pressed and released (only if type is not 'toggle').
 * down - the button is down (only if type is 'toggle')
 * up - the button is up (only if the type is 'toggle').
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */

define('jx/button', function(require, exports, module){

    var base = require("../base"),
        Widget = require("./widget");
    
    var button = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Button',
    
        options: {
            /* Option: image
             * optional.  A string value that is the url to load the image to
             * display in this button.  The default styles size this image to 16 x
             * 16.  If not provided, then the button will have no icon.
             */
            image: '',
            /* Option: tooltip
             * optional.  A string value to use as the alt/title attribute of the
             * <A> tag that wraps the button, resulting in a tooltip that appears
             * when the user hovers the mouse over a button in most browsers.  If
             * not provided, the button will have no tooltip.
             */
            tooltip: '',
            /* Option: label
             * optional, default is no label.  A string value that is used as a
             * label on the button. - use an object for localization: { set: 'Examples', key: 'lanKey', value: 'langValue' }
             * see widget.js for details
             */
            label: '',
            /* Option: toggle
             * default true, whether the button is a toggle button or not.
             */
            toggle: false,
            /* Option: toggleClass
             * A class to apply to the button if it is a toggle button,
             * 'jxButtonToggle' by default.
             */
            toggleClass: 'jxButtonToggle',
            /* Option: pressedClass
             * A class to apply to the button when it is pressed,
             * 'jxButtonPressed' by default.
             */
            pressedClass: 'jxButtonPressed',
            /* Option: activeClass
             * A class to apply to the buttonwhen it is active,
             * 'jxButtonActive' by default.
             */
            activeClass: 'jxButtonActive',
    
            /* Option: active
             * optional, default false.  Controls the initial state of toggle
             * buttons.
             */
            active: false,
            /* Option: enabled
             * whether the button is enabled or not.
             */
            enabled: true,
            /* Option: href
             * set an href on the button's action object, typically an <a> tag.
             * Default is javascript:void(0) and use onClick.
             */
            href: 'javascript:void(0);',
            /* Option: target
             * for buttons that have an href, allow setting the target
             */
            target: '',
            /* Option: template
             * the HTML structure of the button.  As a minimum, there must be a
             * containing element with a class of jxButtonContainer and an
             * internal element with a class of jxButton.  jxButtonIcon and
             * jxButtonLabel are used if present to put the image and label into
             * the button.
             */
            template: '<span class="jxButtonContainer"><a class="jxButton"><span class="jxButtonContent"><img class="jxButtonIcon" src="'+base.aPixel.src+'"><span class="jxButtonLabel"></span></span></a></span>'
        },
    
        /**
         * Property: classes
         * used to auto-populate this object with element references when
         * processing templates
         */
        classes: {
            domObj: 'jxButtonContainer',
            domA: 'jxButton',
            domImg: 'jxButtonIcon',
            domLabel: 'jxButtonLabel'
        },
    
        /**
         * Method: render
         * create a new button.
         */
        render: function() {
            this.parent();
            var options = this.options,
                hasFocus,
                mouseDown;
            /* is the button toggle-able? */
            if (options.toggle) {
                this.domObj.addClass(options.toggleClass);
            }
    
            // the clickable part of the button
            if (this.domA) {
                this.domA.set({
                    target: options.target,
                    href: options.href,
                    title: this.getText(options.tooltip),
                    alt: this.getText(options.tooltip)
                });
                this.domA.addEvents({
                    click: this.clicked.bind(this),
                    drag: (function(e) {e.stop();}).bind(this),
                    mousedown: (function(e) {
                        this.domA.addClass(options.pressedClass);
                        hasFocus = true;
                        mouseDown = true;
                        this.focus();
                    }).bind(this),
                    mouseup: (function(e) {
                        this.domA.removeClass(options.pressedClass);
                        mouseDown = false;
                    }).bind(this),
                    mouseleave: (function(e) {
                        this.domA.removeClass(options.pressedClass);
                    }).bind(this),
                    mouseenter: (function(e) {
                        if (hasFocus && mouseDown) {
                            this.domA.addClass(options.pressedClass);
                        }
                    }).bind(this),
                    keydown: (function(e) {
                        if (e.key == 'enter') {
                            this.domA.addClass(options.pressedClass);
                        }
                    }).bind(this),
                    keyup: (function(e) {
                        if (e.key == 'enter') {
                            this.domA.removeClass(options.pressedClass);
                        }
                    }).bind(this),
                    blur: function() { hasFocus = false; }
                });
    
                if (typeof Drag != 'undefined') {
                    new Drag(this.domA, {
                        onStart: function() {this.stop();}
                    });
                }
            }
    
            if (this.domImg) {
                if (options.image || !options.label) {
                    this.domImg.set({
                        title: this.getText(options.tooltip),
                        alt: this.getText(options.tooltip)
                    });
                    if (options.image && options.image.indexOf(base.aPixel.src) == -1) {
                        this.domImg.setStyle('backgroundImage',"url("+options.image+")");
                    }
                    if (options.imageClass) {
                        this.domImg.addClass(options.imageClass);
                    }
                } else {
                    //remove the image if we don't need it
                    this.domImg.setStyle('display','none');
                }
            }
    
            if (this.domLabel) {
                if (options.label || this.domA.hasClass('jxDiscloser')) {
                    this.setLabel(options.label);
                } else {
                    //this.domLabel.removeClass('jx'+this.type+'Label');
                    this.domLabel.setStyle('display','none');
                }
            }
    
            if (options.id) {
                this.domObj.set('id', options.id);
            }
    
            //update the enabled state
            this.setEnabled(options.enabled);
    
            //update the active state if necessary
            if (options.active) {
                options.active = false;
                this.setActive(true);
            }
        },
        /**
         * APIMethod: clicked
         * triggered when the user clicks the button, processes the
         * actionPerformed event
         *
         * Parameters:
         * evt - {Event} the user click event
         */
        clicked : function(evt) {
            var options = this.options;
            if (options.enabled && !this.isBusy()) {
                if (options.toggle) {
                    this.setActive(!options.active);
                } else {
                    this.fireEvent('click', {obj: this, event: evt});
                }
            }
            //return false;
        },
        /**
         * APIMethod: isEnabled
         * This returns true if the button is enabled, false otherwise
         *
         * Returns:
         * {Boolean} whether the button is enabled or not
         */
        isEnabled: function() {
            return this.options.enabled;
        },
    
        /**
         * APIMethod: setEnabled
         * enable or disable the button.
         *
         * Parameters:
         * enabled - {Boolean} the new enabled state of the button
         */
        setEnabled: function(enabled) {
            this.options.enabled = enabled;
            if (enabled) {
                this.domObj.removeClass('jxDisabled');
            } else {
                this.domObj.addClass('jxDisabled');
            }
        },
        /**
         * APIMethod: isActive
         * For toggle buttons, this returns true if the toggle button is
         * currently active and false otherwise.
         *
         * Returns:
         * {Boolean} the active state of a toggle button
         */
        isActive: function() {
            return this.options.active;
        },
        /**
         * APIMethod: setActive
         * Set the active state of the button
         *
         * Parameters:
         * active - {Boolean} the new active state of the button
         */
        setActive: function(active) {
            var options = this.options;
            if (options.enabled && !this.isBusy()) {
              if (options.active == active) {
                  return;
              }
              options.active = active;
              if (this.domA) {
                  if (options.active) {
                      this.domA.addClass(options.activeClass);
                  } else {
                      this.domA.removeClass(options.activeClass);
                  }
              }
              this.fireEvent(active ? 'down':'up', this);
            }
        },
        /**
         * APIMethod: setImage
         * set the image of this button to a new image URL
         *
         * Parameters:
         * path - {String} the new url to use as the image for this button
         */
        setImage: function(path) {
            this.options.image = path;
            if (this.domImg) {
                this.domImg.setStyle('backgroundImage',
                                     "url("+path+")");
                this.domImg.setStyle('display', path ? null : 'none');
            }
        },
        /**
         * APIMethod: setLabel
         * sets the text of the button.
         *
         * Parameters:
         * label - {String} the new label for the button
         */
        setLabel: function(label) {
            this.options.label = label;
            if (this.domLabel) {
                this.domLabel.set('html', this.getText(label));
                this.domLabel.setStyle('display', label || this.domA.hasClass('jxDiscloser') ? null : 'none');
            }
        },
        /**
         * APIMethod: getLabel
         * returns the text of the button.
         */
        getLabel: function() {
            return this.options.label;
        },
        /**
         * APIMethod: setTooltip
         * sets the tooltip displayed by the button
         *
         * Parameters:
         * tooltip - {String} the new tooltip
         */
        setTooltip: function(tooltip) {
            if (this.domA) {
                this.domA.set({
                    'title':this.getText(tooltip),
                    'alt':this.getText(tooltip)
                });
            }
            //need to account for the tooltip on the image as well
            if (this.domImg) {
                //check if title and alt are set...
                var t = this.domImg.get('title');
                if (t !== undefined && t !== null) {
                    //change it...
                    this.domImg.set({
                        'title':this.getText(tooltip),
                        'alt':this.getText(tooltip)
                    });
                }
            }
        },
        /**
         * APIMethod: focus
         * capture the keyboard focus on this button
         */
        focus: function() {
            if (this.domA) {
                this.domA.focus();
            }
        },
        /**
         * APIMethod: blur
         * remove the keyboard focus from this button
         */
        blur: function() {
            if (this.domA) {
                this.domA.blur();
            }
        },
    
        /**
         * APIMethod: changeText
         *
         * updates the label of the button on langChange Event for
         * Internationalization
         */
        changeText : function(lang) {
            this.parent();
            this.setLabel(this.options.label);
            this.setTooltip(this.options.tooltip);
        }
    });
    
    if (base.global) {
        base.global.Button = button;
    }

});


/*
---

name: Jx.Layout

description: Jx.Layout is used to provide more flexible layout options for applications

license: MIT-style license.

requires:
 - Jx.Object


provides: [Jx.Layout]

css:
 - layout

...
 */
// $Id$
/**
 * Class: Jx.Layout
 *
 * Extends: <Jx.Object>
 *
 * Jx.Layout is used to provide more flexible layout options for applications
 *
 * Jx.Layout wraps an existing DOM element (typically a div) and provides
 * extra functionality for sizing that element within its parent and sizing
 * elements contained within it that have a 'resize' function attached to them.
 *
 * To create a Jx.Layout, pass the element or id plus an options object to
 * the constructor.
 *
 * Example:
 * (code)
 * var myContainer = new Jx.Layout('myDiv', options);
 * (end)
 *
 * Events:
 * sizeChange - fired when the size of the container changes
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/layout", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
        
    var layout = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.Layout',
    
        options: {
            /* Option: resizeWithWindow
             * boolean, automatically resize this layout when the window size
             * changes, even if the element is not a direct descendant of the
             * BODY.  False by default.
             */
            resizeWithWindow: false,
            /* Option: propagate
             * boolean, controls propogation of resize to child nodes.
             * True by default. If set to false, changes in size will not be
             * propogated to child nodes.
             */
            propagate: true,
            /* Option: position
             * how to position the element, either 'absolute' or 'relative'.
             * The default (if not passed) is 'absolute'.  When using
             * 'absolute' positioning, both the width and height are
             * controlled by Jx.Layout.  If 'relative' positioning is used
             * then only the width is controlled, allowing the height to
             * be controlled by its content.
             */
            position: 'absolute',
            /* Option: left
             * the distance (in pixels) to maintain the left edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the left edge can be any distance from its parent
             * based on other parameters.
             */
            left: 0,
            /* Option: right
             * the distance (in pixels) to maintain the right edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the right edge can be any distance from its parent
             * based on other parameters.
             */
            right: 0,
            /* Option: top
             * the distance (in pixels) to maintain the top edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the top edge can be any distance from its parent
             * based on other parameters.
             */
            top: 0,
            /* Option: bottom
             * the distance (in pixels) to maintain the bottom edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the bottom edge can be any distance from its parent
             * based on other parameters.
             */
            bottom: 0,
            /* Option: width
             * the width (in pixels) of the element.  The default value is null.
             * If this is set to 'null', then the width can be any value based on
             * other parameters.
             */
            width: null,
            /* Option: height
             * the height (in pixels) of the element.  The default value is null.
             * If this is set to 'null', then the height can be any value based on
             * other parameters.
             */
            height: null,
            /* Option: minWidth
             * the minimum width that the element can be sized to.  The default
             * value is 0.
             */
            minWidth: 0,
            /* Option: minHeight
             * the minimum height that the element can be sized to.  The
             * default value is 0.
             */
            minHeight: 0,
            /* Option: maxWidth
             * the maximum width that the element can be sized to.  The default
             * value is -1, which means no maximum.
             */
            maxWidth: -1,
            /* Option: maxHeight
             * the maximum height that the element can be sized to.  The
             * default value is -1, which means no maximum.
             */
            maxHeight: -1
        },
    
        /**
         * Parameters:
         * domObj - {HTMLElement} element or id to apply the layout to
         * options - <Jx.Layout.Options>
         */
        parameters: ['domObj','options'],
    
        /**
         * APIMethod: init
         * Create a new instance of Jx.Layout.
         */
        init: function() {
            this.domObj = document.id(this.options.domObj);
            this.domObj.resize = this.resize.bind(this);
            this.domObj.setStyle('position', this.options.position);
            this.domObj.store('jxLayout', this);
    
            if (this.options.resizeWithWindow || document.body == this.domObj.parentNode) {
                window.addEvent('resize', this.windowResize.bind(this));
                window.addEvent('load', this.windowResize.bind(this));
            }
            //this.resize();
        },
    
        /**
         * Method: windowResize
         * when the window is resized, any Jx.Layout controlled elements that are
         * direct children of the BODY element are resized
         */
         windowResize: function() {
             this.resize();
             if (this.resizeTimer) {
                 window.clearTimeout(this.resizeTimer);
                 this.resizeTimer = null;
             }
             this.resizeTimer = this.resize.delay(50, this);
        },
    
        /**
         * Method: resize
         * resize the element controlled by this Jx.Layout object.
         *
         * Parameters:
         * options - new options to apply, see <Jx.Layout.Options>
         */
        resize: function(options) {
             /* this looks like a really big function but actually not
              * much code gets executed in the two big if statements
              */
            this.resizeTimer = null;
            var needsResize = false;
            if (options) {
                for (var i in options) {
                    //prevent forceResize: false from causing a resize
                    if (i == 'forceResize') {
                        continue;
                    }
                    if (this.options[i] != options[i]) {
                        needsResize = true;
                        this.options[i] = options[i];
                    }
                }
                if (options.forceResize) {
                    needsResize = true;
                }
            }
            if (!document.id(this.domObj.parentNode)) {
                return;
            }
    
            var parentSize;
            if (this.domObj.parentNode.tagName == 'BODY') {
                parentSize = base.getPageDimensions();
            } else {
                parentSize = document.id(this.domObj.parentNode).getContentBoxSize();
            }
    
            if (this.lastParentSize && !needsResize) {
                needsResize = (this.lastParentSize.width != parentSize.width ||
                              this.lastParentSize.height != parentSize.height);
            } else {
                needsResize = true;
            }
            this.lastParentSize = parentSize;
    
            if (!needsResize) {
                return;
            }
    
            var l, t, w, h;
    
            /* calculate left and width */
            if (this.options.left != null) {
                /* fixed left */
                l = this.options.left;
                if (this.options.right == null) {
                    /* variable right */
                    if (this.options.width == null) {
                        /* variable right and width
                         * set right to min, stretch width */
                        w = parentSize.width - l;
                        if (w < this.options.minWidth ) {
                            w = this.options.minWidth;
                        }
                        if (this.options.maxWidth >= 0 && w > this.options.maxWidth) {
                            w = this.options.maxWidth;
                        }
                    } else {
                        /* variable right, fixed width
                         * use width
                         */
                        w = this.options.width;
                    }
                } else {
                    /* fixed right */
                    if (this.options.width == null) {
                        /* fixed right, variable width
                         * stretch width
                         */
                        w = parentSize.width - l - this.options.right;
                        if (w < this.options.minWidth) {
                            w = this.options.minWidth;
                        }
                        if (this.options.maxWidth >= 0 && w > this.options.maxWidth) {
                            w = this.options.maxWidth;
                        }
                    } else {
                        /* fixed right, fixed width
                         * respect left and width, allow right to stretch
                         */
                        w = this.options.width;
                    }
                }
    
            } else {
                if (this.options.right == null) {
                    if (this.options.width == null) {
                        /* variable left, width and right
                         * set left, right to min, stretch width
                         */
                         l = 0;
                         w = parentSize.width;
                         if (this.options.maxWidth >= 0 && w > this.options.maxWidth) {
                             l = l + parseInt(w - this.options.maxWidth,10)/2;
                             w = this.options.maxWidth;
                         }
                    } else {
                        /* variable left, fixed width, variable right
                         * distribute space between left and right
                         */
                        w = this.options.width;
                        l = parseInt((parentSize.width - w)/2,10);
                        if (l < 0) {
                            l = 0;
                        }
                    }
                } else {
                    if (this.options.width != null) {
                        /* variable left, fixed width, fixed right
                         * left is calculated directly
                         */
                        w = this.options.width;
                        l = parentSize.width - w - this.options.right;
                        if (l < 0) {
                            l = 0;
                        }
                    } else {
                        /* variable left and width, fixed right
                         * set left to min value and stretch width
                         */
                        l = 0;
                        w = parentSize.width - this.options.right;
                        if (w < this.options.minWidth) {
                            w = this.options.minWidth;
                        }
                        if (this.options.maxWidth >= 0 && w > this.options.maxWidth) {
                            l = w - this.options.maxWidth - this.options.right;
                            w = this.options.maxWidth;
                        }
                    }
                }
            }
    
            /* calculate the top and height */
            if (this.options.top != null) {
                /* fixed top */
                t = this.options.top;
                if (this.options.bottom == null) {
                    /* variable bottom */
                    if (this.options.height == null) {
                        /* variable bottom and height
                         * set bottom to min, stretch height */
                        h = parentSize.height - t;
                        if (h < this.options.minHeight) {
                            h = this.options.minHeight;
                        }
                        if (this.options.maxHeight >= 0 && h > this.options.maxHeight) {
                            h = this.options.maxHeight;
                        }
                    } else {
                        /* variable bottom, fixed height
                         * stretch height
                         */
                        h = this.options.height;
                        if (this.options.maxHeight >= 0 && h > this.options.maxHeight) {
                            t = h - this.options.maxHeight;
                            h = this.options.maxHeight;
                        }
                    }
                } else {
                    /* fixed bottom */
                    if (this.options.height == null) {
                        /* fixed bottom, variable height
                         * stretch height
                         */
                        h = parentSize.height - t - this.options.bottom;
                        if (h < this.options.minHeight) {
                            h = this.options.minHeight;
                        }
                        if (this.options.maxHeight >= 0 && h > this.options.maxHeight) {
                            h = this.options.maxHeight;
                        }
                    } else {
                        /* fixed bottom, fixed height
                         * respect top and height, allow bottom to stretch
                         */
                        h = this.options.height;
                    }
                }
            } else {
                if (this.options.bottom == null) {
                    if (this.options.height == null) {
                        /* variable top, height and bottom
                         * set top, bottom to min, stretch height
                         */
                         t = 0;
                         h = parentSize.height;
                         if (h < this.options.minHeight) {
                             h = this.options.minHeight;
                         }
                         if (this.options.maxHeight >= 0 && h > this.options.maxHeight) {
                             t = parseInt((parentSize.height - this.options.maxHeight)/2,10);
                             h = this.options.maxHeight;
                         }
                    } else {
                        /* variable top, fixed height, variable bottom
                         * distribute space between top and bottom
                         */
                        h = this.options.height;
                        t = parseInt((parentSize.height - h)/2,10);
                        if (t < 0) {
                            t = 0;
                        }
                    }
                } else {
                    if (this.options.height != null) {
                        /* variable top, fixed height, fixed bottom
                         * top is calculated directly
                         */
                        h = this.options.height;
                        t = parentSize.height - h - this.options.bottom;
                        if (t < 0) {
                            t = 0;
                        }
                    } else {
                        /* variable top and height, fixed bottom
                         * set top to min value and stretch height
                         */
                        t = 0;
                        h = parentSize.height - this.options.bottom;
                        if (h < this.options.minHeight) {
                            h = this.options.minHeight;
                        }
                        if (this.options.maxHeight >= 0 && h > this.options.maxHeight) {
                            t = parentSize.height - this.options.maxHeight - this.options.bottom;
                            h = this.options.maxHeight;
                        }
                    }
                }
            }
    
            //TODO: check left, top, width, height against current styles
            // and only apply changes if they are not the same.
    
            /* apply the new sizes */
            var sizeOpts = {width: w};
            if (this.options.position == 'absolute') {
                var m = document.id(this.domObj.parentNode).measure(function(){
                    return this.getSizes(['padding'],['left','top']).padding;
                });
                this.domObj.setStyles({
                    position: this.options.position,
                    left: l+m.left,
                    top: t+m.top
                });
                sizeOpts.height = h;
            } else {
                if (this.options.height) {
                    sizeOpts.height = this.options.height;
                }
            }
            this.domObj.setBorderBoxSize(sizeOpts);
    
            if (this.options.propagate) {
                // propogate changes to children
                var o = {forceResize: options ? options.forceResize : false};
                Array.from(this.domObj.childNodes).each(function(child){
                    if (child.resize && child.getStyle('display') != 'none') {
                        child.resize.delay(0,child,o);
                    }
                });
            }
    
            this.fireEvent('sizeChange',this);
        }
    });
    
    if (base.global) {
        base.global.Layout = module.exports;
    }
    
});

/*
---

name: Jx.LayoutManager

description: Namespace and base class for all layout managers

license: MIT-style license.

requires:
 - Jx.Object

provides: [Jx.LayoutManager]

...
*/
// $Id$
/**
* Class: Jx.LayoutManager
*
* Namespace and base class for all layout managers 
* 
*
* Extends:
* <Jx.Object>
*
* License:
* Copyright (c) 2011, Jonathan Bomgardner 
*
* This file is licensed under an MIT style license
*/
define("jx/layoutmanager", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
        
    var layoutManager = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.LayoutManager',
        
        defaults: {
            /* Option: position
             * how to position the element, either 'absolute' or 'relative'.
             * The default (if not passed) is 'absolute'.  When using
             * 'absolute' positioning, both the width and height are
             * controlled by Jx.Layout.  If 'relative' positioning is used
             * then only the width is controlled, allowing the height to
             * be controlled by its content.
             */
            position: 'absolute',
            /* Option: left
             * the distance (in pixels) to maintain the left edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the left edge can be any distance from its parent
             * based on other parameters.
             */
            left: 0,
            /* Option: right
             * the distance (in pixels) to maintain the right edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the right edge can be any distance from its parent
             * based on other parameters.
             */
            right: 0,
            /* Option: top
             * the distance (in pixels) to maintain the top edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the top edge can be any distance from its parent
             * based on other parameters.
             */
            top: 0,
            /* Option: bottom
             * the distance (in pixels) to maintain the bottom edge of the element
             * from its parent element.  The default value is 0.  If this is set
             * to 'null', then the bottom edge can be any distance from its parent
             * based on other parameters.
             */
            bottom: 0,
            /* Option: width
             * the width (in pixels) of the element.  The default value is null.
             * If this is set to 'null', then the width can be any value based on
             * other parameters.
             */
            width: null,
            /* Option: height
             * the height (in pixels) of the element.  The default value is null.
             * If this is set to 'null', then the height can be any value based on
             * other parameters.
             */
            height: null,
            /* Option: minWidth
             * the minimum width that the element can be sized to.  The default
             * value is 0.
             */
            minWidth: 0,
            /* Option: minHeight
             * the minimum height that the element can be sized to.  The
             * default value is 0.
             */
            minHeight: 0,
            /* Option: maxWidth
             * the maximum width that the element can be sized to.  The default
             * value is -1, which means no maximum.
             */
            maxWidth: -1,
            /* Option: maxHeight
             * the maximum height that the element can be sized to.  The
             * default value is -1, which means no maximum.
             */
            maxHeight: -1
        },
    
        items: null,
        container: null,
        domObj: null,
        
        init: function(){
            this.items = [];
            this.parent();
        },
        
        setContainer: function(domObj){
            this.domObj = document.id(domObj);
            this.container = base.getWidget(domObj);
        },
        
        add: function(obj,options){
            return this.domObj.grab(document.id(obj));
        },
        
        size: function(obj, options){
            //get options from widget
            domObj = document.id(obj);
            var opts = domObj.retrieve('jxLayoutOpts');
            if (opts === null || opts === undefined) {
                opts = Object.merge({},this.defaults);
            }
    
            domObj.setStyle('position', opts.position);
    
            var needsResize = false;
            if (options) {
                for (var i in options) {
                    //prevent forceResize: false from causing a resize
                    if (i == 'forceResize') {
                        continue;
                    }
                    if (opts[i] != options[i]) {
                        needsResize = true;
                        opts[i] = options[i];
                    }
                }
                if (options.forceResize) {
                    needsResize = true;
                }
            }
            
            //We have to be in the DOM in order to resize properly.
            if (!document.id(domObj.parentNode)) {
                return;
            }
    
            var parentSize;
            if (domObj.parentNode.tagName == 'BODY') {
                parentSize = base.getPageDimensions();
            } else {
                parentSize = document.id(domObj.parentNode).getContentBoxSize();
            }
    
            if (opts.lastParentSize && !needsResize) {
                needsResize = (opts.lastParentSize.width != parentSize.width ||
                opts.lastParentSize.height != parentSize.height);
            } else {
                needsResize = true;
            }
            opts.lastParentSize = parentSize;
    
            domObj.store('jxLayoutOpts',opts)
            if (!needsResize) {
                return;
            }
    
            var l, t, w, h;
    
            /* calculate left and width */
            if (opts.left !== null) {
                /* fixed left */
                l = opts.left;
                if (opts.right === null) {
                    /* variable right */
                    if (opts.width === null) {
                        /* variable right and width
                         * set right to min, stretch width */
                        w = parentSize.width - l;
                        if (w < opts.minWidth ) {
                            w = opts.minWidth;
                        }
                        if (opts.maxWidth >= 0 && w > opts.maxWidth) {
                            w = opts.maxWidth;
                        }
                    } else {
                        /* variable right, fixed width
                         * use width
                         */
                        w = opts.width;
                    }
                } else {
                    /* fixed right */
                    if (opts.width === null) {
                        /* fixed right, variable width
                         * stretch width
                         */
                        w = parentSize.width - l - opts.right;
                        if (w < opts.minWidth) {
                            w = opts.minWidth;
                        }
                        if (opts.maxWidth >= 0 && w > opts.maxWidth) {
                            w = opts.maxWidth;
                        }
                    } else {
                        /* fixed right, fixed width
                         * respect left and width, allow right to stretch
                         */
                        w = opts.width;
                    }
                }
            } else {
                if (opts.right === null) {
                    if (opts.width === null) {
                        /* variable left, width and right
                         * set left, right to min, stretch width
                         */
                        l = 0;
                        w = parentSize.width;
                        if (opts.maxWidth >= 0 && w > opts.maxWidth) {
                            l = l + parseInt(w - opts.maxWidth,10)/2;
                            w = opts.maxWidth;
                        }
                    } else {
                        /* variable left, fixed width, variable right
                         * distribute space between left and right
                         */
                        w = opts.width;
                        l = parseInt((parentSize.width - w)/2,10);
                        if (l < 0) {
                            l = 0;
                        }
                    }
                } else {
                    if (opts.width !== null) {
                        /* variable left, fixed width, fixed right
                         * left is calculated directly
                         */
                        w = opts.width;
                        l = parentSize.width - w - opts.right;
                        if (l < 0) {
                            l = 0;
                        }
                    } else {
                        /* variable left and width, fixed right
                         * set left to min value and stretch width
                         */
                        l = 0;
                        w = parentSize.width - opts.right;
                        if (w < opts.minWidth) {
                            w = opts.minWidth;
                        }
                        if (opts.maxWidth >= 0 && w > opts.maxWidth) {
                            l = w - opts.maxWidth - opts.right;
                            w = opts.maxWidth;
                        }
                    }
                }
            }
    
            /* calculate the top and height */
            if (opts.top !== null) {
                /* fixed top */
                t = opts.top;
                if (opts.bottom === null) {
                    /* variable bottom */
                    if (opts.height === null) {
                        /* variable bottom and height
                         * set bottom to min, stretch height */
                        h = parentSize.height - t;
                        if (h < opts.minHeight) {
                            h = opts.minHeight;
                        }
                        if (opts.maxHeight >= 0 && h > opts.maxHeight) {
                            h = opts.maxHeight;
                        }
                    } else {
                        /* variable bottom, fixed height
                         * stretch height
                         */
                        h = opts.height;
                        if (opts.maxHeight >= 0 && h > opts.maxHeight) {
                            t = h - opts.maxHeight;
                            h = opts.maxHeight;
                        }
                    }
                } else {
                    /* fixed bottom */
                    if (opts.height === null) {
                        /* fixed bottom, variable height
                         * stretch height
                         */
                        h = parentSize.height - t - opts.bottom;
                        if (h < opts.minHeight) {
                            h = opts.minHeight;
                        }
                        if (opts.maxHeight >= 0 && h > opts.maxHeight) {
                            h = opts.maxHeight;
                        }
                    } else {
                        /* fixed bottom, fixed height
                         * respect top and height, allow bottom to stretch
                         */
                        h = opts.height;
                    }
                }
            } else {
                if (opts.bottom === null) {
                    if (opts.height === null) {
                        /* variable top, height and bottom
                         * set top, bottom to min, stretch height
                         */
                        t = 0;
                        h = parentSize.height;
                        if (h < opts.minHeight) {
                            h = opts.minHeight;
                        }
                        if (opts.maxHeight >= 0 && h > opts.maxHeight) {
                            t = parseInt((parentSize.height - opts.maxHeight)/2,10);
                            h = opts.maxHeight;
                        }
                    } else {
                        /* variable top, fixed height, variable bottom
                         * distribute space between top and bottom
                         */
                        h = opts.height;
                        t = parseInt((parentSize.height - h)/2,10);
                        if (t < 0) {
                            t = 0;
                        }
                    }
                } else {
                    if (opts.height !== null) {
                        /* variable top, fixed height, fixed bottom
                         * top is calculated directly
                         */
                        h = opts.height;
                        t = parentSize.height - h - opts.bottom;
                        if (t < 0) {
                            t = 0;
                        }
                    } else {
                        /* variable top and height, fixed bottom
                         * set top to min value and stretch height
                         */
                        t = 0;
                        h = parentSize.height - opts.bottom;
                        if (h < opts.minHeight) {
                            h = opts.minHeight;
                        }
                        if (opts.maxHeight >= 0 && h > opts.maxHeight) {
                            t = parentSize.height - opts.maxHeight - opts.bottom;
                            h = opts.maxHeight;
                        }
                    }
                }
            }
    
            //TODO: check left, top, width, height against current styles
            // and only apply changes if they are not the same.
    
            /* apply the new sizes */
            var sizeOpts = {width: w};
            if (opts.position == 'absolute') {
                var m = document.id(this.domObj.parentNode).measure(function(){
                    return this.getSizes(['padding'],['left','top']).padding;
                });
                domObj.setStyles({
                    position: opts.position,
                    left: l+m.left,
                    top: t+m.top
                });
                sizeOpts.height = h;
            } else {
                if (opts.height) {
                    sizeOpts.height = opts.height;
                }
            }
            domObj.setBorderBoxSize(sizeOpts);
        }
    });
    
    if (base.global) {
        base.global.LayoutManager = module.exports;
    }
});

/*
---

name: Jx.LayoutManager.Fill

description: Layout manager to make 1 widget fill the given container.

license: MIT-style license.

requires:
 - Jx.LayoutManager

provides: [Jx.LayoutManager.Fill]

...
*/
// $Id$
/**
* Class: Jx.LayoutManager.Fill
* This subclass of Jx.LayoutManager makes a single widget or DOM object fill
* the container.
*
* Extends:
* <Jx.LayoutManager>
*
* License:
* Copyright (c) 2011, Jonathan Bomgardner 
*
* This file is licensed under an MIT style license
*/
define("jx/layoutmanager/fill", function(require, exports, module){
    
    var base = require("../../base"),
        LayoutManager = require("../layoutmanager");
        
    var Fill = module.exports = new Class({
        Extends: LayoutManager,
        Family: 'Jx.LayoutManager.Fill',
        
        item: null,
        resizing: false,
        
        add: function(obj){
            //only allow a single item in this manager because it
            //will fill the domObj it is in.
            if (this.item === null) {
                this.parent(obj);
                this.size(obj);
                this.item = obj;
            }
        },
        
        resize: function(options){
            if (!this.resizing) {
                this.resizing = true;
                this.size(this.item);
                this.container.resize();
                this.resizing = false;
            }
        }
    });
    
    if (base.global) {
        base.global.LayoutManager.Fill = module.exports;
    }
    
});

/*
---

name: Jx.Container

description: Provides a container that a layout manager can be applied to to manage other widgets

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Layout
 - Jx.LayoutManager.Fill

provides: [Jx.Container]

...
*/
// $Id$
/**
* Class: Jx.Container
*
* Provides a container that a layout manager can be applied to to manage 
* other widgets. The container can be responsible for widget creation using
* the class property option or you can pass in pre-instantiated widgets.
* The rest of the options will be used as options for the widget as needed. 
* The property option layoutOpts of each item is used as options for the layout 
* of the item and is used by the layout manager assigned to this container. The
* default manager is Jx.LayoutManager.Fill which takes a single DOM object and 
* makes it fill the container. All containers will fill the object they are 
* inside of or they can be managed by a layout manager themselves.
* 
* One of the interesting things with this setup is that we can nest containers
* within other containers which will allow for us to create a complete interface
* based solely from the object(s) passed in the items array. (See example page)
* 
*
* Example:
* (code)
* 	new Jx.Container({
*		manager: new Jx.LayoutManager.Anchored(),
*       parent: 'body',
*       resizeWithWindow: true,
*       items: [
*			{
*				class: Jx.Panel,
*				label: 'example1',
*				layoutOpts: {
*					top: 30
*				}
*			},
* 			{
*				class: Jx.Tree,
*				layoutOpts: {
*					left: 400
*				}
*			}
*		]
*	})
* (end)
*
* Extends:
* <Jx.Widget>
*
* Author: Ing. Axel Mendoza Pupo.
*
* License:
* Copyright (c) 2011, Ing. Axel Mendoza Pupo.
* Additional changes (c) 2011 by Jonathan Bomgardner 
*
* This file is licensed under an MIT style license
*/
define("jx/container", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Fill = require("./layoutmanager/fill"),
        Layout = require("./layout");
        
    var container = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Container',
        
        options: {
            /* Option: layoutManager
             * A string, object, Jx.LayoutManager instance, or null. Will be used to determine
             * which layout manager to use in this container. If null, then 
             * Jx.LayoutManager.Fill will be used and only one object can be added.
             * If it's an object then it should look like:
             *
             * (code)
             * {
             *   name: <ManagerName>,
             *   options: {} //options for the manager
             * }
             * (end)
             */
            layoutManager: null,
            /* Option: items
             * An array of objects or Jx.Widget instances to be added to this 
             * container. If an object is passed then it needs to be in the form:
             * (code)
             * {
             *   class: Jx.Widget,    //the name of the class to create. Do NOT use quotes around it.
             *   id: 'some-id',       //a string id of an existing DOM object to use (mutually exclusive with class)
             *   options: {}          //an object with the options needed to construct the class. If id is used then the only thing we look for is layoutOpts.
             *   layoutOpts: {}       //an object with the appropriate layout options as required by the chosen manager.
             * }
             * (end)
             */
            items: null,
            /* Option: resizeWithWindow
             * boolean, automatically resize this container when the window size
             * changes, even if the element is not a direct descendant of the
             * BODY.  False by default.
             */
            resizeWithWindow: false,
            /* Option: parent
             * Indicates the parent DOM object that this container is to be added to.
             * If null, then we don't add it to anything assuming it already has been.
             * If set to 'body' then we will add this as a child of the BODY tag. 
             * Defaults to null.
             */
            parent: null,
            /* Option: topLevel
             * Indicates to the container that this is a top level container (not
             * contained within another container) and thus shoudl fill all of the
             * space it is given by the DOM object that it is inside of. Defaults to
             * false.
             */
            topLevel: false
        },
    
        layoutManager: null,
    
        items: null,
    
        bound: null,
    
        init: function(){
            this.bound = {
                resize: this.resize.bind(this)
            };
            this.items = [];
            this.parent();
        },
    
        render: function () {
            this.parent();
            var options = this.options;
            
            if (options.layoutManager === null || 
                options.layoutManager === undefined) {
                this.layoutManager = new Fill();
            } else {
                var t = typeOf(options.layoutManager);            
                if (t == 'string') {
                    var lm = require("jx/layoutmanager/" + options.layoutManager);
                    this.layoutManager = new lm();
                } else if (t == 'object') {
                    var lm = require("jx/layoutmanager/" + options.layoutManager.name);
                    this.layoutManager = new lm(options.layoutManager.options);
                } else {
                    this.layoutManger = options.layoutManager;
                }
            }
            
            //Container should always fill the DOM object it's in
            new Layout(this.domObj).resize();        
            
            this.layoutManager.setContainer(this);
            
            this.add(this.options.items);
            
            if (this.options.resizeWithWindow || document.body == this.domObj.parentNode) {
                window.addEvent('resize', this.bound.resize);
                window.addEvent('load', this.bound.resize);
            }
        },
        
        add: function(items){
            Array.from(items).each(function(item) {
                if ((item['class'] !== null && item['class'] !== undefined) ||
                    (item.id !== null && item.id !== undefined)) {
                    var itemObj,
                    layoutOpts = (item.layoutOpts)?item.layoutOpts:{};
                    //create a DOM element that will contain the item
                    var domObj = new Element('div', {
                        'class': 'jxContainerContent'
                    });
                    this.layoutManager.add(domObj,layoutOpts);
                    
                    item.options = (item.options)?item.options:{};
                    
                    if (item['class'] !== null && item['class'] !== undefined) {
                        var obj;                    
                        if (typeOf(item['class']) == 'string') {
                            //TODO: rewrite this for require
                            var klass = item['class'],
                                file;
                            if (klass.contains('.js') || klass.contains('/')) {
                                //this is a require path - either a full path with .js
                                //  or a relative path since it has at least 1 slash.
                                file = klass;
                            } else {
                                //otherwise it's just a name and should be in the proper
                                //namespace. Create the require path.
                                klass = klass.replace(".","/");
                                file = './' + klass.toLowerCase();
                            }
                            obj = require(file);
                        } else {
                            obj = item['class'];
                        }
                        item.options.parent = domObj;
                        itemObj = new obj(item.options);
                        if (itemObj.resize) {
                            itemObj.resize();
                        }
                    } else if (item.id !== null && item.id !== undefined) {
                        itemObj = document.id(item.id);
                        document.id(itemObj).inject(domObj);
                    } 
                    
                    this.items.push(itemObj);
                }
                this.fireEvent('jxContainerWidgetAdded', [itemObj, item,this])
            }, this);
        },
    
        resize: function(){
            this.domObj.resize();
            this.layoutManager.resize();
            //loop through items and if it's a container, or it has a resize() method,
            //call it's resize method
            this.items.each(function(widget){
                if (instanceOf(widget, container) || widget.resize) {
                    widget.resize();
                }
            },this);
        }
    });

    if (base.global) {
        base.global.Container = module.exports;
    }
    
});

/*
---

name: Jx.Tab

description: A single tab in a tab set.

license: MIT-style license.

requires:
 - Jx.Button
 - Jx.Layout
 - Jx.Container

provides: [Jx.Tab]

css:
 - tab

images:
 - tab_top.png
 - tab_bottom.png
 - tab_left.png
 - tab_right.png
 - tab_close.png

...
 */
// $Id$
/**
 * Class: Jx.Tab
 *
 * Extends: <Jx.Button>
 *
 * A single tab in a tab set.  A tab has a label (displayed in the tab) and a
 * content area that is displayed when the tab is active.  A tab has to be
 * added to both a <Jx.TabSet> (for the content) and <Jx.Toolbar> (for the
 * actual tab itself) in order to be useful.  Alternately, you can use
 * a <Jx.TabBox> which combines both into a single control at the cost of
 * some flexibility in layout options.
 *
 * A tab is a <Jx.ContentLoader> and you can specify the initial content of
 * the tab using any of the methods supported by
 * <Jx.ContentLoader::loadContent>.  You can acccess the actual DOM element
 * that contains the content (if you want to dynamically insert content
 * for instance) via the <Jx.Tab::content> property.
 *
 * A tab is a button of type *toggle* which means that it emits the *up*
 * and *down* events.
 *
 * Example:
 * (code)
 * var tab1 = new Jx.Tab({
 *     label: 'tab 1',
 *     content: 'content1',
 *     onDown: function(tab) {
 *         console.log('tab became active');
 *     },
 *     onUp: function(tab) {
 *         console.log('tab became inactive');
 *     }
 * });
 * (end)
 *
 *
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tab", function(require, exports, module){
    
    var base = require("../base"),
        Button = require("./button"),
        Layout = require("./layout"),
        Container = require("./container")
        
    var tab = module.exports = new Class({
        Extends: Button,
        Family: 'Jx.Tab',
        /**
         * Property: content
         * {HTMLElement} The content area that is displayed when the tab is
         * active.
         */
        content: null,
    
        options: {
            /* Option: toggleClass
             * the CSS class to use for the button, 'jxTabToggle' by default
             */
            toggleClass: 'jxTabToggle',
            /* Option: pressedClass
             * the CSS class to use when the tab is pressed, 'jxTabPressed' by
             * default
             */
            pressedClass: 'jxTabPressed',
            /* Option: activeClass
             * the CSS class to use when the tab is active, 'jxTabActive' by 
             * default.
             */
            activeClass: 'jxTabActive',
            /* Option: activeTabClass
             * the CSS class to use on the content area of the active tab,
             * 'tabContentActive' by default.
             */
            activeTabClass: 'tabContentActive',
            /* Option: template
             * the HTML template for a tab
             */
            template: '<span class="jxTabContainer"><a class="jxTab"><span class="jxTabContent"><img class="jxTabIcon" src="'+Jx.aPixel.src+'"><span class="jxTabLabel"></span></span></a><a class="jxTabClose"></a></span>',
            /* Option: contentTemplate
             * the HTML template for a tab's content area
             */
            contentTemplate: '<div class="tabContent"></div>',
            /* Option: close
             * {Boolean} can the tab be closed by the user?  False by default.
             */
            close: false,
            /* Option: shouldClose
             * {Mixed} when a tab is closeable, the shouldClose option is checked
             * first to see if the tab should close.  You can provide a function
             * for this option that can be used to return a boolean value.  This
             * is useful if your tab contains something the user can edit and you
             * want to see if they want to discard the changes before closing.
             * The default value is true, meaning the tab will close immediately.
             * (code)
             * new Jx.Tab({
             *   label: 'test close',
             *   close: true,
             *   shouldClose: function() {
             *     return window.confirm('Are you sure?');
             *   }
             * });
             * (end)
             */
            shouldClose: true
        },
        /**
         * Property: classes
         * {<Hash>} a hash of object properties to CSS class names used to
         * automatically extract references to important DOM elements when
         * processing a widget template.  This allows developers to provide custom
         * HTML structures without affecting the functionality of widgets.
         */
        classes: {
            domObj: 'jxTabContainer',
            domA: 'jxTab',
            domImg: 'jxTabIcon',
            domLabel: 'jxTabLabel',
            domClose: 'jxTabClose',
            content: 'tabContent'
        },
    
        /**
         * Method: render
         * Create a new instance of Jx.Tab.  Any layout options passed are used
         * to create a <Jx.Layout> for the tab content area.
         */
        render : function( ) {
            this.options = Object.merge({},this.options, {toggle:true});
            this.parent();
            this.domObj.store('jxTab', this);
            this.processElements(this.options.contentTemplate, this.classes);
            
            
            if (this.options.items !== undefined && this.options.items !== null) {
                opts = Object.merge({},this.options,{
                    parent: this.content
                });
                delete opts.template;
                this.container = new Container(opts);
            } else {
                new Layout(this.content, this.options); 
                if(!this.options.loadOnDemand || this.options.active) {
                    this.loadContent(this.content);
                    // set active if needed
                    if(this.options.active) {
                        this.clicked();
                    }
                }else{
                  this.addEvent('contentLoaded', function(ev) {
                    this.setActive(true);
                  }.bind(this));
                }
            }
            this.addEvent('down', function(){
                this.content.addClass(this.options.activeTabClass);
            }.bind(this));
            this.addEvent('up', function(){
                this.content.removeClass(this.options.activeTabClass);
            }.bind(this));
    
            //remove the close button if necessary
            if (this.domClose) {
                if (this.options.close) {
                    this.domObj.addClass('jxTabClose');
                    this.domClose.addEvent('click', (function(){
                      var shouldClose = true;
                      if (this.options.shouldClose !== undefined && this.options.shouldClose !== null) {
                        if (typeof this.options.shouldClose == 'function') {
                          shouldClose = this.options.shouldClose();
                        } else {
                          shouldClose = this.options.shouldClose;
                        }
                      }
                      if (shouldClose) {
                        this.fireEvent('close');
                      }
                    }).bind(this));
                } else {
                    this.domClose.dispose();
                }
            }
            //resize it
            this.resize();
        },
        /**
         * APIMethod: clicked
         * triggered when the user clicks the button, processes the
         * actionPerformed event
         */
        clicked : function(evt) {
          if(this.options.enabled) {
            // just set active when caching is enabled
            if(this.contentIsLoaded && this.options.cacheContent) {
              this.setActive(true);
            // load on demand or reload content if caching is disabled
            }else if(this.options.loadOnDemand || !this.options.cacheContent){
              this.loadContent(this.content);
            }else{
              this.setActive(true);
            }
            
            this.resize();
          }
          
        },
        
        resize: function(){
            if (instanceOf(this.container, Container)) {
                this.container.resize();
            } else if (this.domObj.resize) {
                this.domObj.resize();
            } else if (this.content.resize) {
                this.content.resize();
            } else {
                var jx = base.getWidget(this.content);
                if (jx !== undefined && jx !== null && jx !== this && jx.resize) {
                    jx.resize();
                }
            }
        }
    });
    
    if (base.global) {
        base.global.Tab = module.exports;
        
        /* keep the old location temporarily */
        base.global.Button.Tab = new Class({
          Extends: tab,
          init: function() {
            if (console.warn) {
              console.warn('WARNING: Jx.Button.Tab has been renamed to Jx.Tab');
            } else {
              console.log('WARNING: Jx.Button.Tab has been renamed to Jx.Tab');
            }
            this.parent();
          }
        });
    }
    
});

/*
---

name: Jx.Slider

description: A wrapper for mootools' slider class to make it more Jx Friendly.

license: MIT-style license.

requires:
 - Jx.Widget
 - More/Slider

provides: [Jx.Slider]

css:
 - slider

...
 */
// $Id$
/**
 * Class: Jx.Slider
 * This class wraps the mootools-more slider class to make it more Jx friendly
 *
 * Copyright 2009 by Jonathan Bomgardner
 * License: MIT-style
 */
define("jx/slider", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget");
        
    var slider = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Slider',
    
        options: {
            /**
             * Option: template
             * The template used to render the slider
             */
            template: '<div class="jxSliderContainer"><div class="jxSliderKnob"></div></div>',
            /**
             * Option: max
             * The maximum value the slider should have
             */
            max: 100,
            /**
             * Option: min
             * The minimum value the slider should ever have
             */
            min: 0,
            /**
             * Option: step
             * The distance between adjacent steps. For example, the default (1)
             * with min of 0 and max of 100, provides 100 steps between the min
             * and max values
             */
            step: 1,
            /**
             * Option: mode
             * Whether this is a vertical or horizontal slider
             */
            mode: 'horizontal',
            /**
             * Option: wheel
             * Whether the slider reacts to the scroll wheel.
             */
            wheel: true,
            /**
             * Option: snap
             * whether to snap to each step
             */
            snap: true,
            /**
             * Option: startAt
             * The value, or step, to put the slider at initially
             */
            startAt: 0,
            /**
             * Option: offset
             *
             */
            offset: 0,
            onChange: function(){},
            onComplete: function(){}
        },
        classes: {
            domObj: 'jxSliderContainer',
            knob: 'jxSliderKnob'
        },
        slider: null,
        knob: null,
        sliderOpts: null,
        disabled: false,
        /**
         * APIMethod: render
         * Create the slider but does not start it up due to issues with it
         * having to be visible before it will work properly.
         */
        render: function () {
            this.parent();
    
            this.sliderOpts = {
                range: [this.options.min, this.options.max],
                snap: this.options.snap,
                mode: this.options.mode,
                wheel: this.options.wheel,
                steps: (this.options.max - this.options.min) / this.options.step,
                offset: this.options.offset,
                onChange: this.change.bind(this),
                onComplete: this.complete.bind(this)
            };
    
        },
        /**
         * Method: change
         * Called when the slider moves
         */
        change: function (step) {
            this.fireEvent('change', [step, this]);
        },
        /**
         * Method: complete
         * Called when the slider stops moving and the mouse button is released.
         */
        complete: function (step) {
            this.fireEvent('complete', [step, this]);
        },
        /**
         * APIMethod: start
         * Call this method after the slider has been rendered in the DOM to start
         * it up and position the slider at the startAt poisition.
         */
        start: function () {
            if (this.slider === undefined || this.slider === null) {
                this.slider = new Slider(this.domObj, this.knob, this.sliderOpts);
            }
            this.slider.set(this.options.startAt);
        },
        /**
         * APIMethod: set
         * set the value of the slider
         */
        set: function(value) {
          this.slider.set(value);
        },
        
        /**
         * APIMethod: enable
         * Use this to enable the slider if disabled.
         */
        enable: function(){
            if (this.disabled) {
                this.slider.attach();
                this.domObj.removeClass('jxSliderDisabled');
                this.disabled = false;
            }
        },
        
        /** 
         * APIMethod: disable
         * Use this to disable the slider.
         */
        disable: function() {
            if (!this.disabled){
                this.slider.detach();
                this.domObj.addClass('jxSliderDisabled');
                this.disabled = true;
            }
        }
    });
    
    if (base.global) {
        base.global.Slider = module.exports;
    }
    
});

/*
---

name: Jx.Plugin

description: Base class for all plugins

license: MIT-style license.

requires:
 - Jx.Object

provides: [Jx.Plugin]

...
 */
// $Id$
/**
 * Class: Jx.Plugin
 *
 * Extend: <Jx.Object>
 *
 * Base class for all plugins. In order for a plugin to be used it must
 * extend from this class.
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define('jx/plugin', function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
    
    var plugin = module.exports = new Class({
        
        Extends: jxObject,
        Family: "Jx.Plugin",
    
        options: {},
    
        /**
         * APIMethod: attach
         * Registers this plugin with the class it works on. Can be overridden to
         * setup the plugin but the parent must be called.
         */
        attach: function(obj){
            obj.registerPlugin(this);
        },
    
        /**
         * APIMethod: detach
         * Called to deregister the plugin with the object.
         */
        detach: function(obj){
            obj.deregisterPlugin(this);
        },
    
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         *
         * Parameters:
         * lang - the language being changed to or that had it's data set of
         *    translations changed.
         */
        changeText: function (lang) {
            //if the mask is being used then recreate it. The code will pull
            //the new text automatically
            if (this.busy) {
                this.setBusy(false);
                this.setBusy(true);
            }
        }
    });
    
    if (base.global) {
        base.global.Plugin = plugin;
    }

});

/*
---

name: Jx.Adaptor

description: Base class for all Adaptors.

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Adaptor]

...
 */
/**
 * Class: Jx.Adaptor
 * Base class for all adaptor implementations. Provides a place to locate all
 * common code and the Jx.Adaptor namespace.  Since it extends <Jx.Plugin> all
 * adaptors will be able to be used as plugins for their respective classes.
 * Also as such, they must have the attach() and detach() methods.
 *
 * Adaptors are specifically used to conform a <Jx.Store> to any one of
 * the different widgets (i.e. Jx.Tree, Jx.ListView, etc...) that could
 * benefit from integration with the store. This approach was taken to minimize
 * data access code in the widgets themselves. Widgets should have no idea where
 * the data/items come from so that they will be usable in the broadest number
 * of situations.
 *
 * Copyright 2010 by Jonathan Bomgardner
 * License: mit-style
 */

define('jx/adaptor', function(require, exports, module){

    var Plugin = require('./plugin'),
        base = require('base');
    
    var adaptor = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Adaptor',
    
        name: 'Jx.Adaptor',
    
        options: {
            /**
             * Option: template
             * The text template to use in creating the items for this adaptor
             */
            template: '',
            /**
             * Option: useTemplate
             * Whether or not to use the text template above. Defaults to true.
             */
            useTemplate: true,
            /**
             * Option: store
             * The store to use with the adaptor.
             */
            store: null
        },
        /**
         * Property: columnsNeeded
         * Will hold an array of the column names needed for processing the
         * template
         */
        columnsNeeded: null,
    
        init: function () {
            var options = this.options;
            this.parent();
    
            this.store = options.store;
    
            if (options.useTemplate && (this.store.getFields() !== undefined || this.store.getFields() !== null)) {
                this.columnsNeeded = this.store.parseTemplate(options.template);
            }
        },
    
        attach: function (widget) {
            this.parent(widget);
            this.widget = widget;
        },
    
        detach: function () {
            this.parent();
        }
    
    });
    
    if (base.global) {
        base.global.Adaptor = adaptor;
    }

});

/*
---

name: Jx.MonthPicker

description: Provides a Month Picker component

license: MIT-style license.

requires:
 - Jx.Button

css:
 - monthpicker

provides: [Jx.MonthPicker]

...
 */
// $Id$
/**
 * Class: Jx.MonthPicker
 *
 * A Jx.MonthPicker: Provide a Month Picker component
 *
 * Example:
 * (code)
 * 	new Jx.MonthPicker({
 * 		month: 5,
 *		year: 1984,
 *		onSelect: function(){
 *			alert('selected month: ' + this.options.month + ', selected year: ' + this.options.year);
 *		},
 *		onCancel: function(){
 *			alert('user click on cancel button');
 *		}
 *	})
 * (end)
 *
 * Extends:
 * <Jx.Widget>
 *
 * Author: Ing. Axel Mendoza Pupo.
 * 
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 */
define("jx/monthpicker", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Button = require("./button");
        
    var monthPicker = module.exports = new Class({
    
        Extends: Widget,
        Family: 'Jx.MonthPicker',
        pluginNamespace: 'MonthPicker',
    
        options: {
            template: '<div class="jxMonthPicker"><span class="jxMonthPickerLeft" align="center"></span><span class="jxMonthPickerRight" align="center"></span><div class="jxMonthPickerControls" align="center"></div></div>',
            month: null,
            year: null
        },
        
        classes: {
            domObj: 'jxMonthPicker',
            left: 'jxMonthPickerLeft',
            right: 'jxMonthPickerRight',
            controls: 'jxMonthPickerControls'
        },
        
        render: function() {
            this.parent();
            
            var self = this;
            var _monthCont = null;
            this.Months = {};
            this.displayMonths = [];
            base.getText({set: 'Date', key:'months_abbr'}).each(function(mo, index){
                self.Months[mo] = index;
                if(index % 2 == 0){
                    _monthCont = new Element('div');
                    self.left.adopt(_monthCont);
                }
                var monthField = new Element('span',{
                    'class': 'jxMonthPickerCell',
                    html: mo,
                    events: {
                        click: function(event){
                            //event.target.focus();
                            if(self.monthSelected){
                                self.monthSelected.removeClass('jxDatePickerSelected');
                            }
                            event.target.addClass('jxDatePickerSelected');
                            self.monthSelected = event.target;
                            event.stop();
                        }
                    }
                });
                _monthCont.adopt(monthField);
                if(self.options.month && self.options.month == index){
                monthField.addClass('jxDatePickerSelected');
                self.monthSelected = monthField;
                }
                self.displayMonths.push(monthField);
            },this);
                    
            this.displayYear = this.options.year - 5;
            this.displayYears = [];
            var yearControls = new Element('div', {
                'class': 'jxDatePickerBar',
                styles: {
                'margin-left': 8
                }
            });
            self.right.adopt(yearControls);
            
            new Button({
                imageClass: 'jxPrevDatePickerIcon',
                onClick: function(){
                    self.displayYear -= 10;
                    self.updateYears();
                }
            }).addTo(yearControls);
                    
            new Button({
                imageClass: 'jxNextDatePickerIcon',
                onClick: function(){
                    self.displayYear += 10;
                    self.updateYears();
                }
            }).addTo(yearControls);
                    
            var _yearCont = null;
            var two = true;
            for(i = this.options.year - 5; i < this.options.year + 5; i++){
                if(two){
                    _yearCont = new Element('div');
                    self.right.adopt(_yearCont);
                    two = false;
                } else{
                    two = true;
                }
                var yearField = new Element('span',{
                    'class': 'jxMonthPickerCell',
                    html: i,
                    events: {
                        click: function(event){
                            //event.target.focus();
                            if(self.yearSelected){
                                self.yearSelected.removeClass('jxDatePickerSelected');
                            }
                            event.target.addClass('jxDatePickerSelected');
                            self.yearSelected = event.target;
                            event.stop();
                        }
                    }
                });
                        
                self.displayYears.push(yearField);
                _yearCont.adopt(yearField);
                if(self.options.year && self.options.year == i){
                    yearField.addClass('jxDatePickerSelected');
                    self.yearSelected = yearField;
                }
            }
                    
            new Button({
                label: 'Ok',
                onClick: function(objEvent){
                    self.options.month = self.Months[self.monthSelected.get('html')];
                    if(self.yearSelected){
                        self.options.year = self.yearSelected.get('html');
                    }
                    self.fireEvent('select');
                    objEvent.event.stop();
                }
            }).addTo(this.controls);
                    
            new Button({
                label: 'Cancel',
                onClick: function(objEvent){
                    self.fireEvent('cancel');
                    objEvent.event.stop();
                }
            }).addTo(this.controls);
            
        },
            
        setMonth: function(_month){
            this.options.month = _month;
            if(this.monthSelected){
                this.monthSelected.removeClass('jxDatePickerSelected');
            }
            this.monthSelected = this.displayMonths[_month];
            this.monthSelected.addClass('jxDatePickerSelected');
        },
        
        setYear: function(_year){
            this.options.year = _year;
            this.displayYear = _year;
            this.updateYears();
        },
        
        updateYears: function(){
            var self = this;
            var index = this.displayYear;
            if(this.yearSelected){
                this.yearSelected.removeClass('jxDatePickerSelected');
            }
            this.displayYears.each(function(node){
                node.set('html', index);
                if(self.options.year == index){
                    self.yearSelected = node;
                    self.yearSelected.addClass('jxDatePickerSelected');
                }
                index++;
            },this);
        }
    });
    
    if (base.global) {
        base.global.MonthPicker = module.exports;
    }
    
});

/*
---

name: Jx.Styles

description: A singleton object useful for dynamically creating and manipulating CSS styles

license: MIT-style license.

requires:
 - Jx

provides: [Jx.Styles]

...
 */
/**
 * Class: Jx.Styles
 * Dynamic stylesheet class. Used for creating and manipulating dynamic
 * stylesheets.
 *
 * TBD: should we handle the case of putting the same selector in a stylesheet
 * twice?  Right now the code that stores the index of each rule on the
 * stylesheet is not really safe for that when combined with delete or get
 *
 * This is a singleton and should be called directly, like so:
 *
 * (code)
 *   // create a rule that turns all para text red and 15px.
 *   var rule = Jx.Styles.insertCssRule("p", "color: red;", "myStyle");
 *   rule.style.fontSize = "15px";
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 * Additional code by Paul Spencer
 *
 * This file is licensed under an MIT style license
 *
 * Inspired by dojox.html.styles, VisitSpy by nwhite,
 * http://www.hunlock.com/blogs/Totally_Pwn_CSS_with_Javascript
 *
 */

define('jx/styles',['../base'],function(require, exports, module){
    
    var base = require('../base');
    
    var styles = module.exports = new(new Class({
        /**
         * dynamicStyleMap - <Hash> used to keep a reference to dynamically
         * created style sheets for quick access
         */
        dynamicStyleMap: {},
        /**
         * APIMethod: getCssRule
         * retrieve a reference to a CSS rule in a specific style sheet based on
         * its selector.  If the rule does not exist, create it.
         *
         * Parameters:
         * selector - <String> the CSS selector for the rule
         * styleSheetName - <String> the name of the sheet to get the rule from
         *
         * Returns:
         * <CSSRule> - the requested rule
         */
        getCssRule: function(selector, styleSheetName) {
            var ss = this.getDynamicStyleSheet(styleSheetName),
                rule = null,
                i;
            if (ss.indicies) {
                i = ss.indicies.indexOf(selector);
                if (i == -1) {
                    rule = this.insertCssRule(selector, '', styleSheetName);
                } else {
                    if (Browser.ie) {
                        rule = ss.sheet.rules[i];
                    } else {
                        rule = ss.sheet.cssRules[i];
                    }
                }
            }
            return rule;
        },
        /**
         * APIMethod: insertCssRule
         * insert a new dynamic rule into the given stylesheet.  If no name is
         * given for the stylesheet then the default stylesheet is used.
         *
         * Parameters:
         * selector - <String> the CSS selector for the rule
         * declaration - <String> CSS-formatted rules to include.  May be empty,
         * in which case you may want to use the returned rule object to
         * manipulate styles
         * styleSheetName - <String> the name of the sheet to place the rules in,
         * or empty to put them in a default sheet.
         *
         * Returns:
         * <CSSRule> - a CSS Rule object with properties that are browser
         * dependent.  In general, you can use rule.styles to set any CSS
         * properties in the same way that you would set them on a DOM object.
         */
        insertCssRule: function (selector, declaration, styleSheetName) {
            var ss = this.getDynamicStyleSheet(styleSheetName),
                rule,
                text = selector + " {" + declaration + "}",
                index;
            if (Browser.ie) {
                if (declaration === '') {
                    //IE requires SOME text for the declaration. Passing '{}' will
                    //create an empty rule.
                    declaration = '{}';
                }
                index = ss.styleSheet.addRule(selector,declaration);
                rule = ss.styleSheet.rules[index];
            } else {
                ss.sheet.insertRule(text, ss.indicies.length);
                rule = ss.sheet.cssRules[ss.indicies.length];
            }
            ss.indicies.push(selector);
            return rule;
        },
        /**
         * APIMethod: removeCssRule
         * removes a CSS rule from the named stylesheet.
         *
         * Parameters:
         * selector - <String> the CSS selector for the rule
         * styleSheetName - <String> the name of the sheet to remove the rule
         * from,  or empty to remove them from the default sheet.
         *
         * Returns:
         * <Boolean> true if the rule was removed, false if it was not.
         */
        removeCssRule: function (selector, styleSheetName) {
            var ss = this.getDynamicStyleSheet(styleSheetName),
                i = ss.indicies.indexOf(selector),
                result = false;
            ss.indicies.splice(i, 1);
            if (Browser.ie) {
                ss.removeRule(i);
                result = true;
            } else {
                ss.sheet.deleteRule(i);
                result = true;
            }
            return result;
        },
        /**
         * APIMethod: getDynamicStyleSheet
         * return a reference to a styleSheet based on its title.  If the sheet
         * does not already exist, it is created.
         *
         * Parameter:
         * name - <String> the title of the stylesheet to create or obtain
         *
         * Returns:
         * <StyleSheet> a StyleSheet object with browser dependent capabilities.
         */
        getDynamicStyleSheet: function (name) {
            name = (name) ? name : 'default';
            if (!Object.keys(this.dynamicStyleMap).contains(name)) {
                var sheet = new Element('style').set('type', 'text/css').inject(document.head);
                sheet.indicies = [];
                this.dynamicStyleMap[name] = sheet;
            }
            return this.dynamicStyleMap[name];
        },
        /**
         * APIMethod: enableStyleSheet
         * enable a style sheet
         *
         * Parameters:
         * name - <String> the title of the stylesheet to enable
         */
        enableStyleSheet: function (name) {
            this.getDynamicStyleSheet(name).disabled = false;
        },
        /**
         * APIMethod: disableStyleSheet
         * enable a style sheet
         *
         * Parameters:
         * name - <String> the title of the stylesheet to disable
         */
        disableStyleSheet: function (name) {
            this.getDynamicStyleSheet(name).disabled = true;
        },
        /**
         * APIMethod: removeStyleSheet
         * Removes a style sheet
         *
         * Parameters:
         * name = <String> the title of the stylesheet to remove
         */
        removeStyleSheet: function (name) {
          this.disableStyleSheet(name);
          this.getDynamicStyleSheet(name).dispose();
          delete this.dynamicStyleMap[name];
        },
        /**
         * APIMethod: isStyleSheetDefined
         * Determined if the passed in name is a defined dynamic style sheet.
         *
         * Parameters:
         * name = <String> the title of the stylesheet to remove
         */
        isStyleSheetDefined: function (name) {
          return Object.keys(this.dynamicStyleMap).contains(name);
        }
    }))();
    
    if (base.global) {
        base.global.Styles = module.exports;
    }

});

/*
---

name: Jx.Splitter

description: A Jx.Splitter creates two or more containers within a parent container and provides user control over the size of the containers.

license: MIT-style license.

requires:
 - Jx.Layout

optional:
 - More/Drag

provides: [Jx.Splitter]

css:
 - splitter

...
 */
// $Id$
/**
 * Class: Jx.Splitter
 *
 * Extends: <Jx.Object>
 *
 * a Jx.Splitter creates two or more containers within a parent container
 * and provides user control over the size of the containers.  The split
 * can be made horizontally or vertically.
 *
 * A horizontal split creates containers that divide the space horizontally
 * with vertical bars between the containers.  A vertical split divides
 * the space vertically and creates horizontal bars between the containers.
 *
 * Example:
 * (code)
 * (end)
 * 
 * Locale Keys:
 * - splitter.barToolTip
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/splitter", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object"),
        Layout = require("./layout"),
        Snap = null;
        
    var splitter = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.Splitter',
        /**
         * Property: domObj
         * {HTMLElement} the element being split
         */
        domObj: null,
        /**
         * Property: elements
         * {Array} an array of elements that are displayed in each of the split
         * areas
         */
        elements: null,
        /**
         * Property: bars
         * {Array} an array of the bars between each of the elements used to
         * resize the split areas.
         */
        bars: null,
        /**
         * Property: firstUpdate
         * {Boolean} track the first resize event so that unexposed Jx things
         * can be forced to calculate their size the first time they are exposed.
         */
        firstUpdate: true,
        options: {
            /* Option: useChildren
             * {Boolean} if set to true, then the children of the
             * element to be split are used as the elements.  The default value is
             * false.  If this is set, then the elements and splitInto options
             * are ignored.
             */
            useChildren: false,
            /* Option: splitInto
             * {Integer} the number of elements to split the domObj into.
             * If not set, then the length of the elements option is used, or 2 if
             * elements is not specified.  If splitInto is specified and elements
             * is specified, then splitInto is used.  If there are more elements than
             * splitInto specifies, then the extras are ignored.  If there are less
             * elements than splitInto specifies, then extras are created.
             */
            splitInto: 2,
            /* Option: elements
             * {Array} an array of elements to put into the split areas.
             * If splitInto is not set, then it is calculated from the length of
             * this array.
             */
            elements: null,
            /* Option: containerOptions
             * {Array} an array of objects that provide options
             *  for the <Jx.Layout> constraints on each element.
             */
            containerOptions: [],
            /* Option: barOptions
             * {Array} an array of object that provide options for the bars,
             * this array should be one less than the number of elements in the
             * splitter.  The barOptions objects can contain a snap property indicating
             * that a default snap object should be created in the bar and the value
             * of 'before' or 'after' indicates which element it snaps open/shut.
             */
            barOptions: [],
            /* Option: layout
             * {String} either 'horizontal' or 'vertical', indicating the
             * direction in which the domObj is to be split.
             */
            layout: 'horizontal',
            /* Option: snaps
             * {Array} an array of objects which can be used to snap
             * elements open or closed.
             */
            snaps: [],
            /* Option: onStart
             * an optional function to call when a bar starts dragging
             */
            onStart: null,
            /* Option: onFinish
             * an optional function to call when a bar finishes dragging
             */
            onFinish: null
        },
    
        parameters: ['domObj','options'],
    
        /**
         * APIMethod: init
         * Create a new instance of Jx.Splitter
         */
        init: function() {

            Snap = require("./splitter/snap");            
            
            this.domObj = document.id(this.options.domObj);
            this.domObj.addClass('jxSplitContainer');
            var jxLayout = this.domObj.retrieve('jxLayout');
            if (jxLayout) {
                jxLayout.addEvent('sizeChange', this.sizeChanged.bind(this));
            }
    
            this.elements = [];
            this.bars = [];
            var i;
            var nSplits = 2;
            if (this.options.useChildren) {
                this.elements = this.domObj.getChildren();
                nSplits = this.elements.length;
            } else {
                nSplits = this.options.elements ?
                                this.options.elements.length :
                                this.options.splitInto;
                for (i=0; i<nSplits; i++) {
                    var el;
                    if (this.options.elements && this.options.elements[i]) {
                        if (this.options.elements[i].domObj) {
                            el = this.options.elements[i].domObj;
                        } else {
                            el = document.id(this.options.elements[i]);
                        }
                        if (!el) {
                            el = this.prepareElement();
                            el.id = this.options.elements[i];
                        }
                    } else {
                        el = this.prepareElement();
                    }
                    this.elements[i] = el;
                    this.domObj.adopt(this.elements[i]);
                }
            }
            this.elements.each(function(el) { el.addClass('jxSplitArea'); });
            for (i=0; i<nSplits; i++) {
                var jxl = this.elements[i].retrieve('jxLayout');
                if (!jxl) {
                    new Layout(this.elements[i], this.options.containerOptions[i]);
                } else {
                    if (this.options.containerOptions[i]) {
                        jxl.resize(Object.merge({},this.options.containerOptions[i],
                            {position:'absolute'}));
                    } else {
                        jxl.resize({position: 'absolute'});
                    }
                }
            }
    
            for (i=1; i<nSplits; i++) {
                var bar;
                if (this.options.prepareBar) {
                    bar = this.options.prepareBar(i-1);
                } else {
                    bar = this.prepareBar();
                }
                bar.store('splitterObj', this);
                bar.store('leftSide',this.elements[i-1]);
                bar.store('rightSide', this.elements[i]);
                this.elements[i-1].store('rightBar', bar);
                this.elements[i].store('leftBar', bar);
                this.domObj.adopt(bar);
                this.bars[i-1] = bar;
            }
    
            //making dragging dependent on mootools Drag class
            if (Drag != undefined) {
                this.establishConstraints();
            }
    
            for (i=0; i<this.options.barOptions.length; i++) {
                if (!this.bars[i]) {
                    continue;
                }
                var opt = this.options.barOptions[i];
                if (opt && opt.snap && (opt.snap == 'before' || opt.snap == 'after')) {
                    var element;
                    if (opt.snap == 'before') {
                        element = this.bars[i].retrieve('leftSide');
                    } else if (opt.snap == 'after') {
                        element = this.bars[i].retrieve('rightSide');
                    }
                    var snap;
                    var snapEvents;
                    if (opt.snapElement) {
                        snap = opt.snapElement;
                        snapEvents = opt.snapEvents || ['click', 'dblclick'];
                    } else {
                        snap = this.bars[i];
                        snapEvents = opt.snapEvents || ['dblclick'];
                    }
                    if (!snap.parentNode) {
                        this.bars[i].adopt(snap);
                    }
                    new Snap(snap, element, this, snapEvents);
                }
            }
    
            for (i=0; i<this.options.snaps.length; i++) {
                if (this.options.snaps[i]) {
                    new Snap(this.options.snaps[i], this.elements[i], this);
                }
            }
    
            this.sizeChanged();
        },
        /**
         * Method: prepareElement
         * Prepare a new, empty element to go into a split area.
         *
         * Returns:
         * {HTMLElement} an HTMLElement that goes into a split area.
         */
        prepareElement: function(){
            var o = new Element('div', {styles:{position:'absolute'}});
            return o;
        },
    
        /**
         * Method: prepareBar
         * Prepare a new, empty bar to go into between split areas.
         *
         * Returns:
         * {HTMLElement} an HTMLElement that becomes a bar.
         */
        prepareBar: function() {
            var o = new Element('div', {
                'class': 'jxSplitBar'+this.options.layout.capitalize(),
                'title': this.getText({set:'Jx',key:'splitter',value:'barToolTip'})
            });
            return o;
        },
    
        /**
         * Method: establishConstraints
         * Setup the initial set of constraints that set the behaviour of the
         * bars between the elements in the split area.
         */
        establishConstraints: function() {
            var modifiers = {x:null,y:null};
            var fn;
            if (this.options.layout == 'horizontal') {
                modifiers.x = "left";
                fn = this.dragHorizontal;
            } else {
                modifiers.y = "top";
                fn = this.dragVertical;
            }
            if (typeof Drag != 'undefined') {
                this.bars.each(function(bar){
                    var mask;
                    new Drag(bar, {
                        //limit: limit,
                        modifiers: modifiers,
                        onSnap : (function(obj) {
                            obj.addClass('jxSplitBarDrag');
                            this.fireEvent('snap',[obj]);
                        }).bind(this),
                        onCancel: (function(obj){
                            mask.destroy();
                            this.fireEvent('cancel',[obj]);
                        }).bind(this),
                        onDrag: (function(obj, event){
                            fn.apply(this,[obj]);
                            this.fireEvent('drag',[obj,event]);
                        }).bind(this),
                        onComplete : (function(obj) {
                            mask.destroy();
                            obj.removeClass('jxSplitBarDrag');
                            if (obj.retrieve('splitterObj') != this) {
                                return;
                            }
                            fn.apply(this,[obj]);
                            this.fireEvent('complete',[obj]);
                            this.fireEvent('finish',[obj]);
                        }).bind(this),
                        onBeforeStart: (function(obj) {
                            this.fireEvent('beforeStart',[obj]);
                            mask = new Element('div',{'class':'jxSplitterMask'}).inject(obj, 'after');
                        }).bind(this),
                        onStart: (function(obj, event) {
                            this.fireEvent('start',[obj, event]);
                        }).bind(this)
                    });
                }, this);
            }
        },
    
        /**
         * Method: dragHorizontal
         * In a horizontally split container, handle a bar being dragged left or
         * right by resizing the elements on either side of the bar.
         *
         * Parameters:
         * obj - {HTMLElement} the bar that was dragged
         */
        dragHorizontal: function(obj) {
            var leftEdge = parseInt(obj.style.left,10);
            var leftSide = obj.retrieve('leftSide');
            var rightSide = obj.retrieve('rightSide');
            var leftJxl = leftSide.retrieve('jxLayout');
            var rightJxl = rightSide.retrieve('jxLayout');
    
            var paddingLeft = this.domObj.measure(function(){
                var m = this.getSizes(['padding'], ['left']);
                return m.padding.left;
            });
    
            /* process right side first */
            var rsLeft, rsWidth, rsRight;
    
            var size = obj.retrieve('size');
            if (!size) {
                size = obj.getBorderBoxSize();
                obj.store('size',size);
            }
            rsLeft = leftEdge + size.width - paddingLeft;
    
            var parentSize = this.domObj.getContentBoxSize();
    
            if (rightJxl.options.width != null) {
                rsWidth = rightJxl.options.width + rightJxl.options.left - rsLeft;
                rsRight = parentSize.width - rsLeft - rsWidth;
            } else {
                rsWidth = parentSize.width - rightJxl.options.right - rsLeft;
                rsRight = rightJxl.options.right;
            }
    
            /* enforce constraints on right side */
            if (rsWidth < 0) {
                rsWidth = 0;
            }
    
            if (rsWidth < rightJxl.options.minWidth) {
                rsWidth = rightJxl.options.minWidth;
            }
            if (rightJxl.options.maxWidth >= 0 && rsWidth > rightJxl.options.maxWidth) {
                rsWidth = rightJxl.options.maxWidth;
            }
    
            rsLeft = parentSize.width - rsRight - rsWidth;
            leftEdge = rsLeft - size.width;
    
            /* process left side */
            var lsLeft, lsWidth;
            lsLeft = leftJxl.options.left;
            lsWidth = leftEdge - lsLeft;
    
            /* enforce constraints on left */
            if (lsWidth < 0) {
                lsWidth = 0;
            }
            if (lsWidth < leftJxl.options.minWidth) {
                lsWidth = leftJxl.options.minWidth;
            }
            if (leftJxl.options.maxWidth >= 0 &&
                lsWidth > leftJxl.options.maxWidth) {
                lsWidth = leftJxl.options.maxWidth;
            }
    
            /* update the leftEdge to accomodate constraints */
            if (lsLeft + lsWidth != leftEdge) {
                /* need to update right side, ignoring constraints because left side
                   constraints take precedence (arbitrary decision)
                 */
                leftEdge = lsLeft + lsWidth;
                var delta = leftEdge + size.width - rsLeft;
                rsLeft += delta;
                rsWidth -= delta;
            }
    
            /* put bar in its final location based on constraints */
            obj.style.left = paddingLeft + leftEdge + 'px';
    
            /* update leftSide positions */
            if (leftJxl.options.width == null) {
                parentSize = this.domObj.getContentBoxSize();
                leftSide.resize({right: parentSize.width - lsLeft-lsWidth});
            } else {
                leftSide.resize({width: lsWidth});
            }
    
            /* update rightSide position */
            if (rightJxl.options.width == null) {
                rightSide.resize({left:rsLeft});
            } else {
                rightSide.resize({left: rsLeft, width: rsWidth});
            }
        },
    
        /**
         * Method: dragVertical
         * In a vertically split container, handle a bar being dragged up or
         * down by resizing the elements on either side of the bar.
         *
         * Parameters:
         * obj - {HTMLElement} the bar that was dragged
         */
        dragVertical: function(obj) {
            /* top edge of the bar */
            var topEdge = parseInt(obj.style.top,10);
    
            /* the containers on either side of the bar */
            var topSide = obj.retrieve('leftSide');
            var bottomSide = obj.retrieve('rightSide');
            var topJxl = topSide.retrieve('jxLayout');
            var bottomJxl = bottomSide.retrieve('jxLayout');
    
            var paddingTop = this.domObj.measure(function(){
                var m = this.getSizes(['padding'], ['top']);
                return m.padding.top;
            });
    
    
            /* measure the bar and parent container for later use */
            var size = obj.retrieve('size');
            if (!size) {
                size = obj.getBorderBoxSize();
                obj.store('size', size);
            }
            var parentSize = this.domObj.getContentBoxSize();
    
            /* process top side first */
            var bsTop, bsHeight, bsBottom;
    
            /* top edge of bottom side is the top edge of bar plus the height of the bar */
            bsTop = topEdge + size.height - paddingTop;
    
            if (bottomJxl.options.height != null) {
                /* bottom side height is fixed */
                bsHeight = bottomJxl.options.height + bottomJxl.options.top - bsTop;
                bsBottom = parentSize.height - bsTop - bsHeight;
            } else {
                /* bottom side height is not fixed. */
                bsHeight = parentSize.height - bottomJxl.options.bottom - bsTop;
                bsBottom = bottomJxl.options.bottom;
            }
    
            /* enforce constraints on bottom side */
            if (bsHeight < 0) {
                bsHeight = 0;
            }
    
            if (bsHeight < bottomJxl.options.minHeight) {
                bsHeight = bottomJxl.options.minHeight;
            }
    
            if (bottomJxl.options.maxHeight >= 0 && bsHeight > bottomJxl.options.maxHeight) {
                bsHeight = bottomJxl.options.maxHeight;
            }
    
            /* recalculate the top of the bottom side in case it changed
               due to a constraint.  The bar may have moved also.
             */
            bsTop = parentSize.height - bsBottom - bsHeight;
            topEdge = bsTop - size.height;
    
            /* process left side */
            var tsTop, tsHeight;
            tsTop = topJxl.options.top;
            tsHeight = topEdge - tsTop;
    
            /* enforce constraints on left */
            if (tsHeight < 0) {
                tsHeight = 0;
            }
            if (tsHeight < topJxl.options.minHeight) {
                tsHeight = topJxl.options.minHeight;
            }
            if (topJxl.options.maxHeight >= 0 &&
                tsHeight > topJxl.options.maxHeight) {
                tsHeight = topJxl.options.maxHeight;
            }
    
            /* update the topEdge to accomodate constraints */
            if (tsTop + tsHeight != topEdge) {
                /* need to update right side, ignoring constraints because left side
                   constraints take precedence (arbitrary decision)
                 */
                topEdge = tsTop + tsHeight;
                var delta = topEdge + size.height - bsTop;
                bsTop += delta;
                bsHeight -= delta;
            }
    
            /* put bar in its final location based on constraints */
            obj.style.top = paddingTop + topEdge + 'px';
    
            /* update topSide positions */
            if (topJxl.options.height == null) {
                topSide.resize({bottom: parentSize.height - tsTop-tsHeight});
            } else {
                topSide.resize({height: tsHeight});
            }
    
            /* update bottomSide position */
            if (bottomJxl.options.height == null) {
                bottomSide.resize({top:bsTop});
            } else {
                bottomSide.resize({top: bsTop, height: bsHeight});
            }
        },
        
        /**
         * APIMethod: resize
         * triggers a resize of the splitter.
         */
        resize: function(){
            this.sizeChanged();
        },
        
        /**
         * Method: sizeChanged
         * handle the size of the container being changed.
         */
        sizeChanged: function() {
            if (this.options.layout == 'horizontal') {
                this.horizontalResize();
            } else {
                this.verticalResize();
            }
        },
    
        /**
         * Method: horizontalResize
         * Resize a horizontally layed-out container
         */
        horizontalResize: function() {
            var availableSpace = this.domObj.getContentBoxSize().width;
            var overallWidth = availableSpace;
            var i,e,jxo;
            for (i=0; i<this.bars.length; i++) {
                var bar = this.bars[i];
                var size = bar.retrieve('size');
                if (!size || size.width == 0) {
                    size = bar.getBorderBoxSize();
                    bar.store('size',size);
                }
                availableSpace -= size.width;
            }
    
            var nVariable = 0, w = 0;
            for (i=0; i<this.elements.length; i++) {
                e = this.elements[i];
                jxo = e.retrieve('jxLayout').options;
                if (jxo.width != null) {
                    availableSpace -= parseInt(jxo.width,10);
                } else {
                    w = 0;
                    if (jxo.right != 0 ||
                        jxo.left != 0) {
                        w = e.getBorderBoxSize().width;
                    }
    
                    availableSpace -= w;
                    nVariable++;
                }
            }
    
            if (nVariable == 0) { /* all fixed */
                /* stick all available space in the last one */
                availableSpace += jxo.width;
                jxo.width = null;
                nVariable = 1;
            }
    
            var amount = parseInt(availableSpace / nVariable,10);
            /* account for rounding errors */
            var remainder = availableSpace % nVariable;
    
            var leftPadding = this.domObj.measure(function(){
                var m = this.getSizes(['padding'], ['left']);
                return m.padding.left;
            });
    
            var currentPosition = 0;
    
            for (i=0; i<this.elements.length; i++) {
                 e = this.elements[i];
                 var jxl = e.retrieve('jxLayout');
                 jxo = jxl.options;
                 if (jxo.width != null) {
                     jxl.resize({left: currentPosition});
                     currentPosition += jxo.width;
                 } else {
                     var a = amount;
                     if (nVariable == 1) {
                         a += remainder;
                     }
                     nVariable--;
    
                     if (jxo.right != 0 || jxo.left != 0) {
                         w = e.getBorderBoxSize().width + a;
                     } else {
                         w = a;
                     }
    
                     if (w < 0) {
                         if (nVariable > 0) {
                             amount = amount + w/nVariable;
                         }
                         w = 0;
                     }
                     if (w < jxo.minWidth) {
                         if (nVariable > 0) {
                             amount = amount + (w - jxo.minWidth)/nVariable;
                         }
                         w = jxo.minWidth;
                     }
                     if (jxo.maxWidth >= 0 && w > jxo.maxWidth) {
                         if (nVariable > 0) {
                             amount = amount + (w - jxo.maxWidth)/nVariable;
                         }
                         w = e.options.maxWidth;
                     }
    
                     var r = overallWidth - currentPosition - w;
                     jxl.resize({left: currentPosition, right: r});
                     currentPosition += w;
                 }
                 var rightBar = e.retrieve('rightBar');
                 if (rightBar) {
                     rightBar.setStyle('left', leftPadding + currentPosition);
                     currentPosition += rightBar.retrieve('size').width;
                 }
             }
        },
    
        /**
         * Method: verticalResize
         * Resize a vertically layed out container.
         */
        verticalResize: function() {
            var availableSpace = this.domObj.getContentBoxSize().height;
            var overallHeight = availableSpace;
            var i,e,jxo;
            for (i=0; i<this.bars.length; i++) {
                var bar = this.bars[i];
                var size = bar.retrieve('size');
                if (!size || size.height == 0) {
                    size = bar.getBorderBoxSize();
                    bar.store('size', size);
                }
                availableSpace -= size.height;
            }
    
            var nVariable = 0, h=0;
            for (i=0; i<this.elements.length; i++) {
                e = this.elements[i];
                jxo = e.retrieve('jxLayout').options;
                if (jxo.height != null) {
                    availableSpace -= parseInt(jxo.height,10);
                } else {
                    if (jxo.bottom != 0 || jxo.top != 0) {
                        h = e.getBorderBoxSize().height;
                    }
    
                    availableSpace -= h;
                    nVariable++;
                }
            }
    
            if (nVariable == 0) { /* all fixed */
                /* stick all available space in the last one */
                availableSpace += jxo.height;
                jxo.height = null;
                nVariable = 1;
            }
    
            var amount = parseInt(availableSpace / nVariable,10);
            /* account for rounding errors */
            var remainder = availableSpace % nVariable;
    
            var paddingTop = this.domObj.measure(function(){
                var m = this.getSizes(['padding'], ['top']);
                return m.padding.top;
            });
    
            var currentPosition = 0;
    
            for (i=0; i<this.elements.length; i++) {
                 e = this.elements[i];
                 var jxl = e.retrieve('jxLayout');
                 jxo = jxl.options;
                 if (jxo.height != null) {
                     jxl.resize({top: currentPosition});
                     currentPosition += jxo.height;
                 } else {
                     var a = amount;
                     if (nVariable == 1) {
                         a += remainder;
                     }
                     nVariable--;
    
                     h = 0;
                     if (jxo.bottom != 0 || jxo.top != 0) {
                         h = e.getBorderBoxSize().height + a;
                     } else {
                         h = a;
                     }
    
                     if (h < 0) {
                         if (nVariable > 0) {
                             amount = amount + h/nVariable;
                         }
                         h = 0;
                     }
                     if (h < jxo.minHeight) {
                         if (nVariable > 0) {
                             amount = amount + (h - jxo.minHeight)/nVariable;
                         }
                         h = jxo.minHeight;
                     }
                     if (jxo.maxHeight >= 0 && h > jxo.maxHeight) {
                         if (nVariable > 0) {
                             amount = amount + (h - jxo.maxHeight)/nVariable;
                         }
                         h = jxo.maxHeight;
                     }
    
                     var r = overallHeight - currentPosition - h;
                     jxl.resize({top: currentPosition, bottom: r});
                     currentPosition += h;
                 }
                 var rightBar = e.retrieve('rightBar');
                 if (rightBar) {
                     rightBar.style.top = paddingTop + currentPosition + 'px';
                     currentPosition += rightBar.retrieve('size').height;
                 }
             }
        },
        
        changeText: function (lang) {
            this.parent();
            this.bars.each(function(bar){
                document.id(bar).set('title', this.getText({set:'Jx',key:'splitter',value:'barToolTip'}));
            },this);	
        }
    });
    
    if (base.global) {
        base.global.Splitter = module.exports;
    }
    
});

/*
---

name: Jx.List

description: A class that is used to manage lists of DOM elements

license: MIT-style license.

requires:
 - Jx.Object
 - Jx.Selection

provides: [Jx.List]

...
 */
// $Id$
/**
 * Class: Jx.List
 *
 * Manage a list of DOM elements and provide an API and events for managing
 * those items within a container.  Works with Jx.Selection to manage
 * selection of items in the list.  You have two options for managing
 * selections.  The first, and default, option is to specify select: true
 * in the constructor options and any of the <Jx.Selection> options as well.
 * This will create a default Jx.Selection object to manage selections.  The
 * second option is to pass a Jx.Selection object as the third constructor
 * argument.  This allows sharing selection between multiple lists.
 *
 * Example:
 * (code)
 * var list = new Jx.List('container',{
 *   hover: true,
 *   select: true,
 *   onSelect: function(el) {
 *     alert(el.get('html'));
 *   }
 * });
 * list.add(new Element('li', {html:'1'}));
 * list.add(new Element('li', {html:'2'}));
 * list.add(new Element('li', {html:'3'}));
 *
 * (end)
 *
 * Events:
 * add - fired when an item is added
 * remove - fired when an item is removed
 * mouseenter - fired when the user mouses over an element
 * mouseleave - fired when the user mouses out of an element
 * select - fired when an item is selected
 * unselect - fired when an item is selected
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/list', function(require, exports, module){

    var base = require("../base"),
        jxObject = require("./object"),
        Selection = require("./selection");
        
    var list = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.List',
        /**
         * Constructor: Jx.List
         * create a new instance of Jx.List
         *
         * Parameters:
         * container - {Mixed} an element reference or id of an element that will
         * contain the items in the list
         * options - {Object} an object containing optional parameters
         * selection - {<Jx.Selection>} null or a Jx.Selection object. If the
         * select option is set to true, then list will use this selection object
         * to track selections or create its own if no selection object is
         * supplied.
         */
        parameters: ['container', 'options', 'selection'],
        /* does this object own the selection object (and should clean it up) */
        ownsSelection: false,
        /**
         * APIProperty: container
         * the element that will contain items as they are added
         */
        container: null,
        /**
         * APIProperty: selection
         * <Jx.Selection> a selection object if selection is enabled
         */
        selection: null,
        options: {
            /**
             * Option: items
             * an array of items to add to the list right away
             */
            items: null,
            /**
             * Option: hover
             * {Boolean} default false.  If set to true, the wrapper element will
             * obtain the defined hoverClass if set and mouseenter/mouseleave
             * events will be emitted when the user hovers over and out of elements
             */
            hover: false,
            /**
             * Option: hoverClass
             * the CSS class name to add to the wrapper element when the mouse is
             * over an item
             */
            hoverClass: 'jxHover',
    
            /**
             * Option: press
             * {Boolean} default false.  If set to true, the wrapper element will
             * obtain the defined pressClass if set and mousedown/mouseup
             * events will be emitted when the user clicks on elements
             */
            press: false,
            /**
             * Option: pressedClass
             * the CSS class name to add to the wrapper element when the mouse is
             * down on an item
             */
            pressClass: 'jxPressed',
    
            /**
             * Option: select
             * {Boolean} default false.  If set to true, the wrapper element will
             * obtain the defined selectClass if set and select/unselect events
             * will be emitted when items are selected and unselected.  For other
             * selection objects, see <Jx.Selection>
             */
            select: false
        },
    
        /**
         * Method: init
         * internal method to initialize this object
         */
        init: function() {
            this.container = document.id(this.options.container);
            this.container.store('jxList', this);
    
            var target = this,
                options = this.options,
                isEnabled = function(el) {
                    var item = el.retrieve('jxListTargetItem') || el;
                    return !item.hasClass('jxDisabled');
                },
                isSelectable = function(el) {
                    var item = el.retrieve('jxListTargetItem') || el;
                    return !item.hasClass('jxUnselectable');
                };
            this.bound = Object.merge({},this.bound, {
                mousedown: function() {
                    if (isEnabled(this)) {
                        this.addClass(options.pressClass);
                        target.fireEvent('mousedown', this, target);
                    }
                },
                mouseup: function() {
                    if (isEnabled(this)) {
                        this.removeClass(options.pressClass);
                        target.fireEvent('mouseup', this, target);
                    }
                },
                mouseenter: function() {
                    if (isEnabled(this)) {
                        this.addClass(options.hoverClass);
                        target.fireEvent('mouseenter', this, target);
                    }
                },
                mouseleave: function() {
                    if (isEnabled(this)) {
                        this.removeClass(options.hoverClass);
                        target.fireEvent('mouseleave', this, target);
                    }
                },
                keydown: function(e) {
                    if (e.key == 'enter' && isEnabled(this)) {
                        this.addClass('jxPressed');
                    }
                },
                keyup: function(e) {
                    if (e.key == 'enter' && isEnabled(this)) {
                        this.removeClass('jxPressed');
                    }
                },
                click: function (e) {
                    if (target.selection &&
                        isEnabled(this) &&
                        isSelectable(this)) {
                        target.selection.select(this, target);
                    }
                    target.fireEvent('click', this, target);
                },
                select: function(item) {
                    if (isEnabled(item)) {
                        var itemTarget = item.retrieve('jxListTargetItem') || item;
                        target.fireEvent('select', itemTarget);
                    }
                },
                unselect: function(item) {
                    if (isEnabled(item)) {
                        var itemTarget = item.retrieve('jxListTargetItem') || item;
                        target.fireEvent('unselect', itemTarget);
                    }
                },
                contextmenu: function(e) {
                  var cm = this.retrieve('jxContextMenu');
                  if (cm) {
                    cm.show(e);
                    this.removeClass(options.pressClass);
                  }
                  e.stop();
                }
            });
    
            if (options.selection) {
                this.setSelection(options.selection);
                options.select = true;
            } else if (options.select) {
                this.selection = new Selection(options);
                this.ownsSelection = true;
            }
    
            if (options.items !== undefined && options.items !== null) {
                this.add(options.items);
            }
        },
    
        /**
         * Method: cleanup
         * destroy the list and release anything it references
         */
        cleanup: function() {
            this.container.getChildren().each(function(item){
                this.remove(item);
            }, this);
            if (this.selection && this.ownsSelection) {
                this.selection.removeEvents();
                this.selection.destroy();
            }
            this.setSelection(null);
            this.container.eliminate('jxList');
            var bound = this.bound;
            bound.mousedown=null;
            bound.mouseup=null;
            bound.mouseenter=null;
            bound.mouseleave=null;
            bound.keydown=null;
            bound.keyup=null;
            bound.click=null;
            bound.select=null;
            bound.unselect=null;
            bound.contextmenu=null;
            this.parent();
        },
    
        /**
         * APIMethod: add
         * add an item to the list of items at the specified position
         *
         * Parameters:
         * item - {mixed} the object to add, a DOM element or an
         * object that provides a getElement method.  An array of items may also
         * be provided.  All items are inserted sequentially at the indicated
         * position.
         * position - {mixed} optional, the position to add the element, either
         * an integer position in the list or another item to place this item
         * after
         */
        add: function(item, position) {
            if (typeOf(item) == 'array') {
                item.each(function(what){
                  this.add(what, position);
                }.bind(this) );
                return;
            }
            /* the element being wrapped */
            var el = document.id(item),
                target = el.retrieve('jxListTarget') || el,
                bound = this.bound,
                options = this.options,
                container = this.container;
            if (target) {
                target.store('jxListTargetItem', el);
                target.addEvents({
                  contextmenu: this.bound.contextmenu
                });
                if (options.press && options.pressClass) {
                    target.addEvents({
                        mousedown: bound.mousedown,
                        mouseup: bound.mouseup,
                        keyup: bound.keyup,
                        keydown: bound.keydown
                    });
                }
                if (options.hover && options.hoverClass) {
                    target.addEvents({
                        mouseenter: bound.mouseenter,
                        mouseleave: bound.mouseleave
                    });
                }
                if (this.selection) {
                    target.addEvents({
                        click: bound.click
                    });
                }
                if (position !== undefined && position !== null) {
                    if (typeOf(position) == 'number') {
                        if (position < container.childNodes.length) {
                            el.inject(container.childNodes[position],'before');
                        } else {
                            el.inject(container, 'bottom');
                        }
                    } else if (container.contains(document.id(position))) {
                        el.inject(position,'after');
                    }
                    this.fireEvent('add', item, this);
                } else {
                    el.inject(container, 'bottom');
                    this.fireEvent('add', item, this);
                }
                if (this.selection) {
                    this.selection.defaultSelect(el);
                }
            }
        },
        /**
         * APIMethod: remove
         * remove an item from the list of items
         *
         * Parameters:
         * item - {mixed} the item to remove or the index of the item to remove.
         * An array of items may also be provided.
         *
         * Returns:
         * {mixed} the item that was removed or null if the item is not a member
         * of this list.
         */
        remove: function(item) {
            var el = document.id(item),
                target;
            if (el && this.container.contains(el)) {
                this.unselect(el, true);
                el.dispose();
                target = el.retrieve('jxListTarget') || el;
                target.removeEvents(this.bound);
                this.fireEvent('remove', item, this);
                return item;
            }
            return null;
        },
        /**
         * APIMethod: replace
         * replace one item with another
         *
         * Parameters:
         * item - {mixed} the item to replace or the index of the item to replace
         * withItem - {mixed} the object, DOM element, Jx.Object or an object
         * implementing getElement to add
         *
         * Returns:
         * {mixed} the item that was removed
         */
        replace: function(item, withItem) {
            if (this.container.contains(document.id(item))) {
                this.add(withItem, item);
                this.remove(item);
            }
        },
        /**
         * APIMethod: indexOf
         * find the index of an item in the list
         *
         * Parameters:
         * item - {mixed} the object, DOM element, Jx.Object or an object
         * implementing getElement to find the index of
         *
         * Returns:
         * {integer} the position of the item or -1 if not found
         */
        indexOf: function(item) {
            return Array.from(this.container.childNodes).indexOf(item);
        },
        /**
         * APIMethod: count
         * returns the number of items in the list
         */
        count: function() {
            return this.container.childNodes.length;
        },
        /**
         * APIMethod: items
         * returns an array of the items in the list
         */
        items: function() {
            return Array.from(this.container.childNodes);
        },
        /**
         * APIMethod: each
         * applies the supplied function to each item
         *
         * Parameters:
         * func - {function} the function to apply, it will receive the item and
         * index of the item as parameters
         * context - {object} the context to execute the function in, null by
         * default.
         */
        each: function(f, context) {
            Array.from(this.container.childNodes).each(f, context);
        },
        /**
         * APIMethod: select
         * select an item
         *
         * Parameters:
         * item - {mixed} the object to select, a DOM element, a Jx.Object, or an
         * object that provides a getElement method.  An array of items may also be
         * provided.
         */
        select: function(item) {
            if (this.selection) {
                this.selection.select(item);
            }
        },
        /**
         * APIMethod: unselect
         * unselect an item or items
         *
         * Parameters:
         * item - {mixed} the object to select, a DOM element, a Jx.Object, or an
         * object that provides a getElement method.  An array of elements may also
         * be provided.
         * force - {Boolean} force deselection even if this violates the minimum
         * selection constraint (used internally when removing items)
         */
        unselect: function(item, force) {
            if (this.selection) {
                this.selection.unselect(item);
            }
        },
        /**
         * APIMethod: selected
         * returns the selected item or items
         *
         * Returns:
         * {mixed} the selected item or an array of selected items
         */
        selected: function() {
            return this.selection ? this.selection.selected : [];
        },
        /**
         * APIMethod: empty
         * clears all of the items from the list
         */
        empty: function(){
            this.container.getChildren().each(function(item){
                this.remove(item);
            }, this);
        },
        /**
         * APIMethod: setSelection
         * sets the <Jx.Selection> object that this list will use for selection
         * events.
         *
         * Parameters:
         * {<Jx.Selection>} the selection object, or null to remove it.
         */
        setSelection: function(selection) {
            var sel = this.selection;
            if (sel == selection) return;
    
            if (sel) {
                sel.removeEvents(this.bound);
                if (this.ownsSelection) {
                    sel.destroy();
                    this.ownsSelection = false;
                }
            }
    
            this.selection = selection;
            if (selection) {
                selection.addEvents({
                    select: this.bound.select,
                    unselect: this.bound.unselect
                });
            }
        }
    
    });
    
    if (base.global) {
        base.global.List = list;
    }

});

/*
---

name: Jx.Menu

description: A main menu as opposed to a sub menu that lives inside the menu.

license: MIT-style license.

requires:
 - Jx.Button
 - Jx.List

provides: [Jx.Menu]

css:
 - menu

images:
 - flyout_chrome.png
 - emblems.png
...
 */
// $Id$
/**
 * Class: Jx.Menu
 *
 * Extends: <Jx.Widget>
 *
 * A main menu as opposed to a sub menu that lives inside the menu.
 *
 * TODO: Jx.Menu
 * revisit this to see if Jx.Menu and Jx.SubMenu can be merged into
 * a single implementation.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/menu', function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        List = require("./list"),
        Button = require("./button");
        
    var menu = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Menu',
        // Binds: ['onMouseEnter','onMouseLeave','hide','keypressHandler'],
        /**
         * Property: button
         * {<Jx.Button>} The button that represents this menu in a toolbar and
         * opens the menu.
         */
        button : null,
        /**
         * Property: subDomObj
         * {HTMLElement} the HTML element that contains the menu items
         * within the menu.
         */
        subDomObj : null,
        /**
         * Property: list
         * {<Jx.List>} the list of items in the menu
         */
        list: null,
    
        parameters: ['buttonOptions', 'options'],
    
        options: {
            /**
             * Option: exposeOnHover
             * {Boolean} default false, if set to true the menu will show
             * when the mouse hovers over it rather than when it is clicked.
             */
            exposeOnHover: false,
            /**
             * Option: hideDelay
             * {Integer} default 0, if greater than 0, this is the number of
             * milliseconds to delay before hiding a menu when the mouse leaves
             * the menu button or list.
             */
            hideDelay: 0,
            template: "<div class='jxMenuContainer'><ul class='jxMenu'></ul></div>",
            buttonTemplate: '<span class="jxButtonContainer"><a class="jxButton jxButtonMenu jxDiscloser"><span class="jxButtonContent"><img class="jxButtonIcon" src="'+base.aPixel.src+'"><span class="jxButtonLabel"></span></span></a></span>',
            position: {
                horizontal: ['left left'],
                vertical: ['bottom top', 'top bottom']
            }
        },
    
        classes: {
            contentContainer: 'jxMenuContainer',
            subDomObj: 'jxMenu'
        },
        
        init: function() {
            this.bound.stop = function(e){e.stop();};
            this.bound.remove = function(item) {if (item.setOwner) item.setOwner(null);};
            this.bound.show = this.show.bind(this);
            this.bound.mouseenter = this.onMouseEnter.bind(this);
            this.bound.mouseleave = this.onMouseLeave.bind(this);
            this.bound.keypress = this.keypressHandler.bind(this);
            this.bound.hide = this.hide.bind(this);
            this.parent();
        },
    
        /**
         * APIMethod: render
         * Create a new instance of Jx.Menu.
         */
        render : function() {
            this.parent();
            if (!menu.Menus) {
                menu.Menus = [];
            }
    
            this.contentClone = this.contentContainer.clone();
            this.list = new List(this.subDomObj, {
                onRemove: this.bound.remove
            });
    
            /* if options are passed, make a button inside an LI so the
               menu can be embedded inside a toolbar */
            if (this.options.buttonOptions) {
                this.button = new Button(Object.merge({},this.options.buttonOptions,{
                    template: this.options.buttonTemplate,
                    onClick:this.bound.show
                }));
    
                this.button.domA.addEvent('mouseenter', this.bound.mouseenter);
                this.button.domA.addEvent('mouseleave', this.bound.mouseleave);
    
                this.domObj = this.button.domObj;
                this.domObj.store('jxMenu', this);
            }
            
            this.subDomObj.addEvent('mouseenter', this.bound.mouseenter);
            this.subDomObj.addEvent('mouseleave', this.bound.mouseleave);
            this.subDomObj.store('jxSubMenu', this);
            
        },
        cleanup: function() {
          if (this.hideTimer) {
            window.clearTimeout(this.hideTimer);
          }
          this.list.removeEvent('remove', this.bound.remove);
          this.list.destroy();
          this.list = null;
          if (this.button) {
            this.domObj.eliminate('jxMenu');
            this.domObj = null;
            this.button.removeEvent('click', this.bound.show);
            this.button.domA.removeEvents({
              mouseenter: this.bound.mouseenter,
              mouseleave: this.bound.mouseleave
            });
            
            this.button.destroy();
            this.button = null;
          }
          this.subDomObj.removeEvents({
            mouseenter: this.bound.mouseenter,
            mouseleave: this.bound.mouseleave
          });
          this.subDomObj.removeEvents();
          this.contentContainer.removeEvent('contextmenu', this.bound.stop);
          this.subDomObj.destroy();
          this.contentContainer.destroy();
          this.contentClone.destroy();
          this.bound.remove = null;
          this.bound.show = null;
          this.bound.stop = null;
          this.bound.mouseenter = null;
          this.bound.mouseleave = null;
          this.bound.keypress = null;
          this.bound.hide = null;
          this.parent();
        },
        /**
         * APIMethod: add
         * Add menu items to the sub menu.
         *
         * Parameters:
         * item - {<Jx.MenuItem>} the menu item to add.  Multiple menu items
         *     can be added by passing an array of menu items.
         * position - the index to add the item at, defaults to the end of the
         *     menu
         */
        add: function(item, position, owner) {
            if (typeOf(item) == 'array') {
                item.each(function(i){
                    if (i.setOwner) {
                        i.setOwner(owner||this);
                    }
                }, this);
            } else {
                if (item.setOwner) {
                    item.setOwner(owner||this);
                }
            }
            this.list.add(item, position);
            return this;
        },
        /**
         * APIMethod: remove
         * Remove a menu item from the menu
         *
         * Parameters:
         * item - {<Jx.MenuItem>} the menu item to remove
         */
        remove: function(item) {
            this.list.remove(item);
            return this;
        },
        /**
         * APIMethod: replace
         * Replace a menu item with another menu item
         *
         * Parameters:
         * what - {<Jx.MenuItem>} the menu item to replace
         * withWhat - {<Jx.MenuItem>} the menu item to replace it with
         */
        replace: function(item, withItem) {
            this.list.replace(item, withItem);
            return this;
        },
        /**
         * APIMethod: empty
         * Empty the menu of items
         */
        empty: function() {
          this.list.each(function(item){
            if (item.empty) {
              item.empty();
            }
            if (item.setOwner) {
                item.setOwner(null);
            }
          }, this);
          this.list.empty();
        },
        /**
         * Method: deactivate
         * Deactivate the menu by hiding it.
         */
        deactivate: function() {this.hide();},
        /**
         * Method: onMouseOver
         * Handle the user moving the mouse over the button for this menu
         * by showing this menu and hiding the other menu.
         *
         * Parameters:
         * e - {Event} the mouse event
         */
        onMouseEnter: function(e) {
          if (this.hideTimer) {
            window.clearTimeout(this.hideTimer);
            this.hideTimer = null;
          }
          if (menu.Menus[0] && menu.Menus[0] != this) {
              this.show.delay(1,this);
          } else if (this.options.exposeOnHover) {
            if (menu.Menus[0] && menu.Menus[0] == this) {
              menu.Menus[0] = null;
            }
            this.show.delay(1,this);
          }
        },
        /**
         * Method: onMouseLeave
         * Handle the user moving the mouse off this button or menu by
         * starting the hide process if so configured.
         *
         * Parameters:
         * e - {Event} the mouse event
         */
        onMouseLeave: function(e) {
          if (this.options.hideDelay > 0) {
            this.hideTimer = (function(){
              this.deactivate();
            }).delay(this.options.hideDelay, this);
          }
        },
        
        /**
         * Method: eventInMenu
         * determine if an event happened inside this menu or a sub menu
         * of this menu.
         *
         * Parameters:
         * e - {Event} the mouse event
         *
         * Returns:
         * {Boolean} true if the event happened in the menu or
         * a sub menu of this menu, false otherwise
         */
        eventInMenu: function(e) {
            var target = document.id(e.target);
            if (!target) {
                return false;
            }
            if (target.descendantOf(this.domObj) ||
                target.descendantOf(this.subDomObj)) {
                return true;
            } else {
                var ul = target.getParent('ul');
                if (ul) {
                    var sm = ul.retrieve('jxSubMenu');
                    if (sm) {
                        if (sm.eventInMenu(e)) {
                          return true;
                        }
                        var owner = sm.owner;
                        while (owner) {
                            if (owner == this) {
                                return true;
                            }
                            owner = owner.owner;
                        }
                    }
                }
                return false;
            }
        },
    
        /**
         * APIMethod: hide
         * Hide the menu.
         *
         * Parameters:
         * e - {Event} the mouse event
         */
        hide: function(e) {
            if (e) {
                if (this.visibleItem && this.visibleItem.eventInMenu) {
                    if (this.visibleItem.eventInMenu(e)) {
                        return;
                    }
                } else if (this.eventInMenu(e)) {
                    return;
                }
            }
            if (menu.Menus[0] && menu.Menus[0] == this) {
                menu.Menus[0] = null;
            }
            if (this.button && this.button.domA) {
                this.button.domA.removeClass(this.button.options.activeClass);
            }
            if (this.hideTimer) {
              window.clearTimeout(this.hideTimer);
            }
            this.list.each(function(item){item.retrieve('jxMenuItem').hide(e);});
            document.removeEvent('mousedown', this.bound.hide);
            document.removeEvent('keydown', this.bound.keypress);
            this.unstack(this.contentContainer);
            this.contentContainer.dispose();
            this.visibleItem = null;
            this.fireEvent('hide', this);
        },
        /**
         * APIMethod: show
         * Show the menu
         */
        show : function() {
            if (this.button) {
                if (menu.Menus[0]) {
                    if (menu.Menus[0] != this) {
                        menu.Menus[0].button.blur();
                        menu.Menus[0].hide();
                    } else {
                        this.hide();
                        return;
                    }
                }
                menu.Menus[0] = this;
                this.button.focus();
                if (this.list.count() == 0) {
                    return;
                }
            }
            if (this.hideTimer) {
              window.clearTimeout(this.hideTimer);
            }
    
            this.subDomObj.dispose();
            this.contentContainer.destroy();
            this.contentContainer = this.contentClone.clone();
            this.contentContainer.empty().adopt(this.subDomObj);
            this.contentContainer.addEvent('contextmenu', this.bound.stop);
            this.contentContainer.setStyle('display','none');
            document.id(document.body).adopt(this.contentContainer);
            this.contentContainer.setStyles({
                visibility: 'hidden',
                display: 'block'
            });
            this.contentContainer.setContentBoxSize(this.subDomObj.getMarginBoxSize());
            this.showChrome(this.contentContainer);
    
            this.position(this.contentContainer, this.domObj, Object.merge({},{
                offsets: this.chromeOffsets
            }, this.options.position));
            this.stack(this.contentContainer);
            this.contentContainer.setStyle('visibility','visible');
    
            if (this.button && this.button.domA) {
                this.button.domA.addClass(this.button.options.activeClass);
            }
    
            /* fix bug in IE that closes the menu as it opens 
             * because of bubbling (I think)
             */
            document.addEvent('mousedown', this.bound.hide);
            document.addEvent('keydown', this.bound.keypress);
            this.fireEvent('show', this);
        },
        /**
         * APIMethod: setVisibleItem
         * Set the sub menu that is currently open
         *
         * Parameters:
         * obj- {<Jx.SubMenu>} the sub menu that just became visible
         */
        setVisibleItem: function(obj) {
            if (this.hideTimer) {
              window.clearTimeout(this.hideTimer);
            }
            if (this.visibleItem != obj) {
                if (this.visibleItem && this.visibleItem.hide) {
                    this.visibleItem.hide();
                }
                this.visibleItem = obj;
                this.visibleItem.show();
            }
        },
    
        /* hide flyout if the user presses the ESC key */
        keypressHandler: function(e) {
            e = new Event(e);
            if (e.key == 'esc') {
                this.hide();
            }
        },
        /**
         * APIMethod: isEnabled
         * This returns true if the menu is enabled, false otherwise
         *
         * Returns:
         * {Boolean} whether the menu is enabled or not
         */
        isEnabled: function() {
            return this.button ? this.button.isEnabled() : this.options.enabled ;
        },
    
        /**
         * APIMethod: setEnabled
         * enable or disable the menu.
         *
         * Parameters:
         * enabled - {Boolean} the new enabled state of the menu
         */
        setEnabled: function(enabled) {
            return this.button ? this.button.setEnabled(enabled) : this.options.enable;
        },
        /**
         * APIMethod: isActive
         * returns true if the menu is open.
         *
         * Returns:
         * {Boolean} the active state of the menu
         */
        isActive: function() {
            return this.button ? this.button.isActive() : this.options.active;
        },
        /**
         * APIMethod: setActive
         * Set the active state of the menu
         *
         * Parameters:
         * active - {Boolean} the new active state of the menu
         */
        setActive: function(active) {
            if (this.button) {
              this.button.setActive(active);
            }
        },
        /**
         * APIMethod: setImage
         * set the image of this menu to a new image URL
         *
         * Parameters:
         * path - {String} the new url to use as the image for this menu
         */
        setImage: function(path) {
            if (this.button) {
              this.button.setImage(path);
            }
        },
        /**
         * APIMethod: setLabel
         *
         * sets the text of the menu.
         *
         * Parameters:
         *
         * label - {String} the new label for the menu
         */
        setLabel: function(label) {
            if (this.button) {
              this.button.setLabel(label);
            }
        },
        /**
         * APIMethod: getLabel
         *
         * returns the text of the menu.
         */
        getLabel: function() {
            return this.button ? this.button.getLabel() : '';
        },
        /**
         * APIMethod: setTooltip
         * sets the tooltip displayed by the menu
         *
         * Parameters:
         * tooltip - {String} the new tooltip
         */
        setTooltip: function(tooltip) {
            if (this.button) {
              this.button.setTooltip(tooltip);
            }
        },
        /**
         * APIMethod: focus
         * capture the keyboard focus on this menu
         */
        focus: function() {
            if (this.button) {
              this.button.focus();
            }
        },
        /**
         * APIMethod: blur
         * remove the keyboard focus from this menu
         */
        blur: function() {
            if (this.button) {
              this.button.blur();
            }
        }
    });

    if (base.global) {
        base.global.Menu = menu;
    }
    
});

/*
---

name: Jx.Menu.Item

description: A menu item is a single entry in a menu.

license: MIT-style license.

requires:
 - Jx.Menu

provides: [Jx.Menu.Item]

images:
 - menuitem.png
...
 */
// $Id$
/**
 * Class: Jx.Menu.Item
 *
 * Extends: <Jx.Button>
 *
 * A menu item is a single entry in a menu.  It is typically composed of
 * a label and an optional icon.  Selecting the menu item emits an event.
 *
 * Jx.Menu.Item is represented by a <Jx.Button> with type MenuItem and the
 * associated CSS changes noted in <Jx.Button>.  The container of a MenuItem
 * is an 'li' element.
 *
 * Example:
 * (code)
 * (end)
 *
 * Events:
 * click - fired when the menu item is clicked.
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/menu/item', function(require, exports, module){
    
    var base = require("../../base"),
        Button = require("../button");
        
    var item = module.exports = new Class({
        Extends: Button,
        Family: 'Jx.Menu.Item',
        /**
         * Property: owner
         * {<Jx.SubMenu> or <Jx.Menu>} the menu that contains the menu item.
         */
        owner: null,
        options: {
            //image: null,
            label: '&nbsp;',
            toggleClass: 'jxMenuItemToggle',
            pressedClass: 'jxMenuItemPressed',
            activeClass: 'jxMenuItemActive',
            /* Option: template
             * the HTML structure of the button.  As a minimum, there must be a
             * containing element with a class of jxMenuItemContainer and an
             * internal element with a class of jxMenuItem.  jxMenuItemIcon and
             * jxMenuItemLabel are used if present to put the image and label into
             * the button.
             */
            template: '<li class="jxMenuItemContainer"><a class="jxMenuItem"><span class="jxMenuItemContent"><img class="jxMenuItemIcon" src="'+base.aPixel.src+'"><span class="jxMenuItemLabel"></span></span></a></li>'
        },
        classes: {
            domObj:'jxMenuItemContainer',
            domA: 'jxMenuItem',
            domImg: 'jxMenuItemIcon',
            domLabel: 'jxMenuItemLabel'
        },
        init: function() {
          this.bound.mouseover = this.onMouseOver.bind(this);
          this.parent();
        },
        /**
         * APIMethod: render
         * Create a new instance of Jx.Menu.Item
         */
        render: function() {
            if (!this.options.image) {
                this.options.image = base.aPixel.src;
            }
            this.parent();
            if (this.options.image && this.options.image != base.aPixel.src) {
                this.domObj.removeClass(this.options.toggleClass);
            }
            if (this.options.target) {
              this.domA.set('target', this.options.target);
            }
            this.domObj.addEvent('mouseover', this.bound.mouseover);
            this.domObj.store('jxMenuItem', this);
        },
        cleanup: function() {
          this.domObj.eliminate('jxMenuItem');
          this.domObj.removeEvent('mouseover', this.bound.mouseover);
          this.bound.mouseover = null;
          this.owner = null;
          this.parent();
        },
        /**
         * Method: setOwner
         * Set the owner of this menu item
         *
         * Parameters:
         * obj - {Object} the new owner
         */
        setOwner: function(obj) {
            this.owner = obj;
        },
        /**
         * Method: hide
         * Hide the menu item.
         */
        hide: function() {this.blur.delay(1,this);},
        /**
         * Method: show
         * Show the menu item
         */
        show: function(){},
        /**
         * Method: clicked
         * Handle the user clicking on the menu item, overriding the <Jx.Button::clicked>
         * method to facilitate menu tracking
         *
         * Parameters:
         * obj - {Object} an object containing an event property that was the user
         * event.
         */
        clicked: function(obj) {
            var href = this.options.href && this.options.href.indexOf('javascript:') != 0;
            if (this.options.enabled) {
              if (!href) {
                if (this.options.toggle) {
                    this.setActive.delay(1,this,!this.options.active);
                }
                this.fireEvent.delay(1, this, ['click', {obj: this}]);
                this.blur();
              }
              if (this.owner && this.owner.deactivate) {
                  this.owner.deactivate.delay(1, this.owner, obj.event);
              }
            }
            return href ? true : false;
        },
        /**
         * Method: onmouseover
         * handle the mouse moving over the menu item
         */
        onMouseOver: function(e) {
            e.stop();
            if (this.owner && this.owner.setVisibleItem) {
                this.owner.setVisibleItem(this);
            }
            return false;
        },
        
        /**
         * APIMethod: changeText
         *
         * updates the label of the menu item on langChange Event for
         * Internationalization
         */
        changeText: function(lang) {
            this.parent();
            if (this.owner && this.owner.deactivate) {
                this.owner.deactivate();
            }
        }
    });

    if (base.global) {
        base.global.Menu.Item = item;
    }

});


/*
---

name: Jx.Toolbar

description: A toolbar is a container object that contains other objects such as buttons.

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.List

provides: [Jx.Toolbar]

css:
 - toolbar

images:
 - toolbar.png
...
 */
// $Id$
/**
 * Class: Jx.Toolbar
 *
 * Extends: <Jx.Widget>
 *
 * A toolbar is a container object that contains other objects such as
 * buttons.  The toolbar organizes the objects it contains automatically,
 * wrapping them as necessary.  Multiple toolbars may be placed within
 * the same containing object.
 *
 * Jx.Toolbar includes CSS classes for styling the appearance of a
 * toolbar to be similar to traditional desktop application toolbars.
 *
 * There is one special object, Jx.ToolbarSeparator, that provides
 * a visual separation between objects in a toolbar.
 *
 * While a toolbar is generally a *dumb* container, it serves a special
 * purpose for menus by providing some infrastructure so that menus can behave
 * properly.
 *
 * In general, almost anything can be placed in a Toolbar, and mixed with
 * anything else.
 *
 * Example:
 * The following example shows how to create a Jx.Toolbar instance and place
 * two objects in it.
 *
 * (code)
 * //myToolbarContainer is the id of a <div> in the HTML page.
 * function myFunction() {}
 * var myToolbar = new Jx.Toolbar('myToolbarContainer');
 *
 * var myButton = new Jx.Button(buttonOptions);
 *
 * var myElement = document.createElement('select');
 *
 * myToolbar.add(myButton, new Jx.ToolbarSeparator(), myElement);
 * (end)
 *
 * Events:
 * add - fired when one or more buttons are added to a toolbar
 * remove - fired when on eor more buttons are removed from a toolbar
 *
 * Implements:
 * Options
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/toolbar", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Container = null,
        Item = null,
        List = require("./list")
        
    var toolbar = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Toolbar',
        /**
         * Property: list
         * {<Jx.List>} the list that holds the items in this toolbar
         */
        list : null,
        /**
         * Property: domObj
         * {HTMLElement} the HTML element that the toolbar lives in
         */
        domObj : null,
        /**
         * Property: isActive
         * When a toolbar contains <Jx.Menu> instances, they want to know
         * if any menu in the toolbar is active and this is how they
         * find out.
         */
        active : false,
        options: {
            /* Option: position
             * the position of this toolbar in the container.  The position
             * affects some items in the toolbar, such as menus and flyouts, which
             * need to open in a manner sensitive to the position.  May be one of
             * 'top', 'right', 'bottom' or 'left'.  Default is 'top'.
             */
            position: 'top',
            /* Option: parent
             * a DOM element to add this toolbar to
             */
            parent: null,
            /* Option: autoSize
             * if true, the toolbar will attempt to set its size based on the
             * things it contains.  Default is false.
             */
            autoSize: false,
            /**
             * Option: align
             * Determines whether the toolbar is aligned left, center, or right.
             * Mutually exclusive with the scroll option. If scroll is set to true
             * this option does nothing. Default: 'left', valid values: 'left',
             * 'center', or 'right'
             */
            align: 'left',
            /* Option: scroll
             * if true, the toolbar may scroll if the contents are wider than
             * the size of the toolbar
             */
            scroll: true,
            template: '<ul class="jxToolbar"></ul>'
        },
        classes: {
            domObj: 'jxToolbar'
        },
        
        init: function(){
            //load any dependencies that we couldn't earlier...
            Container = require("./toolbar/container");
            Item = require("./toolbar/item");
            this.parent();
            
        },
        /**
         * APIMethod: render
         * Create a new instance of Jx.Toolbar.
         */
        render: function() {
            this.parent();
            this.domObj.store('jxToolbar', this);
            if (this.options.id !== undefined && this.options.id !== null) {
                this.domObj.id = this.options.id;
            }
    
            this.list = new List(this.domObj, {
                onAdd: function(item) {
                    this.fireEvent('add', this);
                }.bind(this),
                onRemove: function(item) {
                    this.fireEvent('remove', this);
                }.bind(this)
            });
    
            this.deactivateWatcher = this.deactivate.bind(this);
            if (this.options.items) {
                this.add(this.options.items);
            }
        },
    
        /**
         * Method: addTo
         * add this toolbar to a DOM element automatically creating a toolbar
         * container if necessary
         *
         * Parameters:
         * parent - the DOM element or toolbar container to add this toolbar to.
         */
        addTo: function(parent) {
            var tbc = document.id(parent).retrieve('jxBarContainer');
            if (!tbc) {
                tbc = new Container({
                    parent: parent,
                    position: this.options.position,
                    autoSize: this.options.autoSize,
                    align: this.options.align,
                    scroll: this.options.scroll
                });
            }
            tbc.add(this);
            return this;
        },
    
        /**
         * Method: add
         * Add an item to the toolbar.  If the item being added is a Jx component
         * with a domObj property, the domObj is added.  If the item being added
         * is an LI element, then it is given a CSS class of *jxToolItem*.
         * Otherwise, the thing is wrapped in a <Jx.ToolbarItem>.
         *
         * Parameters:
         * thing - {Object} the thing to add.  More than one thing can be added
         * by passing multiple arguments.
         */
        add: function( ) {
            Array.from(arguments).flatten().each(function(thing) {
                var item = thing;
                if (item.domObj) {
                    item = item.domObj;
                }
    
                if (item.tagName == 'LI') {
                    if (!item.hasClass('jxToolItem')) {
                        item.addClass('jxToolItem');
                    }
                } else {
                    item = new Item(thing);
                }
                this.list.add(item);
            }, this);
            
            //Update the size of the toolbar container.
            this.update();
            
            return this;
        },
        /**
         * Method: remove
         * remove an item from a toolbar.  If the item is not in this toolbar
         * nothing happens
         *
         * Parameters:
         * item - {Object} the object to remove
         *
         * Returns:
         * {Object} the item that was removed, or null if the item was not
         * removed.
         */
        remove: function(item) {
            if (item.domObj) {
                item = item.domObj;
            }
            var li = item.findElement('LI');
            this.list.remove(li);
            this.update();
            return this;
        },
        /**
         * APIMethod: empty
         * remove all items from the toolbar
         */
        empty: function() {
          this.list.each(function(item){this.remove(item);},this);
        },
        /**
         * Method: deactivate
         * Deactivate the Toolbar (when it is acting as a menu bar).
         */
        deactivate: function() {
            this.list.each(function(item){
                if (item.retrieve('jxMenu')) {
                    item.retrieve('jxMenu').hide();
                }
            });
            this.setActive(false);
        },
        /**
         * Method: isActive
         * Indicate if the toolbar is currently active (as a menu bar)
         *
         * Returns:
         * {Boolean}
         */
        isActive: function() {
            return this.active;
        },
        /**
         * Method: setActive
         * Set the active state of the toolbar (for menus)
         *
         * Parameters:
         * b - {Boolean} the new state
         */
        setActive: function(b) {
            this.isActive = b;
            if (this.isActive) {
                document.addEvent('click', this.deactivateWatcher);
            } else {
                document.removeEvent('click', this.deactivateWatcher);
            }
        },
        /**
         * Method: setVisibleItem
         * For menus, they want to know which menu is currently open.
         *
         * Parameters:
         * obj - {<Jx.Menu>} the menu that just opened.
         */
        setVisibleItem: function(obj) {
            if (this.visibleItem && this.visibleItem.hide && this.visibleItem != obj) {
                this.visibleItem.hide();
            }
            this.visibleItem = obj;
            if (this.isActive()) {
                this.visibleItem.show();
            }
        },
        
        showItem: function(item) {
            this.fireEvent('show', item);
        },
        /**
         * Method: update
         * Updates the size of the UL so that the size is always consistently the 
         * exact size of the size of the sum of the buttons. This will keep all of 
         * the buttons on one line.
         */
        update: function () {
            // if (['top','bottom'].contains(this.options.position)) {
            //     (function(){
            //         var s = 0;
            //         var children = this.domObj.getChildren();
            //         children.each(function(button){
            //             var size = button.getMarginBoxSize();
            //             s += size.width +0.5;
            //         },this);
            //         if (s !== 0) {
            //             this.domObj.setStyle('width', Math.round(s));
            //         } else {
            //             this.domObj.setStyle('width','auto');
            //         }
            //     }).delay(1,this);
            // }
            this.fireEvent('update');
        },
        changeText : function(lang) {
          this.update();
        }
    });
    
    if (base.global) {
        base.global.Toolbar = module.exports;
    }
});


/*
---

name: Jx.Toolbar.Container

description: A toolbar container contains toolbars.  This has an optional dependency on Fx.Tween that, if included, will allow toolbars that contain more elements than can be displayed to be smoothly scrolled left and right.  Without this optional dependency, the toolbar will jump in fixed increments rather than smoothly scrolling.

license: MIT-style license.

requires:
 - Jx.Toolbar
 - Jx.Button

optional:
 - Core/Fx.Tween

provides: [Jx.Toolbar.Container]

images:
 - emblems.png

...
 */
// $Id$
/**
 * Class: Jx.Toolbar.Container
 *
 * Extends: <Jx.Widget>
 *
 * A toolbar container contains toolbars.  A single toolbar container fills
 * the available space horizontally.  Toolbars placed in a toolbar container
 * do not wrap when they exceed the available space.
 *
 * Events:
 * add - fired when one or more toolbars are added to a container
 * remove - fired when one or more toolbars are removed from a container
 *
 * Implements:
 * Options
 * Events
 * {<Jx.Addable>}
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/toolbar/container", function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget"),
        Button = require("../button");
        
    var container = module.exports = new Class({

        Extends: Widget,
        Family: 'Jx.Toolbar.Container',
        Binds: ['update'],
        pluginNamespace: 'ToolbarContainer',
        /**
         * Property: domObj
         * {HTMLElement} the HTML element that the container lives in
         */
        domObj: null,
        options: {
            /* Option: parent
             * a DOM element to add this to
             */
            parent: null,
            /* Option: position
             * the position of the toolbar container in its parent, one of 'top',
             * 'right', 'bottom', or 'left'.  Default is 'top'
             */
            position: 'top',
            /* Option: autoSize
             * automatically size the toolbar container to fill its container.
             * Default is false
             */
            autoSize: false,
            /* Option: scroll
             * Control whether the user can scroll of the content of the
             * container if the content exceeds the size of the container.
             * Default is true.
             */
            scroll: true,
            /**
             * Option: align
             * Determines whether the toolbar is aligned left, center, or right.
             * Mutually exclusive with the scroll option. This option overrides
             * scroll if set to something other than the default. Default: 'left',
             * valid values are 'left','center', or 'right'
             */
            align: 'left',
            template: "<div class='jxBarContainer'><div class='jxBarControls'></div></div>",
            scrollerTemplate: "<div class='jxBarScroller'><div class='jxBarWrapper'></div></div>"
        },
        classes: {
            domObj: 'jxBarContainer',
            scroller: 'jxBarScroller',
            //used to hide the overflow of the wrapper
            wrapper: 'jxBarWrapper',
            controls: 'jxBarControls'
            //used to allow multiple toolbars to float next to each other
        },
    
        updating: false,
    
        /**
         * APIMethod: render
         * Create a new instance of Jx.Toolbar.Container
         */
        render: function() {
            this.parent();
            /* if a container was passed in, use it instead of the one from the
             * template
             */
            if (document.id(this.options.parent)) {
                this.elements = {
                    'jxBarContainer': document.id(this.options.parent)
                };
                var temp = this.domObj;
                this.domObj = this.elements['jxBarContainer'];
                this.domObj.addClass('jxBarContainer');
                this.domObj.grab(this.controls);
                temp.destroy();
                this.domObj.addEvent('sizeChange', this.update);
            }
    
            if (!['center', 'right'].contains(this.options.align) && this.options.scroll) {
                this.processElements(this.options.scrollerTemplate, this.classes);
                this.domObj.grab(this.scroller, 'top');
            }
            
            //So, for some reason, the alignment screws up the bar when in a panel (but not a dialog)
            this.domObj.addClass('jxToolbarAlign' + 
                    this.options.align.capitalize());
    
            /* this allows toolbars to add themselves to this bar container
             * once it already exists without requiring an explicit reference
             * to the toolbar container
             */
            this.domObj.store('jxBarContainer', this);
    
            if (['top', 'right', 'bottom', 'left'].contains(this.options.position)) {
                this.domObj.addClass('jxBar' +
                this.options.position.capitalize());
            } else {
                this.domObj.addClass('jxBarTop');
                this.options.position = 'top';
            }
    
            if (this.options.scroll && ['top', 'bottom'].contains(this.options.position)) {
                // make sure we update our size when we get added to the DOM
                this.addEvent('addTo', function(){
                  this.domObj.getParent().addEvent('sizeChange', this.update);
                  this.update();
                });
    
                this.scrollLeft = new Button({
                    image: base.aPixel.src
                }).addTo(this.controls, 'bottom');
                document.id(this.scrollLeft).addClass('jxBarScrollLeft');
                this.scrollLeft.addEvents({
                    click: this.scroll.bind(this, 'left')
                });
    
                this.scrollRight = new Button({
                    image: base.aPixel.src
                }).addTo(this.controls, 'bottom');
                document.id(this.scrollRight).addClass('jxBarScrollRight');
                this.scrollRight.addEvents({
                    click: this.scroll.bind(this, 'right')
                });
    
            } else if (this.options.scroll && ['left', 'right'].contains(this.options.position)) {
                //do we do scrolling up and down?
                //for now disable scroll in this case
                this.options.scroll = false;
            } else {
                this.options.scroll = false;
            }
    
            this.addEvent('add', this.update);
            if (this.options.toolbars) {
                this.add(this.options.toolbars);
            }
        },
    
        /**
         * APIMethod: update
         * Updates the scroller enablement dependent on the total size of the
         * toolbar(s).
         */
        update: function() {
            if (this.options.scroll) {
                if (['top', 'bottom'].contains(this.options.position)) {
                    var tbcSize = this.domObj.getContentBoxSize().width;
    
                    var s = 0;
                    //next check to see if we need the scrollers or not.
                    var children = this.wrapper.getChildren();
                    if (children.length > 0) {
                        children.each(function(tb) {
                            s += tb.getMarginBoxSize().width;
                        },
                        this);
    
                        var scrollerSize = tbcSize;
                        
                        //account for control size as we never hide it
                        scrollerSize -= this.controls.getMarginBoxSize().width;
    
                        if (s === 0) {
                            this.scrollLeft.setEnabled(false);
                            this.scrollRight.setEnabled(false);
                        } else {
    
    
                            var leftMargin = this.wrapper.getStyle('margin-left').toInt();
                            
                            if (leftMargin < 0) {
                                //has been scrolled left so activate the right scroller
                                this.scrollLeft.setEnabled(true);
                            } else {
                                //we don't need it
                                this.scrollLeft.setEnabled(false);
                            }
    
                            if (s + leftMargin > scrollerSize) {
                                //we need the right one
                                this.scrollRight.setEnabled(true);
                            } else {
                                //we don't need it
                                this.scrollRight.setEnabled(false);
                            }
                        }
    
                    } else {
                        this.scrollRight.setEnabled(false);
                        this.scrollLeft.setEnabled(false);
                    }
                    //due to rounding errors, we reduce by 10 just to make sure we leave
                    //ample room for the buttons to show
                    this.scroller.setStyle('width', ((scrollerSize <= 0)? 0:scrollerSize - 10));
    
                    this.findFirstVisible();
                    this.updating = false;
                }
            }
        },
        /**
         * Method: findFirstVisible
         * Finds the first visible button on the toolbar and saves a reference in 
         * the scroller object
         */
        findFirstVisible: function() {
            if (this.scroller.retrieve('buttonPointer') !== undefined && this.scroller.retrieve('buttonPointer') !== null) {
                return;
            };
    
            var children = this.wrapper.getChildren();
    
            if (children.length > 0) {
                children.each(function(toolbar) {
                    var buttons = toolbar.getChildren();
                    if (buttons.length > 1) {
                        buttons.each(function(button) {
                            var pos = button.getCoordinates(this.scroller);
                            if (pos.left >= 0 && (this.scroller.retrieve('buttonPointer') === undefined || this.scroller.retrieve('buttonPointer') === null)) {
                                //this is the first visible button
                                this.scroller.store('buttonPointer', button);
                            }
                        },
                        this);
                    }
                },
                this);
            }
        },
    
        /**
         * APIMethod: add
         * Add a toolbar to the container.
         *
         * Parameters:
         * toolbar - {Object} the toolbar to add.  More than one toolbar
         *    can be added by passing multiple arguments.
         */
        add: function() {
            Array.from(arguments).flatten().each(function(thing) {
                if (this.options.scroll) {
                    /* we potentially need to show or hide scroller buttons
                     * when the toolbar contents change
                     */
                    thing.addEvent('update', this.update.bind(this));
                    thing.addEvent('show', this.scrollIntoView.bind(this));
                }
                if (this.wrapper) {
                    this.wrapper.adopt(thing.domObj);
                } else {
                    this.domObj.adopt(thing.domObj);
                }
                this.domObj.addClass('jxBar' + this.options.position.capitalize());
            },
            this);
            if (arguments.length > 0) {
                this.fireEvent('add', this);
            }
            return this;
        },
    
        /**
         * Method: scroll
         * Does the work of scrolling the toolbar to a specific position.
         *
         * Parameters:
         * direction - whether to scroll left or right
         */
        scroll: function(direction) {
            if (this.updating) {
                return;
            }
            this.updating = true;
    
            var w,
                ml,
                currentButton = this.scroller.retrieve('buttonPointer');
            if (direction === 'left') {
                //need to tween the amount of the previous button
                var previousButton = this.scroller.retrieve('previousPointer');
                if (!previousButton) {
                    previousButton = this.getPreviousButton(currentButton);
                }
                if (previousButton) {
                    w = previousButton.getMarginBoxSize().width;
                    ml = this.wrapper.getStyle('margin-left').toInt();
                    ml += w;
                    if (typeof Fx != 'undefined' && typeof Fx.Tween != 'undefined') {
                        //scroll it
                        this.wrapper.set('tween', {
                            property: 'margin-left',
                            onComplete: this.afterTweenLeft.bind(this, previousButton)
                        });
                        this.wrapper.get('tween').start(ml);
                    } else {
                        //set it
                        this.wrapper.setStyle('margin-left', ml);
                        this.afterTweenLeft(previousButton);
                    }
                } else {
                    this.update();
                }
            } else {
                //must be right
                w = currentButton.getMarginBoxSize().width;
    
                ml = this.wrapper.getStyle('margin-left').toInt();
                ml -= w;
    
                //now, if Fx is defined tween the margin to the left to
                //hide the current button
                if (typeof Fx !== 'undefined' && typeof Fx.Tween !== 'undefined') {
                    //scroll it
                    this.wrapper.set('tween', {
                        property: 'margin-left',
                        onComplete: this.afterTweenRight.bind(this, currentButton)
                    });
                    
                    this.wrapper.get('tween').start(ml);
                } else {
                    //set it
                    this.wrapper.setStyle('margin-left', ml);
                    this.afterTweenRight(currentButton);
                }
    
            }
        },
    
        /**
         * Method: afterTweenRight
         * Updates pointers to buttons after the toolbar scrolls right
         *
         * Parameters:
         * currentButton - the button that was currently first before the scroll
         */
        afterTweenRight: function(currentButton) {
            var np = this.getNextButton(currentButton);
            if (!np) {
                np = currentButton;
            }
            this.scroller.store('buttonPointer', np);
            if (np !== currentButton) {
                this.scroller.store('previousPointer', currentButton);
            }
            this.update();
        },
        /**
         * Method: afterTweenLeft
         * Updates pointers to buttons after the toolbar scrolls left
         *
         * Parameters:
         * previousButton - the button that was to the left of the first visible
         *      button.
         */
        afterTweenLeft: function(previousButton) {
            this.scroller.store('buttonPointer', previousButton);
            var pp = this.getPreviousButton(previousButton);
            if (pp !== undefined && pp !== null) {
                this.scroller.store('previousPointer', pp);
            } else {
                this.scroller.eliminate('previousPointer');
            }
            this.update();
        },
        /**
         * APIMethod: remove
         * remove an item from a toolbar.  If the item is not in this toolbar
         * nothing happens
         *
         * Parameters:
         * item - {Object} the object to remove
         *
         * Returns:
         * {Object} the item that was removed, or null if the item was not
         * removed.
         */
        remove: function(item) {
            if (instanceOf(item, Widget)) {
                item.dispose();
            } else {
                document.id(item).dispose();
            }
            this.update();
        },
        /**
         * APIMethod: scrollIntoView
         * scrolls an item in one of the toolbars into the currently visible
         * area of the container if it is not already fully visible
         *
         * Parameters:
         * item - the item to scroll.
         */
        scrollIntoView: function(item) {
            var currentButton = this.scroller.retrieve('buttonPointer');
    
            if (currentButton === undefined || currentButton === null) return;
    
            if (item.domObj !== undefined && item.domObj !== null) {
                item = item.domObj;
                while (!item.hasClass('jxToolItem')) {
                    item = item.getParent();
                }
            }
            var pos = item.getCoordinates(this.scroller);
            var scrollerSize = this.scroller.getStyle('width').toInt();
    
            if (pos.right > 0 && pos.right <= scrollerSize && pos.left > 0 && pos.left <= scrollerSize) {
               //we are completely on screen 
                return;
            };
    
            if (pos.right > scrollerSize) {
                //it's right of the scroller
                var diff = pos.right - scrollerSize;
    
                //loop through toolbar items until we have enough width to
                //make the item visible
                var ml = this.wrapper.getStyle('margin-left').toInt();
                var w = currentButton.getMarginBoxSize().width;
                var np;
                while (w < diff && currentButton !== undefined && currentButton !== null) {
                    np = this.getNextButton(currentButton);
                    if (np) {
                        w += np.getMarginBoxSize().width;
                    } else {
                        break;
                    }
                    currentButton = np;
                }
    
                ml -= w;
    
                if (typeof Fx != 'undefined' && typeof Fx.Tween != 'undefined') {
                    //scroll it 
                    var t = this.wrapper.get('tween');
                    if (t === undefined || t === null){
                        this.wrapper.set('tween', {
                            onComplete: this.afterTweenRight.bind(this, currentButton)
                        });
                        t = this.wrapper.get('tween');;
                    }
                    this.wrapper.tween("margin-left",ml);
                } else {
                    //set it
                    this.wrapper.setStyle('margin-left', ml);
                    this.afterTweenRight(currentButton);
                }
            } else {
                //it's left of the scroller
                var ml = this.wrapper.getStyle('margin-left').toInt();
                ml -= pos.left;
    
                if (typeof Fx != 'undefined' && typeof Fx.Tween != 'undefined') {
                    //scroll it
                    var t = this.wrapper.get('tween');
                    if (t === undefined || t === null){
                        this.wrapper.set('tween', {
                            onComplete: this.afterTweenLeft.bind(this, item)
                        });
                    }
                    
                    this.wrapper.tween('margin-left',ml);
                } else {
                    //set it
                    this.wrapper.setStyle('margin-left', ml);
                    this.afterTweenLeft(item);
                }
            }
    
        },
        /**
         * Method: getPreviousButton
         * Finds the button to the left of the first visible button
         *
         * Parameters:
         * currentButton - the first visible button
         */
        getPreviousButton: function(currentButton) {
            pp = currentButton.getPrevious();
            if (pp === undefined && pp === null) {
                //check for a new toolbar
                pp = currentButton.getParent().getPrevious();
                if (pp) {
                    pp = pp.getLast();
                }
            }
            return pp;
        },
        /**
         * Method: getNextButton
         * Finds the button to the right of the first visible button
         *
         * Parameters:
         * currentButton - the first visible button
         */
        getNextButton: function(currentButton) {
            np = currentButton.getNext();
            if (!np) {
                np = currentButton.getParent().getNext();
                if (np) {
                    np = np.getFirst();
                }
            }
            return np;
        }
    
    });
    
    if (base.global) {
        base.global.Toolbar.Container = module.exports;
    }
});


/*
---

name: Jx.Toolbar.Item

description: A helper class to provide a container for something to go into a Jx.Toolbar.

license: MIT-style license.

requires:
 - Jx.Toolbar

provides: [Jx.Toolbar.Item]

...
 */
// $Id$
/**
 * Class: Jx.Toolbar.Item
 *
 * Extends: Object
 *
 * Implements: Options
 *
 * A helper class to provide a container for something to go into
 * a <Jx.Toolbar>.
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/toolbar/item", function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget");
        
    //TODO: consider... should this extend Jx.ListItem instead of Widget?
    var item = module.exports = new Class( {
        Extends: Widget,
        Family: 'Jx.Toolbar.Item',
        options: {
            /* Option: active
             * is this item active or not?  Default is true.
             */
            active: true,
            template: '<li class="jxToolItem"></li>'
        },
        classes: {
            domObj: 'jxToolItem'
        },
    
        parameters: ['jxThing', 'options'],
    
        /**
         * APIMethod: render
         * Create a new instance of Jx.Toolbar.Item.
         */
        render: function() {
            this.parent();
            var el = document.id(this.options.jxThing);
            if (el) {
                this.domObj.adopt(el);
            }
        }
    });

    if (base.global) {
        base.global.Toolbar.Item = module.exports;
    }
});

/*
---

name: Jx.Panel

description: A panel is a fundamental container object that has a content area and optional toolbars around the content area.

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Menu.Item
 - Jx.Layout
 - Jx.Toolbar.Container
 - Jx.Toolbar.Item

provides: [Jx.Panel]

css:
 - panel

images:
 - panel_controls.png
 - panelbar.png

...
 */
// $Id$
/**
 * Class: Jx.Panel
 *
 * Extends: <Jx.Widget>
 *
 * A panel is a fundamental container object that has a content
 * area and optional toolbars around the content area.  It also
 * has a title bar area that contains an optional label and
 * some user controls as determined by the options passed to the
 * constructor.
 *
 * Example:
 * (code)
 * (end)
 *
 * Events:
 * close - fired when the panel is closed
 * collapse - fired when the panel is collapsed
 * expand - fired when the panel is opened
 * 
 * Locale Keys:
 * - panel.collapseTooltip
 * - panel.collapseLabel
 * - panel.expandlabel
 * - panel.maximizeTooltip
 * - panel.maximizeLabel
 * - panel.restoreTooltip
 * - panel.restoreLabel
 * - panel.closeTooltip
 * - panel.closeLabel
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/panel", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Layout = require("./layout"),
        Container = require("./container"),
        Button = require("./button"),
        Toolbar = require("./toolbar"),
        Menu = require("./menu"),
        MenuItem = require("./menu/item")
        
    var panel = module.exports = new Class({
    
        Extends: Widget,
        Family: 'Jx.Panel',
        
        toolbarContainers: {
            top: null,
            right: null,
            bottom: null,
            left: null
        },
    
         options: {
            position: null,
            collapsedClass: 'jxPanelMin',
            collapseClass: 'jxPanelCollapse',
            menuClass: 'jxPanelMenu',
            maximizeClass: 'jxPanelMaximize',
            closeClass: 'jxPanelClose',
    
            /* Option: label
             * String, the title of the Jx Panel
             */
            label: '&nbsp;',
            /* Option: height
             * integer, fixed height to give the panel - no fixed height by
             * default.
             */
            height: null,
            /* Option: collapse
             * boolean, determine if the panel can be collapsed and expanded
             * by the user.  This puts a control into the title bar for the user
             * to control the state of the panel.
             */
            collapse: true,
            /* Option: close
             * boolean, determine if the panel can be closed (hidden) by the user.
             * The application needs to provide a way to re-open the panel after
             * it is closed.  The closeable property extends to dialogs created by
             * floating panels.  This option puts a control in the title bar of
             * the panel.
             */
            close: false,
            /* Option: closed
             * boolean, initial state of the panel (true to start the panel
             *  closed), default is false
             */
            closed: false,
            /* Option: hideTitle
             * Boolean, hide the title bar if true.  False by default.
             */
            hideTitle: false,
            /* Option: toolbars
             * array of Jx.Toolbar objects to put in the panel.  The position
             * of each toolbar is used to position the toolbar within the panel.
             */
            toolbars: [],
            type: 'panel',
            template: '<div class="jxPanel"><div class="jxPanelTitle"><img class="jxPanelIcon" src="'+base.aPixel.src+'" alt="" title=""/><span class="jxPanelLabel"></span><div class="jxPanelControls"></div></div><div class="jxPanelContentContainer"><div class="jxPanelContent"></div></div></div>',
            controlButtonTemplate: '<a class="jxButtonContainer jxButton"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>'
        },
        classes: {
            domObj: 'jxPanel',
            title: 'jxPanelTitle',
            domImg: 'jxPanelIcon',
            domLabel: 'jxPanelLabel',
            domControls: 'jxPanelControls',
            contentContainer: 'jxPanelContentContainer',
            content: 'jxPanelContent'
        },
    
        pluginNamespace: 'Panel',
        /**
         * APIMethod: render
         * Initialize a new Jx.Panel instance
         */
        render : function(){
            this.parent();
    
            this.toolbars = this.options ? this.options.toolbars || [] : [];
    
            this.options.position = (this.options.height != undefined && this.options.height != null && 
                   (this.options.position === undefined || this.options.position == null)) ? 'relative' : 'absolute';
    
            if (this.options.image && this.domImg) {
                this.domImg.setStyle('backgroundImage', 'url('+this.options.image+')');
            }
            if (this.options.label && this.domLabel) {
                this.setLabel(this.options.label);
            }
    
            var tbDiv = new Element('div');
            this.domControls.adopt(tbDiv);
            this.toolbar = new Toolbar({parent:tbDiv, scroll: false});
    
            var that = this;
            if (this.options.menu) {
                this.menu = new Menu({
                    image: base.aPixel.src
                }, {
                  buttonTemplate: this.options.controlButtonTemplate
                });
                this.menu.domObj.addClass(this.options.menuClass);
                this.menu.domObj.addClass('jxButtonContentLeft');
                this.toolbar.add(this.menu);
            }
    
            //var b, item;
            if (this.options.collapse) {
                if (this.title) {
                  this.title.addEvent('dblclick', function() {
                    that.toggleCollapse();
                  });
                }
                this.colB = new Button({
                    template: this.options.controlButtonTemplate,
                    image: base.aPixel.src,
                    tooltip: {set:'Jx',key:'panel',value:'collapseTooltip'},
                    onClick: function() {
                        that.toggleCollapse();
                    }
                });
                this.colB.domObj.addClass(this.options.collapseClass);
                this.addEvents({
                    collapse: function() {
                        this.colB.setTooltip({set:'Jx',key:'panel',value:'expandTooltip'});
                    }.bind(this),
                    expand: function() {
                        this.colB.setTooltip({set:'Jx',key:'panel',value:'collapseTooltip'});
                    }.bind(this)
                });
                this.toolbar.add(this.colB);
                if (this.menu) {
                    this.colM = new MenuItem({
                        label: this.options.collapseLabel,
                        onClick: function() { that.toggleCollapse(); }
                    });
                    var item = this.colM
                    this.addEvents({
                        collapse: function() {
                            this.colM.setLabel({set:'Jx',key:'panel',value:'expandLabel'});
                        }.bind(this),
                        expand: function() {
                            this.colM.setLabel({set:'Jx',key:'panel',value:'collapseLabel'});
                        }.bind(this)
                    });
                    this.menu.add(item);
                }
            }
    
            if (this.options.maximize) {
                this.maxB = new Button({
                    template: this.options.controlButtonTemplate,
                    image: base.aPixel.src,
                    tooltip: {set:'Jx',key:'panel',value:'maximizeTooltip'},
                    onClick: function() {
                        that.maximize();
                    }
                });
                this.maxB.domObj.addClass(this.options.maximizeClass);
                this.addEvents({
                    maximize: function() {
                        this.maxB.setTooltip({set:'Jx',key:'panel',value:'restoreTooltip'});
                    }.bind(this),
                    restore: function() {
                        this.maxB.setTooltip({set:'Jx',key:'panel',value:'maximizeTooltip'});
                    }.bind(this)
                });
                this.toolbar.add(this.maxB);
                if (this.menu) {
                    this.maxM = new MenuItem({
                        label: this.options.maximizeLabel,
                        onClick: function() { that.maximize(); }
                    });
                    
                    this.addEvents({
                        maximize: function() {
                            this.maxM.setLabel({set:'Jx',key:'panel',value:'maximizeLabel'});
                        }.bind(this),
                        restore: function() {
                            this.maxM.setLabel({set:'Jx',key:'panel',value:'restoreLabel'});
                        }.bind(this)
                    });
                    this.menu.add(this.maxM);
                }
            }
    
            if (this.options.close) {
                this.closeB = new Button({
                    template: this.options.controlButtonTemplate,
                    image: base.aPixel.src,
                    tooltip: {set:'Jx',key:'panel',value:'closeTooltip'},
                    onClick: function() {
                        that.close();
                    }
                });
                this.closeB.domObj.addClass(this.options.closeClass);
                this.toolbar.add(this.closeB);
                if (this.menu) {
                    this.closeM = new MenuItem({
                        label: {set:'Jx',key:'panel',value:'closeLabel'},
                        onClick: function() {
                            that.close();
                        }
                    });
                    this.menu.add(item);
                }
    
            }
    
            if (this.options.id) {
                this.domObj.id = this.options.id;
            }
            var jxl = new Layout(this.domObj, Object.merge({},this.options, {propagate:false}));
            var layoutHandler = this.layoutContent.bind(this);
            jxl.addEvent('sizeChange', layoutHandler);
    
            if (this.options.hideTitle) {
                this.title.dispose();
            }
    
            if (typeOf(this.options.toolbars) == 'array') {
                this.options.toolbars.each(function(tb){
                    var position = tb.options.position;
                    var tbc = this.toolbarContainers[position];
                    if (!tbc) {
                        tbc = new Element('div');
                        new Layout(tbc);
                        this.contentContainer.adopt(tbc);
                        this.toolbarContainers[position] = tbc;
                    }
                    tb.addTo(tbc);
                }, this);
            }
    
            new Layout(this.contentContainer);
            
    
            if(this.shouldLoadContent()) {
              new Layout(this.content);
              this.loadContent(this.content);
            } else if (this.options.items !== null && this.options.items !== undefined) {
                this.content.destroy();
                delete this.options.template;
                this.container = new Container(Object.merge({},this.options,{
                    parent: this.contentContainer    
                }));
                this.content = document.id(this.container);
            } else {
                new Layout(this.content);
            }
    
            this.toggleCollapse(this.options.closed);
    
            this.addEvent('addTo', function() {
                this.domObj.resize();
            });
            
            this.resize();
    
        },
    
        /**
         * Method: layoutContent
         * the sizeChange event of the <Jx.Layout> that manages the outer container
         * is intercepted and passed through this method to handle resizing of the
         * panel contents because we need to do some calculations if the panel
         * is collapsed and if there are toolbars to put around the content area.
         */
        layoutContent: function() {
            var titleHeight = 0;
            var top = 0;
            var bottom = 0;
            var left = 0;
            var right = 0;
            var tbc;
            var tb;
            var position;
            if (!this.options.hideTitle && this.title.parentNode == this.domObj) {
                titleHeight = this.title.getMarginBoxSize().height;
            }
            var domSize = this.domObj.getContentBoxSize();
            if (domSize.height > titleHeight) {
                this.contentContainer.setStyle('display','block');
                this.options.closed = false;
                this.contentContainer.resize({
                    top: titleHeight,
                    height: null,
                    bottom: 0
                });
                ['left','right'].each(function(position){
                    if (this.toolbarContainers[position]) {
                        this.toolbarContainers[position].style.width = 'auto';
                    }
                }, this);
                ['top','bottom'].each(function(position){
                    if (this.toolbarContainers[position]) {
                        this.toolbarContainers[position].style.height = '';
                    }
                }, this);
                if (typeOf(this.options.toolbars) == 'array') {
                    this.options.toolbars.each(function(tb){
                        tb.update();
                        position = tb.options.position;
                        tbc = this.toolbarContainers[position];
                        // IE 6 doesn't seem to want to measure the width of
                        // things correctly
                        if (Browser.ie && Browser.ie4) {
                            var oldParent = document.id(tbc.parentNode);
                            tbc.style.visibility = 'hidden';
                            document.id(document.body).adopt(tbc);
                        }
                        var size = tbc.getBorderBoxSize();
                        // put it back into its real parent now we are done
                        // measuring
                        if (Browser.ie && Browser.ie4) {
                            oldParent.adopt(tbc);
                            tbc.style.visibility = '';
                        }
                        switch(position) {
                            case 'bottom':
                                bottom = size.height;
                                break;
                            case 'left':
                                left = size.width;
                                break;
                            case 'right':
                                right = size.width;
                                break;
                            case 'top':
                            default:
                                top = size.height;
                                break;
                        }
                    },this);
                }
                tbc = this.toolbarContainers['top'];
                if (tbc) {
                    tbc.resize({top: 0, left: left, right: right, bottom: null, height: top, width: null});
                }
                tbc = this.toolbarContainers['bottom'];
                if (tbc) {
                    tbc.resize({top: null, left: left, right: right, bottom: 0, height: bottom, width: null});
                }
                tbc = this.toolbarContainers['left'];
                if (tbc) {
                    tbc.resize({top: top, left: 0, right: null, bottom: bottom, height: null, width: left});
                }
                tbc = this.toolbarContainers['right'];
                if (tbc) {
                    tbc.resize({top: top, left: null, right: 0, bottom: bottom, height: null, width: right});
                }
                this.content.resize({top: top, bottom: bottom, left: left, right: right});
            } else {
                this.contentContainer.setStyle('display','none');
                this.options.closed = true;
            }
            this.fireEvent('sizeChange', this);
        },
    
        /**
         * Method: setLabel
         * Set the label in the title bar of this panel
         *
         * Parameters:
         * s - {String} the new label
         */
        setLabel: function(s) {
            this.domLabel.set('html',this.getText(s));
        },
        /**
         * Method: getLabel
         * Get the label of the title bar of this panel
         *
         * Returns:
         * {String} the label
         */
        getLabel: function() {
            return this.domLabel.get('html');
        },
        /**
         * Method: finalize
         * Clean up the panel
         */
        finalize: function() {
            this.domObj = null;
            this.deregisterIds();
        },
        /**
         * Method: maximize
         * Maximize this panel
         */
        maximize: function() {
            if (this.manager) {
                this.manager.maximizePanel(this);
            }
        },
        /**
         * Method: setContent
         * set the content of this panel to some HTML
         *
         * Parameters:
         * html - {String} the new HTML to go in the panel
         */
        setContent : function (html) {
            this.content.innerHTML = html;
            this.bContentReady = true;
        },
        /**
         * Method: setContentURL
         * Set the content of this panel to come from some URL.
         *
         * Parameters:
         * url - {String} URL to some HTML content for this panel
         */
        setContentURL : function (url) {
            this.bContentReady = false;
            this.setBusy(true);
            if (arguments[1]) {
                this.onContentReady = arguments[1];
            }
            if (url.indexOf('?') == -1) {
                url = url + '?';
            }
            var a = new Request({
                url: url,
                method: 'get',
                evalScripts:true,
                onSuccess:this.panelContentLoaded.bind(this),
                requestHeaders: ['If-Modified-Since', 'Sat, 1 Jan 2000 00:00:00 GMT']
            }).send();
        },
        /**
         * Method: panelContentLoaded
         * When the content of the panel is loaded from a remote URL, this
         * method is called when the ajax request returns.
         *
         * Parameters:
         * html - {String} the html return from xhr.onSuccess
         */
        panelContentLoaded: function(html) {
            this.content.innerHTML = html;
            this.bContentReady = true;
            this.setBusy(false);
            if (this.onContentReady) {
                window.setTimeout(this.onContentReady.bind(this),1);
            }
        },
    
        /**
         * Method: toggleCollapse
         * sets or toggles the collapsed state of the panel.  If a
         * new state is passed, it is used, otherwise the current
         * state is toggled.
         *
         * Parameters:
         * state - optional, if passed then the state is used,
         * otherwise the state is toggled.
         */
        toggleCollapse: function(state) {
            if (state != undefined && state != null) {
                this.options.closed = state;
            } else {
                this.options.closed = !this.options.closed;
            }
            if (this.options.closed) {
                if (!this.domObj.hasClass(this.options.collapsedClass)) {
                    this.domObj.addClass(this.options.collapsedClass);
                    this.contentContainer.setStyle('display','none');
                    var m = this.domObj.measure(function(){
                        return this.getSizes(['margin'],['top','bottom']).margin;
                    });
                    var height = m.top + m.bottom;
                    if (this.title.parentNode == this.domObj) {
                        height += this.title.getMarginBoxSize().height;
                    }
                    this.domObj.resize({height: height});
                    this.fireEvent('collapse', this);
                }
            } else {
                if (this.domObj.hasClass(this.options.collapsedClass)) {
                    this.domObj.removeClass(this.options.collapsedClass);
                    this.contentContainer.setStyle('display','block');
                    this.domObj.resize({height: this.options.height});
                    this.fireEvent('expand', this);
                }
            }
        },
    
        /**
         * Method: close
         * Closes the panel (completely hiding it).
         */
        close: function() {
            this.domObj.dispose();
            this.fireEvent('close', this);
        },
        
        changeText: function (lang) {
            this.parent();	//TODO: change this class so that we can access these properties without too much voodoo...
            if(this.closeB != undefined && this.closeB != null) {
                this.closeB.setTooltip({set:'Jx',key:'panel',value:'closeTooltip'});
            }
            if (this.closeM != undefined && this.closeM != null) {
                this.closeM.setLabel({set:'Jx',key:'panel',value:'closeLabel'});
            }
            if (this.maxB != undefined && this.maxB != null) {
                this.maxB.setTooltip({set:'Jx',key:'panel',value:'maximizeTooltip'});
            }
            if (this.colB != undefined && this.colB != null) {
                this.colB.setTooltip({set:'Jx',key:'panel',value:'collapseTooltip'});
            }
            if (this.colM != undefined && this.colM != null) {
                if (this.options.closed == true) {
                    this.colM.setLabel({set:'Jx',key:'panel',value:'expandLabel'});
                } else {
                    this.colM.setLabel({set:'Jx',key:'panel',value:'collapseLabel'});
                }
            }
          if (this.options.label && this.domLabel) {
              this.setLabel(this.options.label);
          }
          // TODO: is this the right method to call?
          // if toolbars left/right are used and localized, they may change their size..
          this.layoutContent();
        },
    
        /**
         * Method to be able to allow loadingOnDemand in subclasses but not here
         */
        shouldLoadContent: function() {
            if ((this.options.content !== undefined && this.options.content !== null) ||
                (this.options.contentURL !== undefined && this.options.contentURL !== null)) {
                return true;
            } else {
                return false; 
            }
          
        },
        
        resize: function(){
            this.domObj.resize();        
            if (instanceOf(this.container, Container)) {
                this.container.resize();
            }
        }
    });
    
    if (base.global) {
        base.global.Panel = module.exports;
    }
});

/*
---

name: Jx.PanelSet

description: A panel set manages a set of panels within a DOM element.

license: MIT-style license.

requires:
 - Jx.Splitter
 - Jx.Panel

provides: [Jx.PanelSet]

...
 */
// $Id$
/**
 * Class: Jx.PanelSet
 *
 * Extends: <Jx.Widget>
 *
 * A panel set manages a set of panels within a DOM element.  The PanelSet
 * fills its container by resizing the panels in the set to fill the width and
 * then distributing the height of the container across all the panels. 
 * Panels can be resized by dragging their respective title bars to make them
 * taller or shorter.  The maximize button on the panel title will cause all
 * other panels to be closed and the target panel to be expanded to fill the
 * remaining space.  In this respect, PanelSet works like a traditional
 * Accordion control.
 *
 * When creating panels for use within a panel set, it is important to use the
 * proper options.  You must override the collapse option and set it to false
 * and add a maximize option set to true.  You must also not include options
 * for menu and close.
 *
 * Example:
 * (code)
 * var p1 = new Jx.Panel({collapse: false, maximize: true, content: 'c1'});
 * var p2 = new Jx.Panel({collapse: false, maximize: true, content: 'c2'});
 * var p3 = new Jx.Panel({collapse: false, maximize: true, content: 'c3'});
 * var panelSet = new Jx.PanelSet('panels', [p1,p2,p3]);
 * (end)
 * 
 * Locale Keys:
 * - panelset.barTooltip
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/panelset", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Layout = require("./layout"),
        Splitter = require("./splitter");
        
    var panelSet = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.PanelSet',
    
        options: {
            /* Option: parent
             * the object to add the panel set to
             */
            parent: null,
            /* Option: panels
             * an array of <Jx.Panel> objects that will be managed by the set.
             */
            panels: []
        },
    
        /**
         * Property: panels
         * {Array} the panels being managed by the set
         */
        panels: null,
        /**
         * Property: height
         * {Integer} the height of the container, cached for speed
         */
        height: null,
        /**
         * Property: firstLayout
         * {Boolean} true until the panel set has first been resized
         */
        firstLayout: true,
        /**
         * APIMethod: render
         * Create a new instance of Jx.PanelSet.
         */
        render: function() {
            this.parent();
            if (this.options.panels) {
                this.panels = this.options.panels;
                this.options.panels = null;
            }
            var obj = new Element('div');
            obj.replaces(this.domObj);
            this.domObj = obj;
            new Layout(this.domObj);
    
            //make a fake panel so we get the right number of splitters
            var d = new Element('div', {styles:{position:'absolute'}});
            new Layout(d, {minHeight:0,maxHeight:0,height:0});
            var elements = [d];
            this.panels.each(function(panel){
                elements.push(panel.domObj);
                panel.options.hideTitle = true;
                panel.contentContainer.resize({top:0});
                panel.toggleCollapse = this.maximizePanel.bind(this,panel);
                panel.domObj.store('Jx.Panel', panel);
                panel.manager = this;
            }, this);
    
            this.splitter = new Splitter(this.domObj, {
                splitInto: this.panels.length+1,
                layout: 'vertical',
                elements: elements,
                prepareBar: (function(i) {
                    var bar = new Element('div', {
                        'class': 'jxPanelBar',
                        'title': this.getText({set:'Jx',key:'panelset',value:'barToolTip'})
                    });
    
                    var panel = this.panels[i];
                    panel.title.setStyle('visibility', 'hidden');
                    document.id(document.body).adopt(panel.title);
                    var size = panel.title.getBorderBoxSize();
                    bar.adopt(panel.title);
                    panel.title.setStyle('visibility','');
    
                    bar.setStyle('height', size.height);
                    bar.store('size', size);
    
                    return bar;
                }).bind(this)
            });
            this.addEvent('addTo', function() {
                document.id(this.domObj.parentNode).setStyle('overflow', 'hidden');
                this.domObj.resize();
            });
            
            this.domObj.resize();
            
        },
    
        /**
         * Method: maximizePanel
         * Maximize a panel, taking up all available space (taking into
         * consideration any minimum or maximum values)
         */
        maximizePanel: function(panel) {
            var domHeight = this.domObj.getContentBoxSize().height;
            var space = domHeight;
            var panelSize = panel.domObj.retrieve('jxLayout').options.maxHeight;
            var panelIndex,i,p,thePanel,o,panelHeight;
            /* calculate how much space might be left after setting all the panels to
             * their minimum height (except the one we are resizing of course)
             */
            for (i=1; i<this.splitter.elements.length; i++) {
                p = this.splitter.elements[i];
                space -= p.retrieve('leftBar').getBorderBoxSize().height;
                if (p !== panel.domObj) {
                    thePanel = p.retrieve('Jx.Panel');
                    o = p.retrieve('jxLayout').options;
                    space -= o.minHeight;
                } else {
                    panelIndex = i;
                }
            }
    
            // calculate how much space the panel will take and what will be left over
            if (panelSize == -1 || panelSize >= space) {
                panelSize = space;
                space = 0;
            } else {
                space = space - panelSize;
            }
            var top = 0;
            for (i=1; i<this.splitter.elements.length; i++) {
                p = this.splitter.elements[i];
                top += p.retrieve('leftBar').getBorderBoxSize().height;
                if (p !== panel.domObj) {
                    thePanel = p.retrieve('Jx.Panel');
                    o = p.retrieve('jxLayout').options;
                    panelHeight = o.height != null ? o.height : p.getBorderBoxSize().height;
                    if (space > 0) {
                        if (space >= panelHeight) {
                            // this panel can stay open at its current height
                            space -= panelHeight;
                            p.resize({top: top, height: panelHeight});
                            top += panelHeight;
                        } else {
                            // this panel needs to shrink some
                            if (space > o.minHeight) {
                                // it can use all the space
                                p.resize({top: top, height: space});
                                top += space;
                                space = 0;
                            } else {
                                p.resize({top: top, height: o.minHeight});
                                top += o.minHeight;
                            }
                        }
                    } else {
                        // no more space, just shrink away
                        p.resize({top:top, height: o.minHeight});
                        top += o.minHeight;
                    }
                    p.retrieve('rightBar').style.top = top + 'px';
                } else {
                    break;
                }
            }
    
            /* now work from the bottom up */
            var bottom = domHeight;
            for (i=this.splitter.elements.length - 1; i > 0; i--) {
                p = this.splitter.elements[i];
                if (p !== panel.domObj) {
                    o = p.retrieve('jxLayout').options;
                    panelHeight = o.height != null ? o.height : p.getBorderBoxSize().height;
                    if (space > 0) {
                        if (space >= panelHeight) {
                            // panel can stay open
                            bottom -= panelHeight;
                            space -= panelHeight;
                            p.resize({top: bottom, height: panelHeight});
                        } else {
                            if (space > o.minHeight) {
                                bottom -= space;
                                p.resize({top: bottom, height: space});
                                space = 0;
                            } else {
                                bottom -= o.minHeight;
                                p.resize({top: bottom, height: o.minHeight});
                            }
                        }
                    } else {
                        bottom -= o.minHeight;
                        p.resize({top: bottom, height: o.minHeight, bottom: null});
                    }
                    bottom -= p.retrieve('leftBar').getBorderBoxSize().height;
                    p.retrieve('leftBar').style.top = bottom + 'px';
    
                } else {
                    break;
                }
            }
            panel.domObj.resize({top: top, height:panelSize, bottom: null});
            this.fireEvent('panelMaximize',panel);
        },
        
        createText: function (lang) {
          this.parent();
          //barTooltip is handled by the splitter's createText() function
        }
    });
    
    if (base.global) {
        base.global.PanelSet = module.exports;
    }
});

/*
---

name: Jx.TabSet

description: A TabSet manages a set of Jx.Tab content areas by ensuring that only one of the content areas is visible (i.e. the active tab).

license: MIT-style license.

requires:
 - Jx.Tab

provides: [Jx.TabSet]

...
 */
// $Id$
/**
 * Class: Jx.TabSet
 *
 * Extends: <Jx.Object>
 *
 * A TabSet manages a set of <Jx.Tab> content areas by ensuring that only one
 * of the content areas is visible (i.e. the active tab).  TabSet does not
 * manage the actual tabs.  The instances of <Jx.Tab> that are to be managed
 * as a set have to be added to both a TabSet and a <Jx.Toolbar>.  The content
 * areas of the <Jx.Tab>s are sized to fit the content area that the TabSet
 * is managing.
 *
 * Example:
 * (code)
 * var tabBar = new Jx.Toolbar('tabBar');
 * var tabSet = new Jx.TabSet('tabArea');
 *
 * var tab1 = new Jx.Tab('tab 1', {contentID: 'content1'});
 * var tab2 = new Jx.Tab('tab 2', {contentID: 'content2'});
 * var tab3 = new Jx.Tab('tab 3', {contentID: 'content3'});
 * var tab4 = new Jx.Tab('tab 4', {contentURL: 'test_content.html'});
 *
 * tabSet.add(t1, t2, t3, t4);
 * tabBar.add(t1, t2, t3, t4);
 * (end)
 *
 * Events:
 * tabChange - the current tab has changed
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tabset", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object"),
        Tab = require("./tab");
        
    var tabSet = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.TabSet',
        /**
         * Property: tabs
         * {Array} array of tabs that are managed by this tab set
         */
        tabs: null,
        /**
         * Property: domObj
         * {HTMLElement} The HTML element that represents this tab set in the DOM.
         * The content areas of each tab are sized to fill the domObj.
         */
        domObj : null,
        /**
         * Parameters:
         * domObj - {HTMLElement} an element or id of an element to put the
         * content of the tabs into.
         * options - an options object, only event handlers are supported
         * as options at this time.
         */
        parameters: ['domObj','options'],
    
        /**
         * APIMethod: init
         * Create a new instance of <Jx.TabSet> within a specific element of
         * the DOM.
         */
        init: function() {
            this.tabs = [];
            this.domObj = document.id(this.options.domObj);
            if (!this.domObj.hasClass('jxTabSetContainer')) {
                this.domObj.addClass('jxTabSetContainer');
            }
            this.setActiveTabFn = this.setActiveTab.bind(this);
        },
        /**
         * Method: resizeTabBox
         * Resize the tab set content area and propogate the changes to
         * each of the tabs managed by the tab set.
         */
        resizeTabBox: function() {
            if (this.activeTab && this.activeTab.content.resize) {
                this.activeTab.content.resize({forceResize: true});
            }
        },
        
        resize: function(){
            this.activeTab.resize();
        },
    
        /**
         * Method: add
         * Add one or more <Jx.Tab>s to the TabSet.
         *
         * Parameters:
         * tab - {<Jx.Tab>} an instance of <Jx.Tab> to add to the tab set.  More
         * than one tab can be added by passing extra parameters to this method.
         */
        add: function() {
            Array.from(arguments).flatten().each(function(tab) {
                if (instanceOf(tab, Tab)) {
                    tab.addEvent('down',this.setActiveTabFn);
                    tab.tabSet = this;
                    this.domObj.appendChild(tab.content);
                    this.tabs.push(tab);
                    if ((!this.activeTab || tab.options.active) && tab.options.enabled) {
                        tab.options.active = false;
                        tab.setActive(true);
                    }
                }
            }, this);
            return this;
        },
        /**
         * Method: remove
         * Remove a tab from this TabSet.  Note that it is the caller's responsibility
         * to remove the tab from the <Jx.Toolbar>.
         *
         * Parameters:
         * tab - {<Jx.Tab>} the tab to remove.
         */
        remove: function(tab) {
            if (instanceOf(tab, Tab) && this.tabs.indexOf(tab) != -1) {
                this.tabs.erase(tab);
                if (this.activeTab == tab) {
                    if (this.tabs.length) {
                        this.tabs[0].setActive(true);
                    }
                }
                tab.removeEvent('down',this.setActiveTabFn);
                tab.content.dispose();
            }
        },
        /**
         * Method: setActiveTab
         * Set the active tab to the one passed to this method
         *
         * Parameters:
         * tab - {<Jx.Tab>} the tab to make active.
         */
        setActiveTab: function(tab) {
            if (this.activeTab && this.activeTab != tab) {
                this.activeTab.setActive(false);
            }
            this.activeTab = tab;
            this.activeTab.resize();
            this.fireEvent('tabChange', [this, tab]);
        }
    });
    
    if (base.global) {
        base.global.TabSet = module.exports;
    }
    
});
    



/*
---

name: Jx.Data

description: namespace for all data components

license: MIT-style license.

requires:
 - Jx

provides: [Jx.Data]

...
 */

define("jx/data",function(require, exports, module){
   
    var base = require("../base");
   
    if (base.global) {
        base.global.Data = module.exports;
    }
});

/*
---

name: Jx.Form

description: Represents a HTML Form

license: MIT-style license.

requires:
 - Jx.Widget
 - More/String.QueryString
 - More/Form.Validator

provides: [Jx.Form]

css:
 - form
 
images:
 - emblems.png

...
 */
// $Id$
/**
 * Class: Jx.Form
 *
 * Extends: <Jx.Widget>
 *
 * A class that represents an HTML form. You add fields using either
 * Jx.Form.add() or by using the field's .addTo() method. You can get all form
 * values or set them using this class. It also handles validation of fields
 * through the use of a plugin (Jx.Plugin.Form.Validator).
 *
 * Jx.Form has the ability to submit itself via normal HTTP submit as well as
 * via AJAX. To submit normally you simply call the submit() function. To submit by
 * AJAX, call ajaxSubmit().  If the form contains Jx.Field.File instances it will
 * either submit all of the files individually and then the data, or it will submit
 * data with the last File instance it finds. This behavior is dependant on the
 * uploadFilesFirst option (which defaults to false).
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/form", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Field = null,
        File = null,
        Fieldset = null;
        
    var form = module.exports = new Class({
    
        Extends: Widget,
        Family: 'Jx.Form',
        
        options: {
            /**
             * Option: method
             * the method used to submit the form
             */
            method: 'post',
            /**
             * Option: action
             * where to submit it to
             */
            action: '',
            /**
             * Option: fileUpload
             * whether this form handles file uploads or not.
             */
            fileUpload: false,
            /**
             * Option: formClass
             */
            formClass: null,
            /**
             * Option: name
             * the name property for the form
             */
            name: '',
            /**
             * Option: acceptCharset
             * the character encoding to be used. Defaults to utf-8.
             */
            acceptCharset: 'utf-8',
            /**
             * Option: uploadFilesFirst
             * Whether to upload all of the files in the form before
             * uploading the rest of the form. If set to false the form will
             * upload the data with the last file that it finds,
             */
            uploadFilesFirst: false,
    
            template: '<form class="jxForm"></form>'
        },
        
        /**
         * Property: defaultAction
         * the default field to activate if the user hits the enter key in this
         * form.  Set by specifying default: true as an option to a field.  Will
         * only work if the default is a Jx button field or an input of a type
         * that is a button
         */
        defaultAction: null,
    
        /**
         * Property: fields
         * An array of all of the single fields (not contained in a fieldset) for
         * this form
         */
        fields : null,
        /**
         * Property: pluginNamespace
         * required variable for plugins
         */
        pluginNamespace: 'Form',
    
        classes: {
            domObj: 'jxForm'
        },
        
        init: function() {
            Field = require("./field");
            File = require("./field/file");
            Fieldset = require("./fieldset");
            this.fields = {};
            this.data = {};
            this.parent();
          
        },
        
        /**
         * APIMethod: render
         * Constructs the form but does not add it to anything to be shown. The
         * caller should use form.addTo() to add the form to the DOM.
         */
        render : function () {
            this.parent();
            //create the form first
            this.domObj.set({
                'method' : this.options.method,
                'action' : this.options.action,
                'name' : this.options.name,
                'accept-charset': this.options.acceptCharset,
                events: {
                    keypress: function(e) {
                        if (e.key == 'enter' && 
                            e.target.tagName != "TEXTAREA" && 
                            this.defaultAction &&
                            this.defaultAction.click) {
                            document.id(this.defaultAction).focus();
                            this.defaultAction.click();
                            e.stop();
                        }
                    }.bind(this)
                }
            });
    
            if (this.options.fileUpload) {
                this.domObj.set('enctype', 'multipart/form-data');
            }
            
            if (this.options.formClass !== undefined && this.options.formClass !== null) {
                this.domObj.addClass(this.options.formClass);
            }
            
            if (this.options.items !== undefined && this.options.items !== null) {
                //add the defined fields to the form
                this.addItems(this, this.options.items);
            }
        },
        
        addItems: function (container, options) {
            Object.each(options, function(opt){
                var t = typeOf(opt);
                if (t === 'element' || t === 'string' || instanceOf(opt, Widget)) {
                    this.add(opt);
                } else if (t === 'object' && opt['class'] !== undefined && opt['class'] !== null) {
                    opt.options.parent = container;
                    opt.options.form = this;
                    if (opt['class'].toLowerCase() === 'fieldset') {
                        this.add(new Fieldset(opt.options));
                    } else {
                        var field = require("./field/" + opt['class']);
                        this.add(new field(opt.options));
                    }
                }
            },this);
        },
    
        /**
         * APIMethod: addField
         * Adds a <Jx.Field> subclass to this form's fields hash
         *
         * Parameters:
         * field - <Jx.Field> to add
         */
        addField : function (field) {
            if (this.fields === undefined || this.fields === null) {
                this.fields = {};
            }
            this.fields[field.id] = field;
            if (field.options.defaultAction) {
                this.defaultAction = field;
            }
            this.fireEvent('fieldAdded',[field,this]);
        },
    
        /**
         * Method: isValid
         * Determines if the form passes validation
         *
         * Parameters:
         * evt - the MooTools event object
         */
        isValid : function (evt) {
            return true;
        },
    
        /**
         * APIMethod: getValues
         * Gets the values of all the fields in the form as a Hash object. This
         * uses the mootools function Element.toQueryString to get the values and
         * will either return the values as a querystring or as an object (using
         * mootools-more's String.parseQueryString method).
         *
         * Parameters:
         * asQueryString - {boolean} indicates whether to return the value as a
         *                  query string or an object.
         */
        getValues : function (asQueryString) {
            var queryString = this.domObj.toQueryString();
            if (asQueryString !== undefined && asQueryString !== null && asQueryString) {
                return queryString;
            } else {
                return queryString.parseQueryString();
            }
        },
        /**
         * APIMethod: setValues
         * Used to set values on the form
         *
         * Parameters:
         * values - A Hash of values to set keyed by field name.
         */
        setValues : function (values) {
            Object.each(this.fields, function (item) {
                item.setValue(values[item.name]);
            }, this);
        },
    
        /**
         * APIMethod: add
         *
         * Parameters:
         * Pass as many parameters as you like. However, they should all be
         * <Jx.Field> objects or objects that can be processed by document.id().
         */
        add : function () {
            var field;
            for (var x = 0; x < arguments.length; x++) {
                field = arguments[x];
                //add form to the field and field to the form if not already there
                if (instanceOf(field, Field) && (field.form === undefined || field.form === null)) {
                    field.form = this;
                    this.addField(field);
                } else if (instanceOf(field, Fieldset) && (field.form === undefined || field.form === null)) {
                    field.form = this;
                }
                
                this.domObj.grab(document.id(field));
            }
            return this;
        },
    
        /**
         * APIMethod: reset
         * Resets all fields back to their original value
         */
        reset : function () {
            Object.each(this.fields, function (field, name) {
                field.reset();
            }, this);
            this.fireEvent('reset',this);
        },
        /**
         * APIMethod: getFieldsByName
         * Allows retrieving a field from a form by the name of the field (NOT the
         * ID).
         *
         * Parameters:
         * name - {string} the name of the field to find
         */
        getFieldsByName: function (name) {
            var fields = [];
            Object.each(this.fields, function(val, id){
                if (val.name === name) {
                    fields.push(val);
                }
            },this);
            return fields;
        },
        /**
         * APIMethod: getField
         * Returns a Jx.Field object by its ID.
         *
         * Parameters:
         * id - {string} the id of the field to find.
         */
        getField: function (id) {
            if (Object.keys(this.fields).contains(id)) {
                return this.fields[id];
            } 
            return null;
        },
        /**
         * APIMethod: setBusy
         * Sets the busy state of the Form and all of it's fields.
         *
         * Parameters:
         * state - {boolean} indicated whether the form is busy or not.
         */
        setBusy: function(state) {
          if (this.busy == state) {
            return;
          }
          this.parent(state);
          Object.each(this.fields, function(field) {
            field.setBusy(state, true);
          });
        },
    
        submit: function() {
            //are there any files in this form?
            var opts = this.options;
            if (opts.fileUpload) {
                //grab all of the files and pull them into the main domObj
                var files = this.findFiles();
                files.each(function(file){
                    var inputs = file.getFileInputs();
                    if (inputs.length > 1) {
                        //we need to make these an array...
                        inputs.each(function(input){
                            input.set('name',input.get('name') + '[]');
                        },this);
                    }
                    file.destroy();
                    this.domObj.adopt(inputs);
                },this);
            }
            this.domObj.submit();
        },
    
        ajaxSubmit: function() {
            var opts = this.options;
            if (opts.fileUpload) {
                var files = this.findFiles();
                this.files = files.length;
                this.completed = 0;
                files.each(function(file, index){
                    file.addEvent('onFileUploadComplete',this.fileUploadComplete.bind(this));
                    if (index==(this.files - 1) && !opts.uploadFilesFirst) {
                        file.upload(this);
                    } else {
                        file.upload();
                    }
                },this);
            } else {
                this.submitForm();
            }
        },
    
        submitForm: function() {
            //otherwise if no file field(s) present, just get the values and
            //submit to the action via the method
            var data = this.getValues();
            var req = new Request.JSON({
                url: this.action,
                method: this.method,
                data: data,
                urlEncoded: true,
                onSuccess: function(responseJSON, responseText) {
                    this.fileUploadComplete(responseJSON, true);
                }.bind(this)
            });
            req.send();
        },
    
        findFiles: function() {
            var files = [];
            Object.each(this.fields, function(field){
                if (instanceOf(field, File)) {
                    files.push(field);
                }
            },this);
            return files;
        },
    
        fileUploadComplete: function(data){
            this.completed++;
            Object.each(data,function(value,key){
                this.data[key] = value;
            },this);
            if (this.completed == this.files && this.options.uploadFilesFirst) {
                this.submitForm();
            } else {
                this.fireEvent('formSubmitComplete',[this.data]);
            }
        }
    
    });

    if (base.global) {
        base.global.Form = module.exports;
    }
    
});

/*
---

name: Jx.Scrollbar

description: An implementation of a custom CSS-styled scrollbar.

license: MIT-style license.

requires:
 - Jx.Slider

provides: [Jx.Scrollbar]

css:
 - scrollbar

...
 */
// $Id$
/**
 * Class: Jx.Scrollbar
 * Creates a custom scrollbar either vertically or horizontally (determined by
 * options). These scrollbars are designed to be styled entirely through CSS.
 * 
 * Copyright 2009 by Jonathan Bomgardner
 * License: MIT-style
 * 
 * Based in part on 'Mootools CSS Styled Scrollbar' on
 * http://solutoire.com/2008/03/10/mootools-css-styled-scrollbar/
 */
define("jx/scrollbar", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Slider = require("./slider")
        
    var scrollbar = module.exports = new Class({
    
        Extends: Widget,
        Family: 'Jx.Scrollbar',
        
        Binds: ['scrollIt'],
        
        options: {
            /**
             * Option: direction
             * Determines which bars are visible. Valid options are 'horizontal'
             * or 'vertical'
             */
            direction: 'vertical',
            /**
             * Option: useMouseWheel
             * Whether to allow the mouse wheel to move the content. Defaults 
             * to true.
             */
            useMouseWheel: true,
            /**
             * Option: useScrollers
             * Whether to show the scrollers. Defaults to true.
             */
            useScrollers: true,
            /**
             * Option: scrollerInterval
             * The amount to scroll the content when using the scrollers. 
             * useScrollers option must be true. Default is 50 (px).
             */
            scrollerInterval: 50,
            /**
             * Option: template
             * the HTML template for a scrollbar
             */
            template: '<div class="jxScrollbarContainer"><div class="jxScrollLeft"></div><div class="jxSlider"></div><div class="jxScrollRight"></div></div>'
        },
        
        classes: {
            domObj: 'jxScrollbarContainer',
            scrollLeft: 'jxScrollLeft',
            scrollRight: 'jxScrollRight',
            sliderHolder: 'jxSlider'
        },
        
        el: null,
        //element is the element we want to scroll. 
        parameters: ['element', 'options'],
        
        /**
         * Method: render
         * render the widget
         */
        render: function () {
            this.parent();
            this.el = document.id(this.options.element);
            if (this.el) {
                this.el.addClass('jxHas'+this.options.direction.capitalize()+'Scrollbar');
                
                //wrap content to make scroll work correctly
                var children = this.el.getChildren();
                this.wrapper = new Element('div',{
                    'class': 'jxScrollbarChildWrapper'
                });
                
                /**
                 * the wrapper needs the same settings as the original container
                 * specifically, the width and height
                 */ 
                this.wrapper.setStyles({
                    width: this.el.getStyle('width'),
                    height: this.el.getStyle('height')
                });
                
                children.inject(this.wrapper);
                this.wrapper.inject(this.el);
                
                this.domObj.inject(this.el);
                
                var scrollSize = this.wrapper.getScrollSize();
                var size = this.wrapper.getContentBoxSize();
                this.steps = this.options.direction==='horizontal'?scrollSize.x-size.width:scrollSize.y-size.height;
                this.slider = new Slider({
                    snap: false,
                    min: 0,
                    max: this.steps,
                    step: 1,
                    mode: this.options.direction,
                    onChange: this.scrollIt
                    
                });
                
                if (!this.options.useScrollers) {
                    this.scrollLeft.dispose();
                    this.scrollRight.dispose();
                    //set size of the sliderHolder
                    if (this.options.direction === 'horizontal') {
                        this.sliderHolder.setStyle('width','100%');
                    } else {
                        this.sliderHolder.setStyle('height', '100%');
                    }
                    
                } else {
                    this.scrollLeft.addEvents({
                        mousedown: function () {
                            this.slider.slider.set(this.slider.slider.step - this.options.scrollerInterval);
                            this.pid = function () {
                                this.slider.slider.set(this.slider.slider.step - this.options.scrollerInterval);
                            }.periodical(1000, this);
                        }.bind(this),
                        mouseup: function () {
                            window.clearInterval(this.pid);
                        }.bind(this)
                    });
                    this.scrollRight.addEvents({
                        mousedown: function () {
                            this.slider.slider.set(this.slider.slider.step + this.options.scrollerInterval);
                            this.pid = function () {
                                this.slider.slider.set(this.slider.slider.step + this.options.scrollerInterval);
                            }.periodical(1000, this);
                        }.bind(this),
                        mouseup: function () {
                            window.clearInterval(this.pid);
                        }.bind(this)
                    });
                    //set size of the sliderHolder
                    var holderSize, scrollerRightSize, scrollerLeftSize;
                    if (this.options.direction === 'horizontal') {
                        scrollerRightSize = this.scrollRight.getMarginBoxSize().width;
                        scrollerLeftSize = this.scrollLeft.getMarginBoxSize().width;
                        holderSize = size.width - scrollerRightSize - scrollerLeftSize;
                        this.sliderHolder.setStyle('width', holderSize + 'px');
                    } else {
                        scrollerRightSize = this.scrollRight.getMarginBoxSize().height;
                        scrollerLeftSize = this.scrollLeft.getMarginBoxSize().height;
                        holderSize = size.height - scrollerRightSize - scrollerLeftSize;
                        this.sliderHolder.setStyle('height', holderSize + 'px');
                    }
                }
                document.id(this.slider).inject(this.sliderHolder);
                
                //allows mouse wheel to function
                if (this.options.useMouseWheel) {
                    $$(this.el, this.domObj).addEvent('mousewheel', function(e){
                        e = new Event(e).stop();
                        var step = this.slider.slider.step - e.wheel * 30;
                        this.slider.slider.set(step);
                    }.bind(this));
                }
                
                //stop slider if we leave the window
                document.id(document.body).addEvent('mouseleave', function(){ 
                    this.slider.slider.drag.stop();
                }.bind(this));
    
                this.slider.start();
            }
        },
        
        /**
         * Method: scrollIt
         * scroll the content in response to the slider being moved.
         */
        scrollIt: function (step) {
            var x = this.options.direction==='horizontal'?step:0;
            var y = this.options.direction==='horizontal'?0:step;
            this.wrapper.scrollTo(x,y);
        }
    });
    
    if (base.global) {
        base.global.Scrollbar = module.exports;
    }
});

/*
---

name: Jx.ListItem

description: Represents a single item in a listview.

license: MIT-style license.

requires:
 - Jx.Widget

provides: [Jx.ListItem]

...
 */
// $Id$
/**
 * Class: Jx.ListItem
 *
 * Extends: <Jx.Widget>
 *
 * Events:
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group.
 *
 * This file is licensed under an MIT style license
 */
define("jx/listitem", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget");
        
    var listItem = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.ListItem',
    
        options: {
            enabled: true,
            template: '<li class="jxListItemContainer jxListItem"></li>'
        },
    
        classes: {
            domObj: 'jxListItemContainer',
            domContent: 'jxListItem'
        },
    
        /**
         * APIMethod: render
         */
        render: function () {
            this.parent();
            this.domContent.store('jxListItem', this);
            this.domObj.store('jxListTarget', this.domContent);
            this.loadContent(this.domContent);
        },
    
        enable: function(state) {
    
        }
    });
    
    if (base.global) {
        base.global.ListItem = module.exports;
    }
});

/*
---

name: Jx.Slide

description: A class that shows and hides elements using a slide effect. Does not use a wrapper element or require a fixed width or height.

license: MIT-style license.

requires:
 - Jx.Object
 - Core/Fx.Tween

provides: [Jx.Slide]

...
 */
// $Id$
/**
 * Class: Jx.Slide
 * Hides and shows an element without depending on a fixed width or height
 *
 * Copyright 2009 by Jonathan Bomgardner
 * License: MIT-style
 */
define("jx/slide", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
        
    var slide = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.Slide',
        Binds: ['handleClick'],
        options: {
            /**
             * Option: target
             * The element to slide
             */
            target: null,
            /**
             * Option: trigger
             * The element that will have a click event added to start the slide
             */
            trigger: null,
            /**
             * Option: type
             * The type of slide. Can be either "width" or "height". defaults to "height"
             */
            type: 'height',
            /**
             * Option: setOpenTo
             * Allows the caller to determine what the open target is set to. Defaults to 'auto'.
             */
            setOpenTo: 'auto',
            /**
             * Option: onSlideOut
             * function called when the target is revealed.
             */
            onSlideOut: function(){},
            /**
             * Option: onSlideIn
             * function called when a panel is hidden.
             */
            onSlideIn: function(){}
        },
        /**
         * Method: init
         * sets up the slide
         */
        init: function () {
    
            this.target = document.id(this.options.target);
    
            this.target.set('tween', {onComplete: this.setDisplay.bind(this)});
    
            if (this.options.trigger !== undefined && this.options.trigger !== null) {
                this.trigger = document.id(this.options.trigger);
                this.trigger.addEvent('click', this.handleClick);
            }
    
            this.target.store('slider', this);
    
        },
        /**
         * Method: handleClick
         * event handler for clicks on the trigger. Starts the slide process
         */
        handleClick: function () {
            var sizes = this.target.getMarginBoxSize();
            if (sizes.height === 0) {
                this.slide('in');
            } else {
                this.slide('out');
            }
        },
        /**
         * Method: setDisplay
         * called at the end of the animation to set the target's width or
         * height as well as other css values to the appropriate values
         */
        setDisplay: function () {
            var h = this.target.getStyle(this.options.type).toInt();
            if (h === 0) {
                this.target.setStyle('display', 'none');
                this.fireEvent('slideOut', this.target);
            } else {
                //this.target.setStyle('overflow', 'auto');
                if (this.target.getStyle('position') !== 'absolute') {
                    this.target.setStyle(this.options.type, this.options.setOpenTo);
                }
                this.fireEvent('slideIn', this.target);
            }
        },
        /**
         * APIMethod: slide
         * Actually determines how to slide and initiates the animation.
         *
         * Parameters:
         * dir - the direction to slide (either "in" or "out")
         */
        slide: function (dir) {
            var h;
            if (dir === 'in') {
                h = this.target.retrieve(this.options.type);
                this.target.setStyles({
                    overflow: 'hidden',
                    display: 'block'
                });
                this.target.setStyles(this.options.type, 0);
                this.target.tween(this.options.type, h);
            } else {
                if (this.options.type === 'height') {
                    h = this.target.getMarginBoxSize().height;
                } else {
                    h = this.target.getMarginBoxSize().width;
                }
                this.target.store(this.options.type, h);
                this.target.setStyle('overflow', 'hidden');
                this.target.setStyle(this.options.type, h);
                this.target.tween(this.options.type, 0);
            }
        }
    });
    
    if (base.global) {
        base.global.Slide = module.exports;
    }
    
});

/*
---

name: Jx.Formatter

description: Base formatter object

license: MIT-style license.

requires:
 - Jx.Object

provides: [Jx.Formatter]

...
 */
 // $Id$
/**
 * Class: Jx.Formatter
 *
 * Extends: <Jx.Object>
 *
 * Base class used for specific implementations to coerce data into specific formats
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
        
    var formatter = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.Formatter',
    
        /**
         * APIMethod: format
         * Empty method that must be overridden by subclasses to provide
         * the needed formatting functionality.
         */
        format: function(){}
    });
    
    if (base.global) {
        base.global.Formatter = module.exports;
    }
});

/*
---

name: Jx.ListView

description: A widget that displays items in a list format.

license: MIT-style license.

requires:
 - Jx.Widget.List

provides: [Jx.ListView]

css:
 - list

images:
 - listitem.png
...
 */
// $Id$
/**
 * Class: Jx.ListView
 *
 * Extends: <Jx.Widget>
 *
 * Events:
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group.
 *
 * This file is licensed under an MIT style license
 */
define("jx/listview", function(require, exports, module){
    
    var base = require("../base"),
        WidgetList = require("./widget/list");
        
    var listView = module.exports = new Class({
        Extends: WidgetList,
        Family: 'Jx.ListView',
    
        pluginNamespace: 'ListView',
    
        options: {
            template: '<ul class="jxListView jxListContainer"></ul>',
        },
    
        classes: {
            domObj: 'jxListView',
            container: 'jxListContainer'
        }
    });
    
    if (base.global) {
        base.global.ListView = module.exports;
    }
});

/*
---

name: Jx.Notice

description: Represents a single item used in a notifier.

license: MIT-style license.

requires:
 - Jx.ListItem

provides: [Jx.Notice]

images:
 - notice.png
 - notice_error.png
 - notice_warning.png
 - notice_success.png
 - icons.png


...
 */
// $Id$
/**
 * Class: Jx.Notice
 *
 * Extends: <Jx.ListItem>
 *
 * Events:
 * 
 * Locale Keys:
 * - notice.closeTip
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group.
 *
 * This file is licensed under an MIT style license
 */
define("jx/notice",function(require, exports, module){
    
    var base = require("../base"),
        ListItem = require("./listitem");
        
    var notice = module.exports = new Class({

        Extends: ListItem,
        Family: 'Jx.Notice',
    
        options: {
            /**
             * Option: fx
             * the effect to use on the notice when it is shown and hidden,
             * 'fade' by default
             */
            fx: 'fade',
            /**
             * Option: chrome
             * {Boolean} should the notice be displayed with chrome or not,
             * default is false
             */
            chrome: false,
            /**
             * Option: enabled
             * {Boolean} default is false
             */
            enabled: true,
            /**
             * Option: template
             * {String} the HTML template of a notice
             */
            template: '<li class="jxNoticeItemContainer"><div class="jxNoticeItem"><span class="jxNotice"></span><a class="jxNoticeClose" href="javascript:void(0);" title="' + Locale.get('Jx','notice').closeTip + '"></a></div></li>',
            /**
             * Option: klass
             * {String} css class to add to the notice
             */
            klass: ''
        },
    
        classes: {
            domObj: 'jxNoticeItemContainer',
            domItem: 'jxNoticeItem',
            domContent: 'jxNotice',
            domClose: 'jxNoticeClose'
        },
    
        /**
         * Method: render
         */
        render: function () {
            this.parent();
            
            if (this.options.klass) {
                this.domObj.addClass(this.options.klass);
            }
            if (this.domClose) {
                this.domClose.addEvent('click', this.close.bind(this));
            }
        },
        /**
         * APIMethod: close
         * close the notice
         */
        close: function() {
            this.fireEvent('close', this);
        },
        /**
         * APIMethod: show
         * show the notice
         */
        show: function(el, onComplete) {
            if (this.options.chrome) {
                this.showChrome();
            }
            if (this.options.fx) {
                document.id(el).adopt(this);
                if (onComplete) onComplete();
            } else {
                document.id(el).adopt(this);
                if (onComplete) onComplete();
            }
        },
        /**
         * APIMethod: hide
         * hide the notice
         */
        hide: function(onComplete) {
            if (this.options.chrome) {
                this.hideChrome();
            }
            if (this.options.fx) {
                document.id(this).dispose();
                if (onComplete) onComplete();
            } else {
                document.id(this).dispose();
                if (onComplete) onComplete();
            }
        },
    
        changeText : function(lang) {
            this.parent();
            //this.render();
            //this.processElements(this.options.template, this.classes);
        }
    });
    
    if (base.global) {
        base.global.Notice = module.exports;
    }
    
});

/*
---

name: Jx.Notifier

description: Base class for notification areas that can hold temporary notices.

license: MIT-style license.

requires:
 - Jx.ListView
 - Jx.Notice
 - Core/Fx.Tween

provides: [Jx.Notifier]

css:
 - notification


...
 */
// $Id$
/**
 * Class: Jx.Notifier
 *
 * Extends: <Jx.ListView>
 *
 * Events:
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group.
 *
 * This file is licensed under an MIT style license
 */
define("jx/notifier",function(require, exports, module){
    
    var base = require("../base"),
        ListView = require("./listview"),
        Notice = require("./notice");
        
    var notifier = module.exports = new Class({
    
        Extends: ListView,
        Family: 'Jx.Notifier',
        
        options: {
            /**
             * Option: parent
             * The parent this notifier is to be placed in. If not specified, it
             * will be placed in the body of the document.
             */
            parent: 'body',
            /**
             * Option: template
             * This is the template for the notification container itself, not the
             * actual notice. The actual notice is below in the class property 
             * noticeTemplate.
             */
            template: '<div class="jxNoticeListContainer"><ul class="jxNoticeList"></ul></div>',
            /**
             * Option: listOptions
             * An object holding custom options for the internal Jx.List instance.
             */
            listOptions: { }
        },
    
        classes: {
            domObj: 'jxNoticeListContainer',
            container: 'jxNoticeList'
        },
        
        /**
         * Method: render
         * render the widget
         */
        render: function () {
            this.parent();
            
            this.addEvent('postRender', function() {
                if (typeOf(this.options.items) == 'array') {
                    this.options.items.each(function(item){
                        this.add(item);
                    },this);
                }
            }.bind(this));
        },
        
        /**
         * APIMethod: add
         * Add a new notice to the notifier
         *
         * Parameters:
         * notice - {<Jx.Notice>} the notice to add
         */
        add: function (notice) {
            if (!(notice instanceof Notice)) {
                notice = new Notice({content: notice});
            }
            notice.addEvent('close', this.remove.bind(this));
            notice.show(this.container);
        },
        
        /**
         * APIMethod: remove
         * Add a new notice to the notifier
         *
         * Parameters:
         * notice - {<Jx.Notice>} the notice to remove
         */
        remove: function (notice) {
            if (this.domObj.contains(document.id(notice))) {
                notice.removeEvents('close');
                notice.hide();
            }
        }
    });
    
    if (base.global) {
        base.global.Notifier = module.exports;
    }
    
});

/*
---

name: Jx.Dialog

description: A Jx.Panel that implements a floating dialog.

license: MIT-style license.

requires:
 - Jx.Panel
 - more/Keyboard

optional:
 - More/Drag

provides: [Jx.Dialog]

css:
 - dialog

images:
 - dialog_chrome.png
 - dialog_resize.png

...
 */
// $Id$
/**
 * Class: Jx.Dialog
 *
 * Extends: <Jx.Panel>
 *
 * A Jx.Dialog implements a floating dialog.  Dialogs represent a useful way
 * to present users with certain information or application controls.
 * Jx.Dialog is designed to provide the same types of features as traditional
 * operating system dialog boxes, including:
 *
 * - dialogs may be modal (user must dismiss the dialog to continue) or
 * non-modal
 *
 * - dialogs are movable (user can drag the title bar to move the dialog
 * around)
 *
 * - dialogs may be a fixed size or allow user resizing.
 *
 * Jx.Dialog uses <Jx.ContentLoader> to load content into the content area
 * of the dialog.  Refer to the <Jx.ContentLoader> documentation for details
 * on content options.
 *
 * Example:
 * (code)
 * var dialog = new Jx.Dialog();
 * (end)
 *
 * Events:
 * open - triggered when the dialog is opened
 * close - triggered when the dialog is closed
 * change - triggered when the value of an input in the dialog is changed
 * resize - triggered when the dialog is resized
 *
 * Extends:
 * Jx.Dialog extends <Jx.Panel>, please go there for more details.
 * 
 * Locale Keys:
 * - dialog.resizeToolTip
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/dialog", function(require, exports, module){
    
    var base = require("../base"),
        Panel = require("./panel"),
        Stack = require("./stack");
        
    var dialog = module.exports = new Class({
        Extends: Panel,
        Family: 'Jx.Dialog',
    
        options: {
            /* Option: modal
             * (optional) {Boolean} controls whether the dialog will be modal
             * or not.  The default is to create modal dialogs.
             */
            modal: true,
            /** 
             * Option: maskOptions
             */
            maskOptions: {
              'class':'jxModalMask',
              maskMargins: true,
              useIframeShim: true,
              iframeShimOptions: {
                className: 'jxIframeShim'
              }
            },
            eventMaskOptions: {
              'class':'jxEventMask',
              maskMargins: false,
              useIframeShim: false,
              destroyOnHide: true
            },
            /* just overrides default position of panel, don't document this */
            position: 'absolute',
            /* Option: width
             * (optional) {Integer} the initial width in pixels of the dialog.
             * The default value is 250 if not specified.
             */
            width: 250,
            /* Option: height
             * (optional) {Integer} the initial height in pixels of the
             * dialog. The default value is 250 if not specified.
             */
            height: 250,
            /* Option: horizontal
             * (optional) {String} the horizontal rule for positioning the
             * dialog.  The default is 'center center' meaning the dialog will be
             * centered on the page.  See {<Jx.AutoPosition>} for details.
             */
            horizontal: 'center center',
            /* Option: vertical
             * (optional) {String} the vertical rule for positioning the
             * dialog.  The default is 'center center' meaning the dialog will be
             * centered on the page.  See {<Jx.AutoPosition>} for details.
             */
            vertical: 'center center',
            /* Option: label
             * (optional) {String} the title of the dialog box.
             */
            label: '',
            /* Option: parent
             * (optional) {HTMLElement} a reference to an HTML element that
             * the dialog is to be contained by.  The default value is for the dialog
             * to be contained by the body element.
             */
            //parent: null,
            /* Option: resize
             * (optional) {Boolean} determines whether the dialog is
             * resizeable by the user or not.  Default is false.
             */
            resize: false,
    
            /* Option: move
             * (optional) {Boolean} determines whether the dialog is
             * moveable by the user or not.  Default is true.
             */
            move: true,
            /*
             * Option: limit
             * (optional) {Object} || false
             * passed to the Drag instance of this dialog to limit the movement
             * {Object} must have x&y coordinates with a range, like {x:[0,500],y:[0,500]}.
             * Set an id or a reference of a DOM Element (ie 'document', 'myContainerWithId', 
             * $('myContainer'), $('domID').getParent()) to use these dimensions
             * as boundaries. Default is false.
             */
            limit : false,
            /* Option: close
             * (optional) {Boolean} determines whether the dialog is
             * closeable by the user or not.  Default is true.
             */
            close: true,
            /**
             * Option: destroyOnClose
             * (optional) {Boolean} determines whether closing the dialog also
             * destrpys it completely. Default is false
             */
            destroyOnClose: false,
            /**
             * Option: useKeyboard
             * (optional) {Boolean} determines whether the Dialog listens to keyboard events globally
             * Default is false
             */
            useKeyboard : false,
            /**
             * Option: keys
             * (optional) {Object} refers with the syntax for MooTools Keyboard Class
             * to functions. Set key to false to disable it manually 
             */
            keys: {
              'esc' : 'close'
            },
            /**
             * Option: keyboardMethods
             *
             * can be used to overwrite existing keyboard methods that are used inside
             * this.options.keys - also possible to add new ones.
             * Functions are bound to the dialog when using 'this'
             *
             * example:
             *  keys : {
             *    'alt+enter' : 'maximizeDialog'
             *  },
             *  keyboardMethods: {
             *    'maximizeDialog' : function(ev){
             *      ev.preventDefault();
             *      this.maximize();
             *    }
             *  }
             */
            keyboardMethods : {},
            collapsedClass: 'jxDialogMin',
            collapseClass: 'jxDialogCollapse',
            menuClass: 'jxDialogMenu',
            maximizeClass: 'jxDialogMaximize',
            closeClass: 'jxDialogClose',
            type: 'dialog',
            template: '<div class="jxDialog"><div class="jxDialogTitle"><img class="jxDialogIcon" src="'+base.aPixel.src+'" alt="" title=""/><span class="jxDialogLabel"></span><div class="jxDialogControls"></div></div><div class="jxDialogContentContainer"><div class="jxDialogContent"></div></div></div>'
        },
        classes: {
            domObj: 'jxDialog',
            title: 'jxDialogTitle',
            domImg: 'jxDialogIcon',
            domLabel: 'jxDialogLabel',
            domControls: 'jxDialogControls',
            contentContainer: 'jxDialogContentContainer',
            content: 'jxDialogContent'
        },
        /**
         * MooTools Keyboard class for Events (mostly used in Dialog.Confirm, Prompt or Message)
         * But also optional here with esc to close
         */
        keyboard : null,
        /**
         * APIMethod: render
         * renders Jx.Dialog
         */
        render: function() {
            this.isOpening = false;
            this.firstShow = true;
    
            this.options = Object.merge({},
                {parent:document.body}, // these are defaults that can be overridden
                this.options,
                {position: 'absolute'} // these override anything passed to the options
            );
    
            /* initialize the panel overriding the type and position */
            this.parent();
            this.openOnLoaded = this.open.bind(this);
            this.options.parent = document.id(this.options.parent);
    
            this.domObj.setStyle('display','none');
            //this.options.parent.adopt(this.domObj);  base Jx.Widget should handle this.
    
            /* the dialog is moveable by its title bar */
            if (this.options.move && typeof Drag != 'undefined') {
                this.title.addClass('jxDialogMoveable');
    
                this.options.limit = this.setDragLimit(this.options.limit);
                // local reference to use Drag instance variables inside onDrag()
                var self = this;
                // COMMENT: any reason why the drag instance isn't referenced to the dialog?
                new Drag(this.domObj, {
                    handle: this.title,
                    limit: this.options.limit,
                    onBeforeStart: (function(){
                        this.stack();
                    }).bind(this),
                    onStart: function() {
                        if (!self.options.modal && self.options.parent.mask) {
                          self.options.parent.mask(self.options.eventMaskOptions);
                        }
                        self.contentContainer.setStyle('visibility','hidden');
                        self.chrome.addClass('jxChromeDrag');
                        if(self.options.limit) {
                          var coords = self.options.limitOrig.getCoordinates();
                          for(var i in coords) {
                            window.console ? console.log(i, coords[i]) : false;
                          }
                          this.options.limit = self.setDragLimit(self.options.limitOrig);
                        }
                    }, // COMMENT: removed bind(this) for setting the limit to the drag instance
                    onDrag: function() {
                      if(this.options.limit) {
                        // find out if the right border of the dragged element is out of range
                        if(this.value.now.x+self.options.width >= this.options.limit.x[1]) {
                          this.value.now.x = this.options.limit.x[1] - self.options.width;
                          this.element.setStyle('left',this.value.now.x);
                        }
                        // find out if the bottom border of the dragged element is out of range
                        if(this.value.now.y+self.options.height >= this.options.limit.y[1]) {
                          this.value.now.y = this.options.limit.y[1] - self.options.height;
                          this.element.setStyle('top',this.value.now.y);
                        }
                      }
                    },
                    onComplete: (function() {
                        if (!this.options.modal && this.options.parent.unmask) {
                          this.options.parent.unmask();
                        }
                        this.chrome.removeClass('jxChromeDrag');
                        this.contentContainer.setStyle('visibility','');
                        var left = Math.max(this.chromeOffsets.left, parseInt(this.domObj.style.left,10));
                        var top = Math.max(this.chromeOffsets.top, parseInt(this.domObj.style.top,10));
                        this.options.horizontal = left + ' left';
                        this.options.vertical = top + ' top';
                        this.position(this.domObj, this.options.parent, this.options);
                        this.options.left = parseInt(this.domObj.style.left,10);
                        this.options.top = parseInt(this.domObj.style.top,10);
                        if (!this.options.closed) {
                            this.domObj.resize(this.options);
                        }
                    }).bind(this)
                });
            }
    
            /* the dialog is resizeable */
            if (this.options.resize && typeof Drag != 'undefined') {
                this.resizeHandle = new Element('div', {
                    'class':'jxDialogResize',
                    title: this.getText({set:'Jx',key:'panel',value:'resizeTooltip'}),
                    styles: {
                        'display':this.options.closed?'none':'block'
                    }
                });
                this.domObj.appendChild(this.resizeHandle);
    
                this.resizeHandleSize = this.resizeHandle.getSize();
                this.resizeHandle.setStyles({
                    bottom: this.resizeHandleSize.height,
                    right: this.resizeHandleSize.width
                });
                this.domObj.makeResizable({
                    handle:this.resizeHandle,
                    onStart: (function() {
                        if (!this.options.modal && this.options.parent.mask) {
                          this.options.parent.mask(this.options.eventMaskOptions);
                        }
                        this.contentContainer.setStyle('visibility','hidden');
                        this.chrome.addClass('jxChromeDrag');
                    }).bind(this),
                    onDrag: (function() {
                        this.resizeChrome(this.domObj);
                    }).bind(this),
                    onComplete: (function() {
                        if (!this.options.modal && this.options.parent.unmask) {
                          this.options.parent.unmask();
                        }
                        this.chrome.removeClass('jxChromeDrag');
                        var size = this.domObj.getMarginBoxSize();
                        this.options.width = size.width;
                        this.options.height = size.height;
                        this.layoutContent();
                        this.domObj.resize(this.options);
                        this.contentContainer.setStyle('visibility','');
                        this.fireEvent('resize');
                        this.resizeChrome(this.domObj);
    
                    }).bind(this)
                });
            }
            /* this adjusts the zIndex of the dialogs when activated */
            this.domObj.addEvent('mousedown', (function(){
                this.stack();
            }).bind(this));
    
            // initialize keyboard class
            this.initializeKeyboard();
        },
    
        /**
         * Method: resize
         * resize the dialog.  This can be called when the dialog is closed
         * or open.
         *
         * Parameters:
         * width - the new width
         * height - the new height
         * autoPosition - boolean, false by default, if resizing an open dialog
         * setting this to true will reposition it according to its position
         * rules.
         */
        resize: function(width, height, autoPosition) {
            this.options.width = (width === undefined)? this.options.width:width;
            this.options.height = (height === undefined)? this.options.height: height;
            if (this.domObj.getStyle('display') != 'none') {
                this.layoutContent();
                this.domObj.resize(this.options);
                this.fireEvent('resize');
                this.resizeChrome(this.domObj);
                if (autoPosition) {
                    this.position(this.domObj, this.options.parent, this.options);
                }
            } else {
                this.firstShow = false;
            }
        },
    
        /**
         * Method: sizeChanged
         * overload panel's sizeChanged method
         */
        sizeChanged: function() {
            if (!this.options.closed) {
                this.layoutContent();
            }
        },
    
        /**
         * Method: toggleCollapse
         * sets or toggles the collapsed state of the panel.  If a
         * new state is passed, it is used, otherwise the current
         * state is toggled.
         *
         * Parameters:
         * state - optional, if passed then the state is used,
         * otherwise the state is toggled.
         */
        toggleCollapse: function(state) {
            if (state !== undefined && state !== null) {
                this.options.closed = state;
            } else {
                this.options.closed = !this.options.closed;
            }
            if (this.options.closed) {
                if (!this.domObj.hasClass(this.options.collapsedClass)) {
                    this.domObj.addClass(this.options.collapsedClass);
                }
                this.contentContainer.setStyle('display','none');
                if (this.resizeHandle) {
                    this.resizeHandle.setStyle('display','none');
                }
            } else {
                if (this.domObj.hasClass(this.options.collapsedClass)) {
                    this.domObj.removeClass(this.options.collapsedClass);
                }
                this.contentContainer.setStyle('display','block');
                if (this.resizeHandle) {
                    this.resizeHandle.setStyle('display','block');
                }
            }
    
            if (this.options.closed) {
                var m = this.domObj.measure(function(){
                    return this.getSizes(['margin'],['top','bottom']).margin;
                });
                var size = this.title.getMarginBoxSize();
                this.domObj.resize({height: m.top + size.height + m.bottom});
                this.fireEvent('collapse');
            } else {
                this.domObj.resize(this.options);
                this.fireEvent('expand');
            }
            this.showChrome(this.domObj);
        },
        
        /**
         * Method: maximize
         * Called when the maximize button of a dialog is clicked. It will maximize
         * the dialog to match the size of its parent.
         */
        maximize: function () {
            
            if (!this.maximized) {
                //get size of parent
                var p = this.options.parent;
                var size;
                
                if (p === document.body) {
                    size = base.getPageDimensions();
                } else {
                    size = p.getBorderBoxSize();
                }
                this.previousSettings = {
                    width: this.options.width,
                    height: this.options.height,
                    horizontal: this.options.horizontal,
                    vertical: this.options.vertical,
                    left: this.options.left,
                    right: this.options.right,
                    top: this.options.top,
                    bottom: this.options.bottom
                };
                this.options.width = size.width;
                this.options.height = size.height;
                this.options.vertical = '0 top';
                this.options.horizontal = '0 left';
                this.options.right = 0;
                this.options.left = 0;
                this.options.top = 0;
                this.options.bottom = 0;
                this.domObj.resize(this.options);
                this.fireEvent('resize');
                this.resizeChrome(this.domObj);
                this.maximized = true;
                this.domObj.addClass('jxDialogMaximized');
                this.fireEvent('maximize');
            } else {
                this.options = Object.merge({},this.options, this.previousSettings);
                this.domObj.resize(this.options);
                this.fireEvent('resize');
                this.resizeChrome(this.domObj);
                this.maximized = false;
                if (this.domObj.hasClass('jxDialogMaximized')) {
                    this.domObj.removeClass('jxDialogMaximized');
                }
                this.fireEvent('restore');
            }
        },
    
        /**
         * Method: show
         * show the dialog, external code should use the <Jx.Dialog::open> method
         * to make the dialog visible.
         */
        show : function( ) {
            /* prepare the dialog for display */
            this.domObj.setStyles({
                'display': 'block',
                'visibility': 'hidden'
            });
            this.toolbar.update();
            
            /* do the modal thing */
            if (this.options.modal && this.options.parent.mask) {
              var opts = Object.merge({},this.options.maskOptions || {}, {
                style: {
                  'z-index': base.getNumber(this.domObj.getStyle('z-index')) - 1
                }
              });
              this.options.parent.mask(opts);
              Stack.stack(this.options.parent.get('mask').element);
            }
            /* stack the dialog */
            this.stack();
    
            if (this.options.closed) {
                var m = this.domObj.measure(function(){
                    return this.getSizes(['margin'],['top','bottom']).margin;
                });
                var size = this.title.getMarginBoxSize();
                this.domObj.resize({height: m.top + size.height + m.bottom});
            } else {
                this.domObj.resize(this.options);
            }
            
            if (this.firstShow) {
                this.contentContainer.resize({forceResize: true});
                this.layoutContent();
                this.firstShow = false;
                /* if the chrome got built before the first dialog show, it might
                 * not have been properly created and we should clear it so it
                 * does get built properly
                 */
                if (this.chrome) {
                    this.chrome.dispose();
                    this.chrome = null;
                }
            }
            /* update or create the chrome */
            this.showChrome(this.domObj);
            /* put it in the right place using auto-positioning */
            this.position(this.domObj, this.options.parent, this.options);
            this.domObj.setStyle('visibility', 'visible');
        },
        /**
         * Method: hide
         * hide the dialog, external code should use the <Jx.Dialog::close>
         * method to hide the dialog.
         */
        hide : function() {
            this.domObj.setStyle('display','none');
            this.unstack();
            if (this.options.modal && this.options.parent.unmask) {
              Stack.unstack(this.options.parent.get('mask').element);
              this.options.parent.unmask();
            }
            if(this.options.useKeyboard && this.keyboard != null) {
              this.keyboard.deactivate();
            }
        },
        /**
         * Method: openURL
         * open the dialog and load content from the provided url.  If you don't
         * provide a URL then the dialog opens normally.
         *
         * Parameters:
         * url - <String> the url to load when opening.
         */
        openURL: function(url) {
            if (url) {
                this.options.contentURL = url;
                this.options.content = null;  //force Url loading
                this.setBusy();
                this.loadContent(this.content);
                this.addEvent('contentLoaded', this.openOnLoaded);
            } else {
                this.open();
            }
        },
    
        /**
         * Method: open
         * open the dialog.  This may be delayed depending on the
         * asynchronous loading of dialog content.  The onOpen
         * callback function is called when the dialog actually
         * opens
         */
        open: function() {
            if (!this.isOpening) {
                this.isOpening = true;
            }
            // COMMENT: this works only for onDemand -> NOT for cacheContent = false..
            // for this loading an URL everytime, use this.openURL(url) 
            if(!this.contentIsLoaded && this.options.loadOnDemand) {
              this.loadContent(this.content);
            }
            if (this.contentIsLoaded) {
                this.removeEvent('contentLoaded', this.openOnLoaded);
                this.show();
                this.fireEvent('open', this);
                this.isOpening = false;
            } else {
                this.addEvent('contentLoaded', this.openOnLoaded);
            }
            if(this.options.useKeyboard && this.keyboard != null) {
              this.keyboard.activate();
            }
        },
        /**
         * Method: close
         * close the dialog and trigger the onClose callback function
         * if necessary
         */
        close: function() {
            this.isOpening = false;
            this.hide();
            if (this.options.destroyOnClose) {
                this.domObj.dispose();
            }
            this.fireEvent('close',[this]);
        },
    
        cleanup: function() { },
        
        /**
         * APIMethod: isOpen
         * returns true if the dialog is currently open, false otherwise
         */
        isOpen: function () {
            //check to see if we're visible
            return !((this.domObj.getStyle('display') === 'none') || (this.domObj.getStyle('visibility') === 'hidden'));
        },
        
        changeText: function (lang) {
            this.parent();
            if (this.maxM != undefined && this.maxM != null) {
                if (this.maximize) {
                    this.maxM.setLabel(this.getText({set:'Jx',key:'panel',value:'restoreLabel'}));
                } else {
                    this.maxM.setLabel(this.getText({set:'Jx',key:'panel',value:'maximizeLabel'}));
                }
            }
            if (this.resizeHandle != undefined && this.resizeHandle != null) {
                this.resizeHandle.set('title', this.getText({set:'Jx',key:'dialog',value:'resizeTooltip'}));
            }
          this.toggleCollapse(false);
        },
    
        initializeKeyboard: function() {
          if(this.options.useKeyboard) {
            var self = this;
            this.keyboardEvents = {};
            this.keyboardMethods = {
              close : function(ev) {ev.preventDefault();self.close()}
            }
            this.keyboard = new Keyboard({
              events: this.getKeyboardEvents()
            });
          }
        },
    
        /**
         * Method: getKeyboardMethods
         * used by this and all child classes to have methods listen to keyboard events,
         * returned object will be parsed to the events object of a MooTools Keyboard instance
         *
         * @return Object
         */
        getKeyboardEvents : function() {
          var self = this;
          for(var i in this.options.keys) {
            // only add a reference once, otherwise keyboard events will be fired twice in subclasses
            if(this.keyboardEvents[i] === undefined || this.keyboardEvents[i] === null) {
              if(this.keyboardMethods[this.options.keys[i]] !== undefined &&
                 this.keyboardMethods[this.options.keys[i]] !== null) {
                this.keyboardEvents[i] = this.keyboardMethods[this.options.keys[i]];
              }else if(this.options.keyboardMethods[this.options.keys[i]] !== undefined &&
                       this.options.keyboardMethods[this.options.keys[i]] !== null){
                this.keyboardEvents[i] = this.options.keyboardMethods[this.options.keys[i]].bind(self);
              }else if(typeOf(this.options.keys[i]) == 'function') {
                this.keyboardEvents[i] = this.options.keys[i].bind(self);
              }else{
                // allow disabling of special keys by setting them to false or null with having a warning
                if(this.options.keyboardMethods[this.options.keys[i]] != false) {
                  console != undefined ? console.warn("keyboard method %o not defined for %o", this.options.keys[i], this) : false;
                }
              }
            }
          }
          return this.keyboardEvents;
        },
    
        /**
         * Method: setDragLimit
         * calculates the drag-dimensions of an given element to drag
         *
         * Parameters:
         * - reference {Object} (optional) the element|elementId|object to set the limits
         */
        setDragLimit : function(reference) {
          if(reference !== undefined && reference !== null) this.options.limit = reference;
          
          // check drag limit if it is an container or string for an element and use dimensions
          var limitType = this.options.limit != null ? typeOf(this.options.limit) : false;
          if(this.options.limit && limitType != 'object') {
            var coords = false;
            switch(limitType) {
              case 'string':
                if(document.id(this.options.limit)) {
                  coords = document.id(this.options.limit).getCoordinates();
                }
                break;
              case 'element':
              case 'document':
              case 'window':
                coords = this.options.limit.getCoordinates();
                break;
            }
            if(coords) {
              this.options.limitOrig = this.options.limit;
              this.options.limit = {
                x : [coords.left, coords.right],
                y : [coords.top, coords.bottom]
              }
            }else{
              this.options.limit = false;
            }
          }
          return this.options.limit;
        },
    
        /**
         * gets called by parent class Jx.Panel and decides whether to load content or not
         */
        shouldLoadContent: function() {
          return !this.options.loadOnDemand;
        }
    });
    
    if (base.global) {
        base.global.Dialog = module.exports;
    }
    
});



/*
---

name: Jx.Compare

description: Class that provides functions for comparing various data types. Used by the Jx.Sort class and it's descendants

license: MIT-style license.

requires:
 - Jx.Object
 - More/Date.Extras

provides: [Jx.Compare]

...
 */
// $Id$
/**
 * Class: Jx.Compare
 *
 * Extends: <Jx.Object>
 *
 * Class that holds functions for doing comparison operations.
 * This class requires the mootools-more Date() extensions.
 *
 * notes:
 * Each function that does a comparison returns
 *
 * 0 - if equal.
 * 1 - if the first value is greater that the second.
 * -1 - if the first value is less than the second.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define("jx/compare", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
        
    var compare = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.Compare',
    
        options: { separator: '.' },
    
        /**
         * APIMethod: alphanumeric
         * Compare alphanumeric variables. This is case sensitive
         *
         * Parameters:
         * a - a value
         * b - another value
         */
        alphanumeric: function (a, b) {
            return (a === b) ? 0 :(a < b) ? -1 : 1;
        },
    
        /**
         * APIMethod: numeric
         * Compares numbers
         *
         * Parameters:
         * a - a number
         * b - another number
         */
        numeric: function (a, b) {
            return this.alphanumeric(this.convert(a), this.convert(b));
        },
    
        /**
         * Method: _convert
         * Normalizes numbers relative to the separator.
         *
         * Parameters:
         * val - the number to normalize
         *
         * Returns:
         * the normalized value
         */
        convert: function (val) {
            if (typeOf(val) === 'string') {
                var neg = false;
                if (val.substr(0,1) == '-') {
                    neg = true;
                }
                val = parseFloat(val.replace(/^[^\d\.]*([\d., ]+).*/g, "$1").replace(new RegExp("[^\\\d" + this.options.separator + "]", "g"), '').replace(/,/, '.')) || 0;
                if (neg) {
                    val = val * -1;
                }
            }
            return val || 0;
        },
    
        /**
         * APIMethod: ignorecase
         * Compares to alphanumeric strings without regard to case.
         *
         * Parameters:
         * a - a value
         * b - another value
         */
        ignorecase: function (a, b) {
            return this.alphanumeric(("" + a).toLowerCase(), ("" + b).toLowerCase());
        },
    
        /**
         * APIMethod: currency
         * Compares to currency values.
         *
         * Parameters:
         * a - a currency value without the $
         * b - another currency value without the $
         */
        currency: function (a, b) {
            return this.numeric(a, b);
        },
    
        /**
         * APIMethod: date
         * Compares 2 date values (either a string or an object)
         *
         * Parameters:
         * a - a date value
         * b - another date value
         */
        date: function (a, b) {
            var x = new Date().parse(a),
                y = new Date().parse(b);
            return (x < y) ? -1 : (x > y) ? 1 : 0;
        },
        /**
         * APIMethod: boolean
         * Compares 2 bolean values
         *
         * Parameters:
         * a - a boolean value
         * b - another boolean value
         */
        'boolean': function (a, b) {
            return (a === true && b === false) ? -1 : (a === b) ? 0 : 1;
        }
    
    });
    
    if (base.global) {
        base.global.Compare = module.exports;
    }
    
});

/*
---

name: Jx.Field

description: Base class for all inputs

license: MIT-style license.

requires:
 - Jx.Form

provides: [Jx.Field]


...
 */
// $Id$
/**
 * Class: Jx.Field
 *
 * Extends: <Jx.Widget>
 *
 * This class is the base class for all form fields.
 *
 *
 * Example:
 * (code)
 * (end)
 * 
 * Locale Keys:
 * - field.requiredText
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Form = require("./form"),
        Fieldset = null;
        
    var field = module.exports = new Class({
    
        Extends : Widget,
        Family: 'Jx.Field',
        pluginNamespace: 'Field',
        Binds: ['changeText'],
        
        options : {
            /**
             * Option: id
             * The ID assigned to the container of the Jx.Field element, this is
             * not the id of the input element (which is internally computed to be
             * unique)
             */
            id : null,
            /**
             * Option: name
             * The name of the field (used when submitting to the server). Will also be used for the
             * name attribute of the field.
             */
            name : null,
            /**
             * Option: label
             * The text that goes next to the field.
             */
            label : null,
            /**
             * Option: labelSeparator
             * A character to use as the separator between the label and the input.
             * Make it an empty string for no separator.
             */
            labelSeparator : ":",
            /**
             * Option: value
             * A default value to populate the field with.
             */
            value : null,
            /**
             * Option: tag
             * a string to use as the HTML of the tag element (default is a
             * <span> element).
             */
            tag : null,
            /**
             * Option: tip
             * A string that will eventually serve as a tooltip for an input field.
             * Currently only implemented as OverText for text fields.
             */
            tip : null,
            /**
             * Option: template
             * A string holding the template for the field.
             */
            template : null,
            /**
             * Option: containerClass
             * a CSS class that will be added to the containing element.
             */
            containerClass : null,
            /**
             * Option: labelClass
             * a CSS to add to the label
             */
            labelClass : null,
            /**
             * Option: fieldClass
             * a CSS class to add to the input field
             */
            fieldClass : null,
            /**
             * Option: tagClass
             * a CSS class to add to the tag field
             */
            tagClass : null,
            /**
             * Option: required
             * Whether the field is required. Setting this to true will trigger
             * the addition of a "required" validator class and the form
             * will not submit until it is filled in and validates provided
             * that the plugin Jx.Plugin.Field.Validator has been added to this
             * field.
             */
            required : false,
            /**
             * Option: readonly
             * {True|False} defaults to false. Whether this field is readonly.
             */
            readonly : false,
            /**
             * Option: disabled
             * {True|False} defaults to false. Whether this field is disabled.
             */
            disabled : false,
            /**
             * Option: defaultAction
             * {Boolean} defaults to false, if true and this field is a button
             * of some kind (Jx.Button, a button or an input of type submit) then
             * if the user hits the enter key on any field in the form except a
             * textarea, this field will be activated as if clicked
             */
            defaultAction: false
        },
    
        /**
         * Property: overtextOptions
         * The default options Jx uses for mootools-more's OverText
         * plugin
         */
        overtextOptions : {
            element : 'label'
        },
    
        /**
         * Property: field
         * An element representing the input field itself.
         */
        field : null,
        /**
         * Property: label
         * A reference to the label element for this field
         */
        label : null,
        /**
         * Property: tag
         * A reference to the "tag" field of this input if available
         */
        tag : null,
        /**
         * Property: id
         * A computed, unique id attached to the input element of this field.
         */
        id : null,
        /**
         * Property: overText
         * The overText instance for this field.
         */
        overText : null,
        /**
         * Property: type
         * Indicates that this is a field type
         */
        type : 'field',
        /**
         * Property: classes
         * The classes to search for in the template. Not
         * required, but we look for them.
         */
        classes : {
            domObj: 'jxInputContainer',
            label: 'jxInputLabel',
            tag: 'jxInputTag'
        },
    
        init: function(){
            Fieldset = require("./fieldset");
            this.parent();
        },
        /**
         * APIMethod: render
         */
        render : function () {
            this.classes.field = 'jxInput'+this.type;
            var name = (this.options.name !== undefined && this.options.name !== null) ? this.options.name : '';
            this.options.template = this.options.template.substitute({name:name});
            this.parent();
    
            this.id = this.generateId();
            this.name = this.options.name;
    
            if (this.type !== undefined && this.type !== null) {
                this.domObj.addClass('jxInputContainer'+this.type);
            }
    
            if (this.options.containerClass !== undefined && this.options.containerClass !== null) {
                this.domObj.addClass(this.options.containerClass);
            }
            if (this.options.required !== undefined && this.options.required !== null && this.options.required) {
                this.domObj.addClass('jxFieldRequired');
                if (this.options.validatorClasses !== undefined && is.options.validatorClasses !== null) {
                    this.options.validatorClasses = 'required ' + this.options.validatorClasses;
                } else {
                    this.options.validatorClasses = 'required';
                }
            }
    
    
            // FIELD
            if (this.field) {
                if (this.options.fieldClass !== undefined && this.options.fieldClass !== null) {
                    this.field.addClass(this.options.fieldClass);
                }
    
                if (this.options.value !== undefined && this.options.value !== null) {
                    this.field.set('value', this.options.value);
                }
    
                this.field.set('id', this.id);
    
                if (this.options.readonly !== undefined &&
                        this.options.readonly !== null &&
                        this.options.readonly) {
                    this.field.set("readonly", "readonly");
                    this.field.addClass('jxFieldReadonly');
                }
    
                if (this.options.disabled !== undefined &&
                        this.options.disabled !== null &&
                        this.options.disabled) {
                    this.field.set("disabled", "disabled");
                    this.field.addClass('jxFieldDisabled');
                }
                
                //add events
                this.field.addEvents({
                  'focus': this.onFocus.bind(this),
                  'blur': this.onBlur.bind(this),
                  'change': this.onChange.bind(this)
                });
    
                this.field.store('field', this);
    
                // add click event to label to set the focus to the field
                // COMMENT: tried it without a function using addEvent('click', this.field.focus.bind(this)) but crashed in IE
                if(this.label) {
                  this.label.addEvent('click', function() {
                    this.field.focus();
                  }.bind(this));
                }
            }
            // LABEL
            if (this.label) {
                if (this.options.labelClass !== undefined && this.options.labelClass !== null) {
                    this.label.addClass(this.options.labelClass);
                }
                if (this.options.label !== undefined && this.options.label !== null) {
                    this.label.set('html', this.getText(this.options.label) +
                            this.options.labelSeparator);
                }
    
                this.label.set('for', this.id);
    
                if (this.options.required) {
                    this.requiredText = new Element('em', {
                        'html' : this.getText({set:'Jx',key:'field',value:'requiredText'}),
                        'class' : 'required'
                    });
                    this.requiredText.inject(this.label);
                }
    
            }
    
            // TAG
            if (this.tag) {
                if (this.options.tagClass !== undefined && this.options.tagClass !== null) {
                    this.tag.addClass(this.options.tagClass);
                }
                if (this.options.tag !== undefined && this.options.tag !== null) {
                    this.tag.set('html', this.options.tag);
                }
            }
    
            if (this.options.form !== undefined &&
                    this.options.form !== null &&
                    this.options.form instanceof Form) {
                this.form = this.options.form;
                this.form.addField(this);
            }
    
        },
        /**
         * APIMethod: setValue 
         * Sets the value property of the field
         *
         * Parameters:
         * v - The value to set the field to.
         */
        setValue : function (v) {
            if (!this.options.readonly) {
                this.field.set('value', v);
            }
        },
    
        /**
         * APIMethod: getValue
         * Returns the current value of the field.
         */
        getValue : function () {
            return this.field.get("value");
        },
    
        /**
         * APIMethod: reset
         * Sets the field back to the value passed in the
         * original options
         */
        reset : function () {
            this.setValue(this.options.value);
            this.fireEvent('reset', this);
        },
        /**
         * APIMethod: disable
         * Disabled the field
         */
        disable : function () {
            this.options.disabled = true;
            this.field.set("disabled", "disabled");
            this.field.addClass('jxFieldDisabled');
        },
        /**
         * APIMethod: enable
         * Enables the field
         */
        enable : function () {
            this.options.disabled = false;
            this.field.erase("disabled");
            this.field.removeClass('jxFieldDisabled');
        },
        
        /**
         * APIMethod: addTo
         * Overrides default Jx.Widget AddTo() so that we can call .add() if
         * adding to a Jx.Form or Jx.Fieldset object.
         *
         * Parameters:
         * what - the element or object to add this field to.
         * where - where in the object to place it. Not valid if adding to Jx.Form
         *      or Jx.Fieldset.
         */
        addTo: function(what, where) {
            if (what instanceof Fieldset || what instanceof Form) {
                what.add(this);
            } else {
                this.parent(what, where);
            }
            return this;
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         *    translations changed.
         */
        changeText: function (lang) {
            this.parent();
            if (this.options.label !== undefined && this.options.label !== null && this.label) {
              this.label.set('html', this.getText(this.options.label) + this.options.labelSeparator);
            }
            if(this.options.required) {
              this.requiredText = new Element('em', {
                  'html' : this.getText({set:'Jx',key:'field',value:'requiredText'}),
                  'class' : 'required'
              });
              this.requiredText.inject(this.label);
            }
            if (this.requiredText !== undefined && his.requiredText !== null) {
              this.requiredText.set('html',this.getText({set:'Jx',key:'field',value:'requiredText'}));
            }
        }, 
        
        onFocus: function() {
          this.fireEvent('focus', this);
        },
        
        onBlur: function () {
          this.fireEvent('blur',this);
        },
        
        onChange: function () {
          this.fireEvent('change', this);
        },
        
        setBusy: function(state, withoutMask) {
          if (!withoutMask) {
            this.parent(state);
          }
          this.field.set('readonly', state || this.options.readonly);
        }
    
    });

    if (base.global) {
        base.global.Field = module.exports;
    }
    
});

/*
---

name: Jx.Fieldset

description: Used to create fieldsets in Forms

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Field
 - Jx.Form

provides: [Jx.Fieldset]

...
 */
// $Id$
/**
 * Class: Jx.Fieldset
 *
 * Extends: <Jx.Widget>
 *
 * This class represents a fieldset. It can be used to group fields together.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 *
 */
define("jx/fieldset",function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Form = require("./form"),
        Field = require("./field");
        
    var fieldset = module.exports = new Class({
    
        Extends : Widget,
        Family: 'Jx.Fieldset',
    
        options : {
            /**
             * Option: legend
             * The text for the legend of a fieldset. Default is null
             * or no legend.
             */
            legend : null,
            /**
             * Option: id
             * The id to assign to this element
             */
            id : null,
            /**
             * Option: fieldsetClass
             * A CSS class to assign to the fieldset. Useful for custom styling of
             * the element
             */
            fieldsetClass : null,
            /**
             * Option: legendClass
             * A CSS class to assign to the legend. Useful for custom styling of
             * the element
             */
            legendClass : null,
            /**
             * Option: template
             * a template for how this element should be rendered
             */
            template : '<fieldset class="jxFieldset"><legend><span class="jxFieldsetLegend"></span></legend></fieldset>',
            /**
             * Option: form
             * The <Jx.Form> that this fieldset should be added to
             */
            form : null
        },
    
        classes: {
            domObj: 'jxFieldset',
            legend: 'jxFieldsetLegend'
        },
    
        /**
         * Property: legend
         * a holder for the legend Element
         */
        legend : null,
    
        /**
         * APIMethod: render
         * Creates a fieldset.
         */
        render : function () {
            this.parent();
    
            this.id = this.options.id;
    
            if (this.options.form !== undefined &&
                    this.options.form !== null &&
                    instanceOf(this.options.form, Form)) {
                this.form = this.options.form;
            }
    
            //FIELDSET
            if (this.domObj) {
                if (this.options.id !== undefined && this.options.id !== null) {
                    this.domObj.set('id', this.options.id);
                }
                if (this.options.fieldsetClass !== undefined && this.options.fieldsetClass !== null) {
                    this.domObj.addClass(this.options.fieldsetClass);
                }
            }
    
            if (this.legend) {
                if (this.options.legend !== undefined && this.options.legend !== null) {
                    this.legend.set('html', this.getText(this.options.legend));
                    if (this.options.legendClass !== undefined && this.options.legendClass !== null) {
                        this.legend.addClass(this.options.legendClass);
                    }
                } else {
                    this.legend.destroy();
                }
            }
            
            if (this.options.items !== undefined && this.options.items !== null) {
                this.addItems(this, this.options.items);
            }
        },
        
        addItems: function (container, options) {
            Object.each(options, function(opt){
                var t = typeOf(opt);
                if (t === 'element' || t === 'string' || instanceOf(opt, Widget)) {
                    this.add(opt);
                } else if (t === 'object' && opt['class'] !== undefined && opt['class'] !== null) {
                    //opt.options.parent = container;
                    opt.options.form = this;
                    if (opt['class'].toLowerCase() === 'fieldset') {
                        this.add(new Fieldset(opt.options));
                    } else {
                        var field = require("./field/" + opt['class']);
                        this.add(new field(opt.options));
                    }
                }
            },this);
        },
        
        /**
         * APIMethod: add
         * Adds fields to this fieldset
         *
         * Parameters:
         * pass as many fields to this method as you like. They should be
         * <Jx.Field> objects
         */
        add : function () {
            var field;
            for (var x = 0; x < arguments.length; x++) {
                field = arguments[x];
                //add form to the field and field to the form if not already there
                if (instanceOf(field, Field) && 
                    (field.form === undefined || field.form === null) &&
                    this.form !== undefined && this.form !== null) {
                    field.form = this.form;
                    this.form.addField(field);
                }
                this.domObj.grab(document.id(field));
            }
            return this;
        },
        
        /**
         * APIMethod: addTo
         *
         */
        addTo: function(what) {
            if (instanceOf(what, Form)) {
                this.form = what;
                this.form.add(this);
            } else if (instanceOf(what, fieldset)) {
                this.form = what.form;
                what.add(this);
            } else {
                this.parent(what);
            }
            return this;
        }
        
    });

    if (base.global) {
        base.global.Fieldset = module.exports;
    }
    
});

/*
---

name: Jx.Editor

description: A very simplistic IFrame-based WYSIWYG editor.

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Layout
 - Jx.Toolbar.Container
 - Core/Browser

provides: [Jx.Editor]

css:
 - editor

...
 */
/**
 * Class: Jx.Editor
 *
 * Extends: <Jx.Widget>
 * 
 * a very simplistic IFrame-based WYSIWYG editor.
 * 
 * Be sure that you place this editor inside a container of some sort that
 * has at least position:relative on it. If it doesn't the editor will break
 * out of the container.
 * 
 * Events:
 * - preToggleView
 * - postToggleView
 * - editorFocus
 * - editorBlur
 * - editorMouseUp
 * - editorPaste
 * - editorMouseEnter
 * - editorClick
 * - editorKeypress
 * - editorKeyUp
 * - editorKeyDown
 * - editorCut
 * - editorCopy
 *
 * Copyright (c) 2011 by Jonathan Bomgardner
 * Licensed under an mit-style license
 * 
 * Inspired by (and a great deal of code from) mooEditable
 */
define("jx/editor", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Toolbar = require("./toolbar"),
        Layout = require("./layout"),
        EditorSelection = null,
        ToolbarContainer = require("./toolbar/container");
        
    var editor = module.exports = new Class({
    
        Extends: Widget,
        Family: 'Jx.Editor',
        
        options: {
            /**
             * Option: template
             * The template to use in constructing the editor
             */
            template: '<span class="jxEditor"><span class="jxEditorToolbar"></span><span class="jxEditorIframe"></span><textarea class="jxEditorTextarea"></textarea></span></span>',
            /**
             * Option: editorCssFile
             * The location of a css file to use in the IFrame of the editor. 
             * Can be a relative or absolue path.
             */
            editorCssFile: null,
            /**
             * Option: html
             * This is a string template for what will be injected into the iframe.
             */
            html: '<!DOCTYPE html><html style="height: 100%; margin: 0; padding: 0;"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">{stylesheet}</head><body style="height: 100%; padding: 0; margin: 0;"></body></html>',
            /**
             * Option: stylesheetTemplate
             * a string template of the link tag used to add the editorCssFile 
             * to the html template
             */
            stylesheetTemplate: ' <link href="{file}" type="text/css" rel="stylesheet" media="screen, projection" title="jxEditorStylesheet" />',
            /**
             * Option: content
             * This should contain the starting content of the editor in 
             * HTML form.
             */
            content: null,
            /**
             * Option: buttons
             * an array of arrays. Each separate array represents the buttons (plugins)
             * for a single toolbar.
             */
            buttons: null,
            cleanup: true,
            xhtml : true,
            semantics : true,
            textareaName: 'editor'
        },
        
        classes: {
            domObj: 'jxEditor',
            container: 'jxEditorToolbar',
            iframe: 'jxEditorIframe',
            textarea: 'jxEditorTextarea'
        },
        
        pluginNamespace: 'Editor',
        
        blockEls: /^(H[1-6]|HR|P|DIV|ADDRESS|PRE|FORM|TABLE|LI|OL|UL|TD|CAPTION|BLOCKQUOTE|CENTER|DL|DT|DD)$/i,
        
        init: function () {
            EditorSelection = require("./editor/selection");
            
            if (this.options.parent !== null && this.options.parent !== undefined) {
                this.options.deferRender = false;
            } else {
                this.options.deferRender = true;
            }
            this.parent();
        },
        
        mode: null,
        
        keys: {},
        
        editorDisabled: false,
        
        toolbars: [],
        
        render: function () {
            this.parent();
            
            //add name to textarea
            this.textarea.set('name', this.options.textareaName);
            
            //create the toolbar
            var i = Array.from(this.options.buttons).length;
            for (var j = 0; j < i; j++) {
                var c = new ToolbarContainer({
                    scroll: false
                }).addTo(this.container);
                this.toolbars.push(new Toolbar());
                c.add(this.toolbars[j]);
            }
            
            
            if (this.options.parent) {
                //This is handled in the Widget base class now.
                //document.id(this.domObj).inject(document.id(this.options.parent));
                new Layout(this.domObj);
                this.domObj.resize();
            }
    
    
            var iframe = new IFrame({
                'class': 'jxEditorIframe',
                src: 'javascript:""',
                frameborder: 0
            });
            
    
            
            this.mode = 'iframe';
            iframe.replaces(this.iframe);
            this.iframe = iframe;
            this.iframe.setStyles({
                display: 'block',
                visibility: ''
            });
    
            this.win = iframe.contentWindow;
            this.doc = (this.win !== null && 
                        this.win !== undefined) ? this.win.document : iframe.contentDocument.document;
                        
            // Deal with weird quirks on Gecko
            if (Browser.firefox) this.doc.designMode = 'On';
    
            if (this.options.editorCssFile !== null && 
                this.options.editorCssFile !== undefined) {
                this.options.stylesheetTemplate = this.options.stylesheetTemplate.substitute({file: this.options.editorCssFile});
            } else {
                this.options.stylesheetTemplate = '';
            }
            
            (Browser.ie) ? this.doc.body.contentEditable = true : this.doc.designMode = 'On';
    
            this.options.html = this.options.html.substitute({stylesheet: this.options.stylesheetTemplate, js: this.options.mootoolsTemplate});
            this.doc.open();
            this.doc.write(this.options.html);
            this.doc.close();
    
            // Mootoolize window, document and body
            Object.append(this.win, new Window);
            Object.append(this.doc, new Document);
            if (Browser.Element){
                var winElement = this.win.Element.prototype;
                for (var method in Element){ // methods from Element generics
                    if (!method.test(/^[A-Z]|\$|prototype/)){
                        winElement[method] = Element.prototype[method];
                    }
                }
            } else {
                document.id(this.doc.body);
            }
            
            if (this.options.content !== null && 
                this.options.content !== undefined) {
                this.doc.body.set('html', this.options.content);
                this.textarea.set('value', this.options.content);
            }
    
            //for ie or webkit-based browsers
            if (Browser.ie || Browser.safari || Browser.chrome) {
                this.doc.body.contentEditable = true;
            } else {
                this.doc.designMode = 'On';
            }
        
            this.selection = new EditorSelection(this.win);
            
            //add events to doc
            this.doc.addEvents({
                mouseup: this.editorMouseUp.bind(this),
                mousedown: function(e){
                    this.editorStopEvent(e,'MouseDown');
                }.bind(this),
                mouseover: function(e){
                    this.editorStopEvent(e,'MouseOver');
                }.bind(this),
                mouseout: function(e){
                    this.editorStopEvent(e,'MouseOut');
                }.bind(this),
                mouseenter: this.editorMouseEnter.bind(this),
                mouseleave: function(e){
                    this.editorStopEvent(e,'MouseLeave');
                }.bind(this),
                contextmenu: function(e){
                    this.editorStopEvent(e,'ContextMenu');
                }.bind(this),
                click: this.editorClick.bind(this),
                dblclick: function(e){
                    this.editorStopEvent(e, 'DoubleClick');
                }.bind(this),
                keypress: this.editorKeyPress.bind(this),
                keyup: this.editorKeyUp.bind(this),
                keydown: this.editorKeyDown.bind(this),
                focus: this.editorFocus.bind(this),
                blur: this.editorBlur.bind(this)
            });
            if (this.win) {
                this.win.addEvents({
                    focus: this.editorFocus.bind(this),
                    blur: this.editorBlur.bind(this)
                });
            }
            ['cut','copy','paste'].each(function(event){
                this.doc.body.addListener(event, function(e){
                    this.editorStopEvent(e,event.capitalize());
                }.bind(this));
            },this);
            this.textarea.addEvent('keypress', this.textarea.retrieve('jx:textareaKeyListener', this.keyListener.bind(this)));
            
            //window focus event not firing in firefox 2
            if (Browser.firefox2) {
                this.doc.addEvent('focus', function(){
                    this.win.fireEvent('focus').focus();
                }.bind(this));
            }
            
            this.oldContent = this.getContent();
            
            this.domObj.store('Jx.Editor',this);
    
    
            
            this.addEvent('postInit', function(){
                //now loop through button arrays and init the plugins
                this.options.buttons.each(function(bar, index){
                    this.options.plugins = bar;
                    this.toolbar = this.toolbars[index];
                    this.initPlugins();
                },this);
            }.bind(this));
            
            this.resize();
        },
        
        /**
         * APIMethod: setContent
         * Use this method to set the content of the editor. Overwrites 
         * existing content.
         * 
         * Parameters:
         * content - {string} the content to set
         */
        setContent: function (content) {
            this.doc.body.set('html', content);
            return this;
        },
        
        /**
         * APIMethod: getContent
         * Retrieves the content of the editor. This comes back as raw, unfiltered
         * HTML.
         */
        getContent: function () {
            return this.doc.body.get('html');
        },
        
        /**
         * APIMethod: execute
         * Mainly used by plugins to execute specific commands on the 
         * IFrame.
         */
        execute: function (command, param1, param2) {
            if (this.busy) return;
            this.busy = true;
            this.doc.execCommand(command, param1, param2);
            this.saveContent();
            this.focus();
            this.busy = false;
            return false;
        },
        
        /**
         * APIMethod: toggleView
         * This method is used to toggle between the IFrame and the textarea
         * views of the editor.
         */
        toggleView: function () {
            this.fireEvent('preToggleView', this);
            if (this.mode === 'textarea') {
                this.mode = 'iframe';
                this.iframe.setStyle('display','block');
                this.setContent(this.textarea.value);
                this.textarea.setStyle('display', 'none');
            } else {
                this.saveContent();
                this.mode = 'textarea';
                this.textarea.setStyle('display','block');
                this.iframe.setStyle('display','none');
            }
            this.fireEvent('postToggleView', this);
        },
        
        /**
         * APIMethod: saveContent
         * This method is used to save content from the IFrame into the 
         * textarea.
         * 
         * Returns:
         * this - the Jx.Editor instance
         */
        saveContent: function () {
            //console.log('editor save content');
            if (this.mode === 'iframe') {
                this.textarea.set('value', this.cleanup(this.getContent()));
                this.fireEvent('editorChange',[this.textarea.get('value'),this]);
                //console.log('value saved:' + this.textarea.get('value'));
            }
            return this;
        },
        
        /**
         * APIMethod: resize
         * Call this when you need to resize the editor. i.e. when the layout
         * changes or the window changes size, etc...
         */
        resize: function () {
            if (this.domObj.resize) {
                this.domObj.resize();
            } else {
                new Layout(this.domObj);
                this.domObj.resize();
            }
            var dimensions = this.domObj.getContentBoxSize();
            var tbDimensions = this.container.getMarginBoxSize();
            
            var styles = {
                width: dimensions.width,
                height: dimensions.height - tbDimensions.height
            };
            this.iframe.setStyles(styles);
            this.textarea.setStyles(styles);
        },
        
        /**
         * APIMethod: focus
         * use this to give the editor area focus.
         */
        focus: function () {
            if (this.mode == 'iframe') {
                if (this.win) {
                    this.win.focus();
                } else {
                    this.iframe.focus();
                }
            } else {
                this.textarea.focus();
            }
            this.fireEvent('editorFocus', this);
            return this;
        },
        
        /**
         * APIMethod: enableToolbar
         * This function is called to enable the buttons on the toolbars
         */
        enableToolbar: function () {
            Object.each(this.plugins, function(plugin){
                plugin.setEnabled(true);
            },this);
        },
        
        /**
         * APIMethod: disableToolbar
         * This function can be called to disable all buttons on a toolbar 
         * with the exception of the toggleView button.
         */
        disableToolbar: function () {
            Object.each(this.plugins, function(plugin){
                plugin.setEnabled(false);
            },this);
        },
        
        /**
         * Editor Events
         * 
         * Everything from here down responds to a native event and
         * then fires an equivalent custom event on the editor object that
         * other classes can listen for.
         */
        
        
        editorStopEvent: function (e, event) {
            if (this.editorDisabled) {
                e.stop();
                return;
            }
            //console.log('stop event...' + event);
            this.fireEvent('editor'+event, [e, this]);
        },
        
    
        editorFocus: function (e) {
            //console.log('editor focus event');
            this.oldContent = '';
            this.fireEvent('editorFocus', [e, this]);
        },
        
        editorBlur: function (e) {
            //console.log('editor blur event');
            this.oldContent = this.saveContent().getContent();
            this.fireEvent('editorBlur', [e, this]);
        },
        
        editorMouseUp: function (e) {
            //console.log('editor mouseup event');
            if (this.editorDisabled) {
                e.stop();
                return;
            }
            this.checkStates();
            
            this.fireEvent('editorMouseUp', [e, this]);
        },
        
        editorMouseEnter: function (e) {
            //console.log('editor mouseenter event');
            if (this.editorDisabled) {
                e.stop();
                return;
            }
            
            if (this.oldContent && this.getContent() != this.oldContent) {
                this.focus();
                this.fireEvent('editorPaste', [e, this]);
            }
            
            this.fireEvent('editorMouseEnter', [e, this]);
        },
        
        editorClick: function (e) {
            //console.log('editor click event');
            if (Browser.chrome || Browser.safari) {
                var el = document.id(e.target);
                if (el.get('tag') == 'img'){
                    this.selection.selectNode(el);
                }
            }
            
            this.fireEvent('editorClick', [e, this]);
        },
        
        editorKeyPress: function (e) {
            //console.log('editor key press event');
            if (this.editorDisabled) {
                e.stop();
                return;
            }
            
            this.keyListener(e);
            
            this.fireEvent('editorKeyPress', [e, this]);
        },
        
        editorKeyUp: function (e) {
            //console.log('editor key up event');
            if (this.editorDisabled) {
                e.stop();
                return;
            }
            
            var c = e.code;
            if (/^enter|left|up|right|down|delete|backspace$/i.test(e.key) || (c >= 33 && c <= 36) || c == 45 || e.meta || e.control ) {
                if (Browser.ie) {
                    clearTimeout(this.checkStateDelay);
                    this.checkStatesDelay = this.checkStates.delay(500, this);
                } else {
                    this.checkStates();
                }
            }
            
            this.fireEvent('editorKeyUp', [e, this]);
        },
        
        editorKeyDown: function (e) {
            //console.log('editor key down event');
            if (this.editorDisabled) {
                e.stop();
                return;
            }
            
            if (e.key == 'enter') {
                if (e.shift && (Browser.chrome | Browser.safari)) {
                    var s = this.selection;
                    var r = s.getRange();
                    
                    var br = this.doc.createElement('br');
                    r.insertNode(br);
                    
                    r.setStartAfter(br);
                    r.setEndAfter(br);
                    s.setRange(r);
                    
                    if (s.getSelection().focusNode == br.previousSibling) {
                        var nbsp = this.doc.createTextNode('\u00a0');
                        var p = br.parentNode;
                        var ns = br.nextSibling;
                        (ns) ? p.insertBefore(nbsp, ns) : p.appendChild(nbsp);
                        s.selectNode(nbsp);
                        s.collapse(1);
                    }
    
                    //change this.win here for Google Chrome???
                    this.win.scrollTo(0, Element.getOffsets(s.getRange().startContainer).y);
                    
                    e.preventDefault();
                } else if (Browser.firefox || Browser.chrome || Browser.safari) {
                    var node = this.selection.getNode();
                    var isBlock = node.getParents().include(node).some(function(el){
                        return el.nodeName.test(this.blockEls);
                    }.bind(this));
                    if (!isBlock) this.execute('insertparagraph', false, false);
                }
            } else {
                if (Browser.ie) {
                    var r= this.selection.getRange();
                    var node = this.selection.getNode();
                    if (r && node.get('tag') != 'li') {
                        this.selection.insertContent('<br>');
                        this.selection.collapse(false);
                    }
                    e.preventDefault();
                }
            }
            
            if (Browser.opera) {
                var ctrlmeta = e.control || e.meta;
                if (ctrlmeta && e.key == 'x') {
                    this.fireEvent('editorCut', [e, this]);
                } else if (ctrlmeta && e.key == 'c') {
                    this.fireEvent('editorCopy', [e, this]);
                } else if ((ctrlmeta && e.key == 'v') || (e.shift && e.code == 45) ) {
                    this.fireEvent('editorPaste', [e, this]);
                }
            }
            
            this.fireEvent('editorKeyDown', [e, this]);
            
        },
        
        keyListener: function (e) {
            var key = (Browser.Platform.mac) ? e.meta : e.control;
            if (!key || !this.keys[e.key]) return;
            e.preventDefault();
            var plugin = this.keys[e.key];
            plugin.command();
            if (this.mode == 'iframe') this.checkStates();
        },
        
        checkStates: function () {
            var element = this.selection.getNode();
            if (!element) return;
            if (typeOf(element) != 'element') return;
            
            Object.each(this.plugins, function(plugin){
                if (typeOf(plugin.checkState) == 'function' ) {
                    plugin.checkState(element);
                }
            },this);
        },
        
        cleanup: function(source){
            if (!this.options.cleanup) return source.trim();
    
            do {
                var oSource = source;
    
                // replace base URL references: ie localize links
                if (this.options.baseURL){
                    source = source.replace('="' + this.options.baseURL, '="');	
                }
    
                // Webkit cleanup
                source = source.replace(/<br class\="webkit-block-placeholder">/gi, "<br />");
                source = source.replace(/<span class="Apple-style-span">(.*)<\/span>/gi, '$1');
                source = source.replace(/ class="Apple-style-span"/gi, '');
                source = source.replace(/<span style="">/gi, '');
    
                // Remove padded paragraphs
                source = source.replace(/<p>\s*<br ?\/?>\s*<\/p>/gi, '<p>\u00a0</p>');
                source = source.replace(/<p>(&nbsp;|\s)*<\/p>/gi, '<p>\u00a0</p>');
                if (!this.options.semantics){
                    source = source.replace(/\s*<br ?\/?>\s*<\/p>/gi, '</p>');
                }
    
                // Replace improper BRs (only if XHTML : true)
                if (this.options.xhtml){
                    source = source.replace(/<br>/gi, "<br />");
                }
    
                if (this.options.semantics){
                    //remove divs from <li>
                    if (Browser.ie){
                        source = source.replace(/<li>\s*<div>(.+?)<\/div><\/li>/g, '<li>$1</li>');
                    }
                    //remove stupid apple divs
                    if (Browser.safari || Browser.chrome){
                        source = source.replace(/^([\w\s]+.*?)<div>/i, '<p>$1</p><div>');
                        source = source.replace(/<div>(.+?)<\/div>/ig, '<p>$1</p>');
                    }
    
                    //<p> tags around a list will get moved to after the list
                    if (!Browser.ie){
                        //not working properly in safari?
                        source = source.replace(/<p>[\s\n]*(<(?:ul|ol)>.*?<\/(?:ul|ol)>)(.*?)<\/p>/ig, '$1<p>$2</p>');
                        source = source.replace(/<\/(ol|ul)>\s*(?!<(?:p|ol|ul|img).*?>)((?:<[^>]*>)?\w.*)$/g, '</$1><p>$2</p>');
                    }
    
                    source = source.replace(/<br[^>]*><\/p>/g, '</p>'); // remove <br>'s that end a paragraph here.
                    source = source.replace(/<p>\s*(<img[^>]+>)\s*<\/p>/ig, '$1\n'); // if a <p> only contains <img>, remove the <p> tags
    
                    //format the source
                    source = source.replace(/<p([^>]*)>(.*?)<\/p>(?!\n)/g, '<p$1>$2</p>\n'); // break after paragraphs
                    source = source.replace(/<\/(ul|ol|p)>(?!\n)/g, '</$1>\n'); // break after </p></ol></ul> tags
                    source = source.replace(/><li>/g, '>\n\t<li>'); // break and indent <li>
                    source = source.replace(/([^\n])<\/(ol|ul)>/g, '$1\n</$2>'); //break before </ol></ul> tags
                    source = source.replace(/([^\n])<img/ig, '$1\n<img'); // move images to their own line
                    source = source.replace(/^\s*$/g, ''); // delete empty lines in the source code (not working in opera)
                }
    
                // Remove leading and trailing BRs
                source = source.replace(/<br ?\/?>$/gi, '');
                source = source.replace(/^<br ?\/?>/gi, '');
    
                // Remove useless BRs
                if (this.options.paragraphise) source = source.replace(/(h[1-6]|p|div|address|pre|li|ol|ul|blockquote|center|dl|dt|dd)><br ?\/?>/gi, '$1>');
    
                // Remove BRs right before the end of blocks
                source = source.replace(/<br ?\/?>\s*<\/(h1|h2|h3|h4|h5|h6|li|p)/gi, '</$1');
    
                // Semantic conversion
                source = source.replace(/<span style="font-weight: bold;">(.*)<\/span>/gi, '<strong>$1</strong>');
                source = source.replace(/<span style="font-style: italic;">(.*)<\/span>/gi, '<em>$1</em>');
                source = source.replace(/<b\b[^>]*>(.*?)<\/b[^>]*>/gi, '<strong>$1</strong>');
                source = source.replace(/<i\b[^>]*>(.*?)<\/i[^>]*>/gi, '<em>$1</em>');
                source = source.replace(/<u\b[^>]*>(.*?)<\/u[^>]*>/gi, '<span style="text-decoration: underline;">$1</span>');
                source = source.replace(/<strong><span style="font-weight: normal;">(.*)<\/span><\/strong>/gi, '$1');
                source = source.replace(/<em><span style="font-weight: normal;">(.*)<\/span><\/em>/gi, '$1');
                source = source.replace(/<span style="text-decoration: underline;"><span style="font-weight: normal;">(.*)<\/span><\/span>/gi, '$1');
                source = source.replace(/<strong style="font-weight: normal;">(.*)<\/strong>/gi, '$1');
                source = source.replace(/<em style="font-weight: normal;">(.*)<\/em>/gi, '$1');
    
                // Replace uppercase element names with lowercase
                source = source.replace(/<[^> ]*/g, function(match){return match.toLowerCase();});
    
                // Replace uppercase attribute names with lowercase
                source = source.replace(/<[^>]*>/g, function(match){
                       match = match.replace(/ [^=]+=/g, function(match2){return match2.toLowerCase();});
                       return match;
                });
    
                // Put quotes around unquoted attributes
                source = source.replace(/<[^!][^>]*>/g, function(match){
                       match = match.replace(/( [^=]+=)([^"][^ >]*)/g, "$1\"$2\"");
                       return match;
                });
    
                //make img tags xhtml compatible <img>,<img></img> -> <img/>
                if (this.options.xhtml){
                    source = source.replace(/<img([^>]+)(\s*[^\/])>(<\/img>)*/gi, '<img$1$2 />');
                }
    
                //remove double <p> tags and empty <p> tags
                source = source.replace(/<p>(?:\s*)<p>/g, '<p>');
                source = source.replace(/<\/p>\s*<\/p>/g, '</p>');
    
                // Replace <br>s inside <pre> automatically added by some browsers
                source = source.replace(/<pre[^>]*>.*?<\/pre>/gi, function(match){
                    return match.replace(/<br ?\/?>/gi, '\n');
                });
    
                // Final trim
                source = source.trim();
            }
            while (source != oSource);
    
            return source;
        }
    });
    
    if (base.global) {
        base.global.Editor = module.exports;
    }
    
});

/*
---

name: Jx.Sort

description: Base class for the sort algorithm implementations

license: MIT-style license.

requires:
 - Jx.Object
 - Jx.Compare

provides: [Jx.Sort]

...
 */
// $Id$
/**
 * Class: Jx.Sort
 * Base class for all of the sorting algorithm classes.
 *
 * Extends: <Jx.Object>
 *
 * Events:
 * onStart() - called when the sort starts
 * onEnd() - called when the sort stops
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define("jx/sort", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object");
        
    var sort = module.exports = new Class({
    
        Extends : jxObject,
        Family : 'Jx.Sort',
    
        options : {
            /**
             * Option: timeIt
             * whether to time the sort
             */
            timeIt : false,
            /**
             * Event: onStart
             */
            onStart : function(){},
            /**
             * Event: onEnd
             */
            onEnd : function(){}
        },
    
        /**
         * Property: timer
         * holds the timer instance
         */
        timer : null,
        /**
         * Property: data
         * The data to sort
         */
        data : null,
        /**
         * Property: Comparator
         * The comparator to use in sorting
         */
        comparator : function(){},
        /**
         * Property: col
         * The column to sort by
         */
        col : null,
    
        parameters: ['data','fn','col','options'],
    
        /**
         * APIMethod: init
         */
        init : function () {
            this.parent();
            if (this.options.timeIt) {
                this.addEvent('start', this.startTimer.bind(this));
                this.addEvent('stop', this.stopTimer.bind(this));
            }
            this.data = this.options.data;
            this.comparator = this.options.fn;
            this.col = this.options.col;
        },
    
        /**
         * APIMethod: sort
         * Actually does the sorting. Must be overridden by subclasses.
         */
        sort : function(){},
    
        /**
         * Method: startTimer
         * Saves the starting time of the sort
         */
        startTimer : function () {
            this.timer = new Date();
        },
    
        /**
         * Method: stopTimer
         * Determines the time the sort took.
         */
        stopTimer : function () {
            this.end = new Date();
            this.dif = this.timer.diff(this.end, 'ms');
        },
    
        /**
         * APIMethod: setData
         * sets the data to sort
         *
         * Parameters:
         * data - the data to sort
         */
        setData : function (data) {
            if (data !== undefined && data !== null) {
                this.data = data;
            }
        },
    
        /**
         * APIMethod: setColumn
         * Sets the column to sort by
         *
         * Parameters:
         * col - the column to sort by
         */
        setColumn : function (col) {
            if (col !== undefined && col !== null) {
                this.col = col;
            }
        },
    
        /**
         * APIMethod: setComparator
         * Sets the comparator to use in sorting
         *
         * Parameters:
         * fn - the function to use as the comparator
         */
        setComparator : function (fn) {
            this.comparator = fn;
        }
    });
    
    if (base.global) {
        base.global.Sort = module.exports;
    }
    
});


/*
---

name: Jx.TabBox

description: A convenience class to handle the common case of a single toolbar directly attached to the content area of the tabs.

license: MIT-style license.

requires:
 - Jx.Toolbar
 - Jx.Panel
 - Jx.TabSet

provides: [Jx.TabBox]

images:
 - tabbar.png
 - tabbar_bottom.png
 - tabbar_left.png
 - tabbar_right.png

...
 */
// $Id$
/**
 * Class: Jx.TabBox
 *
 * Extends: <Jx.Widget>
 *
 * A convenience class to handle the common case of a single toolbar
 * directly attached to the content area of the tabs.  It manages both a
 * <Jx.Toolbar> and a <Jx.TabSet> so that you don't have to.  If you are using
 * a TabBox, then tabs only have to be added to the TabBox rather than to
 * both a <Jx.TabSet> and a <Jx.Toolbar>.
 *
 * Example:
 * (code)
 * var tabBox = new Jx.TabBox('subTabArea', 'top');
 *
 * var tab1 = new Jx.Button.Tab('Tab 1', {contentID: 'content4'});
 * var tab2 = new Jx.Button.Tab('Tab 2', {contentID: 'content5'});
 *
 * tabBox.add(tab1, tab2);
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tabbox", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Tab = require("./tab"),
        TabSet = require("./tabset"),
        Panel = require("./panel"),
        Toolbar = require("./toolbar")
        
    var tabBox = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.TabBox',
        options: {
            /* Option: parent
             * a DOM element to add the tab box to
             */
            parent: null,
            /* Option: position
             * the position of the tab bar in the box, one of 'top', 'right',
             * 'bottom' or 'left'.  Top by default.
             */
            position: 'top',
            /* Option: height
             * a fixed height in pixels for the tab box.  If not set, it will fill
             * its container
             */
            height: null,
            /* Option: width
             * a fixed width in pixels for the tab box.  If not set, it will fill
             * its container
             */
            width: null,
            /* Option: scroll
             * should the tab bar scroll its tabs if there are too many to fit
             * in the toolbar, true by default
             */
            scroll:true
        },
    
        /**
         * Property: tabBar
         * {<Jx.Toolbar>} the toolbar for this tab box.
         */
        tabBar: null,
        /**
         * Property: tabSet
         * {<Jx.TabSet>} the tab set for this tab box.
         */
        tabSet: null,
        /**
         * APIMethod: render
         * Create a new instance of a TabBox.
         */
        render : function() {
            this.parent();
            this.tabBar = new Toolbar({
                position: this.options.position,
                scroll: this.options.scroll
            });
            this.panel = new Panel({
                toolbars: [this.tabBar],
                hideTitle: true,
                height: this.options.height,
                width: this.options.width,
                id: this.options.id
            });
            this.panel.domObj.addClass('jxTabBox');
            this.tabSet = new TabSet(this.panel.content);
            this.tabSet.addEvent('tabChange', function(tabSet, tab) {
                this.showItem(tab);
            }.bind(this.tabBar));
            /* when the panel changes size, the tab set needs to update
             * the content areas.
             */
             this.panel.addEvent('sizeChange', (function() {
                 this.tabSet.resizeTabBox();
                 this.tabBar.domObj.getParent('.jxBarContainer').retrieve('jxBarContainer').update();
                 this.tabBar.domObj.getParent('.jxBarContainer').addClass('jxTabBar'+this.options.position.capitalize());
             }).bind(this));
            /* when tabs are added or removed, we might need to layout
             * the panel if the toolbar is or becomes empty
             */
            this.tabBar.addEvents({
                add: (function() {
                    this.domObj.resize({forceResize: true});
                }).bind(this),
                remove: (function() {
                    this.domObj.resize({forceResize: true});
                }).bind(this)
            });
            /* trigger an initial resize when first added to the DOM */
            this.addEvent('addTo', function() {
                this.domObj.resize({forceResize: true});
            });
            
            this.panel.domObj.replaces(this.domObj);
            this.domObj = this.panel.domObj;
            this.domObj.store('jxWidget', this);
            this.domObj.resize({forceResize: true});
            
            //add items to this if we have them
            if (this.options.items !== undefined && this.options.items !== null) {
                Array.from(this.options.items).each(function(item){
                    //only tabs can be added to a tabbox
                    if (item['class'] == 'tab' || instanceOf(item['class'], Tab)) {
                        item.options = (item.options)?item.options:{};
                        var obj;                    
                        if (typeOf(item['class']) == 'string') {
                            obj = Tab;
                        } else {
                            obj = item['class'];
                        }
                        itemObj = new obj(item.options);
                        this.add(itemObj);
                        if (itemObj.resize) {
                            itemObj.resize()
                        } else if (document.id(itemObj).resize) {
                            document.id(itemobj).resize();
                        }
                    }
                },this);
            }
            
    
            
        },
        /**
         * Method: add
         * Add one or more <Jx.Tab>s to the TabBox.
         *
         * Parameters:
         * tab - {<Jx.Tab>} an instance of <Jx.Tab> to add to the tab box.  More
         * than one tab can be added by passing extra parameters to this method.
         * Unlike <Jx.TabSet>, tabs do not have to be added to a separate
         * <Jx.Toolbar>.
         */
        add : function() {
            this.tabBar.add.apply(this.tabBar, arguments);
            this.tabSet.add.apply(this.tabSet, arguments);
            Array.from(arguments).flatten().each(function(tab){
                tab.addEvents({
                    close: (function(){
                        this.tabBar.remove(tab);
                        this.tabSet.remove(tab);
                    }).bind(this)
                });
            }, this);
            return this;
        },
        /**
         * Method: remove
         * Remove a tab from the TabSet.
         *
         * Parameters:
         * tab - {<Jx.Tab>} the tab to remove.
         */
        remove : function(tab) {
            this.tabBar.remove(tab);
            this.tabSet.remove(tab);
        },
        
        resize: function(){
            this.domObj.resize({forceResize: true});
            this.tabSet.resize();
            this.tabBar.domObj.getParent('.jxBarContainer').retrieve('jxBarContainer').update();
            this.tabBar.domObj.getParent('.jxBarContainer').addClass('jxTabBar'+this.options.position.capitalize());
        }
    });
    
    if (base.global) {
        base.global.TabBox = module.exports;
    }
    
});


/*
---

name: Jx.Tooltip

description: These are very simple tooltips that are designed to be instantiated in javascript and directly attached to the object that they are the tip for.

license: MIT-style license.

requires:
 - Jx.Widget

provides: [Jx.Tooltip]

css:
 - tooltip

...
 */
// $Id$
/**
 * Class: Jx.Tooltip
 *
 * Extends: <Jx.Widget>
 *
 * An implementation of tooltips. These are very simple tooltips that are
 * designed to be instantiated in javascript and directly attached to the
 * object that they are the tip for. We can only have one Tip per element so
 * we use element storage to store the tip object and check for it's presence
 * before creating a new tip. If one is there we remove it and create this new
 * one.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tooltip", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget");
        
    var tooltip = module.exports = new Class({
        Extends : Widget,
        Family: 'Jx.Tooltip',
        Binds: ['enter', 'leave', 'move'],
        options : {
            /**
             * Option: offsets
             * An object with x and y components for where to put the tip related
             * to the mouse cursor.
             */
            offsets : {
                x : 15,
                y : 15
            },
            /**
             * Option: showDelay
             * The amount of time to delay before showing the tip. This ensures we
             * don't show a tip if we're just passing over an element quickly.
             */
            showDelay : 100,
            /**
             * Option: cssClass
             * a class to be added to the tip's container. This can be used to
             * style the tip.
             */
            cssClass : null
        },
    
        /**
         * Parameters:
         * target - The DOM element that triggers the toltip when moused over.
         * tip - The contents of the tip itself. This can be either a string or
         *       an Element.
         * options - <Jx.Tooltip.Options> and <Jx.Widget.Options>
         */
        parameters: ['target','tip','options'],
    
        /**
         * Method: render
         * Creates the tooltip
         *
         */
        render : function () {
            this.parent();
            this.target = document.id(this.options.target);
    
            var t = this.target.retrieve('Tip');
            if (t) {
                this.target.eliminate('Tip');
            }
    
            //set up the tip options
            this.domObj = new Element('div', {
                styles : {
                    'position' : 'absolute',
                    'top' : 0,
                    'left' : 0,
                    'visibility' : 'hidden'
                }
            }).inject(document.body);
    
            var t = typeOf(this.options.tip);
            if (t === 'string' || t == 'object') {
                this.domObj.set('html', this.getText(this.options.tip));
            } else {
                this.domObj.grab(this.options.tip);
            }
    
            this.domObj.addClass('jxTooltip');
            if (this.options.cssClass !== undefined && this.options.cssClass !== null) {
                this.domObj.addClass(this.options.cssClass);
            }
    
            this.options.target.store('Tip', this);
    
            //add events
            this.options.target.addEvent('mouseenter', this.enter);
            this.options.target.addEvent('mouseleave', this.leave);
            this.options.target.addEvent('mousemove', this.move);
        },
    
        /**
         * Method: enter
         * Method run when the cursor passes over an element with a tip
         *
         * Parameters:
         * event - the event object
         */
        enter : function (event) {
            this.timer = window.clearTimeout(this.timer);
            this.timer = (function () {
                this.domObj.setStyle('visibility', 'visible');
                this.position(event);
            }).delay(this.options.delay, this);
        },
        /**
         * Method: leave
         * Executed when the mouse moves out of an element with a tip
         *
         * Parameters:
         * event - the event object
         */
        leave : function (event) {
            this.timer = window.clearTimeout(this.timer);
            this.timer = (function () {
                this.domObj.setStyle('visibility', 'hidden');
            }).delay(this.options.delay, this);
        },
        /**
         * Method: move
         * Called when the mouse moves over an element with a tip.
         *
         * Parameters:
         * event - the event object
         */
        move : function (event) {
            this.position(event);
        },
        /**
         * Method: position
         * Called to position the tooltip.
         *
         * Parameters:
         * event - the event object
         */
        position : function (event) {
            var size = window.getSize(), scroll = window.getScroll();
            var tipSize = this.domObj.getMarginBoxSize();
            var tip = {
                x : this.domObj.offsetWidth,
                y : this.domObj.offsetHeight
            };
            var tipPlacement = {
                x: event.page.x + this.options.offsets.x,
                y: event.page.y + this.options.offsets.y
            };
    
            if (event.page.y + this.options.offsets.y + tip.y + tipSize.height - scroll.y > size.y) {
                tipPlacement.y = event.page.y - this.options.offsets.y - tipSize.height - scroll.y;
            }
    
            if (event.page.x + this.options.offsets.x + tip.x + tipSize.width - scroll.x > size.x) {
                tipPlacement.x = event.page.x - this.options.offsets.x - tipSize.width - scroll.x;
            }
    
            this.domObj.setStyle('top', tipPlacement.y);
            this.domObj.setStyle('left', tipPlacement.x);
        },
        /**
         * APIMethod: detach
         * Called to manually remove a tooltip.
         */
        detach : function () {
            this.target.eliminate('Tip');
            this.destroy();
        }
    });

    if (base.global) {
        base.global.Tooltip = module.exports;
    }
    
});

/*
---

name: Jx.ColorPalette

description: A Jx.ColorPalette presents a user interface for selecting colors.  This is typically combined with a Jx.Button.Color which embeds the color palette in a flyout.

license: MIT-style license.

requires:
 - Jx.Widget

provides: [Jx.ColorPalette]

css:
 - color

images:
 - grid.png

...
 */
// $Id$
/**
 * Class: Jx.ColorPalette
 *
 * Extends: <Jx.Widget>
 *
 * A Jx.ColorPalette presents a user interface for selecting colors.
 * Currently, the user can either enter a HEX colour value or select from a
 * palette of web-safe colours.  The user can also enter an opacity value.
 *
 * A Jx.ColorPalette can be embedded anywhere in a web page using its addTo
 * method.  However, a <Jx.Button> suJx.Tooltipbclass is provided
 * (<Jx.Button.Color>) that embeds a colour panel inside a button for easy use
 * in toolbars.
 *
 * Colour changes are propogated via a change event.  To be notified
 * of changes in a Jx.ColorPalette, use the addEvent method.
 *
 * Example:
 * (code)
 * (end)
 *
 * Events:
 * change - triggered when the color changes.
 * click - the user clicked on a color swatch (emitted after a change event)
 *
 * Locale keys:
 * - colorpalette.alphaLabel
 * 
 * 
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */

define('jx/colorpalette', function(require, exports, module){

    var base = require("../base"),
        Widget = require("./widget");
    
    var colorPalette = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.ColorPalette',
        /**
         * Property: {HTMLElement} domObj
         * the HTML element representing the color panel
         */
        domObj: null,
        options: {
            /* Option: parent
             * default null, the DOM element to add the palette to.
             */
            parent: null,
            /* Option: color
             * default #000000, the initially selected color
             */
            color: '#000000',
            /* Option: alpha
             * default 100, the initial alpha value
             */
            alpha: 1,
            /* Option: hexColors
             * an array of hex colors for creating the palette, defaults to a
             * set of web safe colors.
             */
            hexColors: ['00', '33', '66', '99', 'CC', 'FF']
        },
        /**
         * Method: render
         * initialize a new instance of Jx.ColorPalette
         */
        render: function() {
            this.domObj = new Element('div', {
                id: this.options.id,
                'class':'jxColorPalette'
            });
    
            var top = new Element('div', {'class':'jxColorBar'});
            var d = new Element('div', {'class':'jxColorPreview'});
    
            this.selectedSwatch = new Element('div', {'class':'jxColorSelected'});
            this.previewSwatch = new Element('div', {'class':'jxColorHover'});
            d.adopt(this.selectedSwatch);
            d.adopt(this.previewSwatch);
    
            top.adopt(d);
    
            this.colorInputLabel = new Element('label', {
              'class':'jxColorLabel', 
              html:'#'
            });
            top.adopt(this.colorInputLabel);
    
            var cc = this.changed.bind(this);
            this.colorInput = new Element('input', {
                'class':'jxHexInput',
                'type':'text',
                'maxLength':6,
                events: {
                    'keyup':cc,
                    'blur':cc,
                    'change':cc
                }
            });
    
            top.adopt(this.colorInput);
    
            this.alphaLabel = new Element('label', {'class':'jxAlphaLabel', 'html':this.getText({set:'Jx',key:'colorpalette',value:'alphaLabel'}) });
            top.adopt(this.alphaLabel);
    
            this.alphaInput = new Element('input', {
                'class':'jxAlphaInput',
                'type':'text',
                'maxLength':3,
                events: {
                    'keyup': this.alphaChanged.bind(this)
                }
            });
            top.adopt(this.alphaInput);
    
            this.domObj.adopt(top);
    
            var swatchClick = this.swatchClick.bind(this);
            var swatchOver = this.swatchOver.bind(this);
    
            var table = new Element('table', {'class':'jxColorGrid'});
            var tbody = new Element('tbody');
            table.adopt(tbody);
            for (var i=0; i<12; i++) {
                var tr = new Element('tr');
                for (var j=-3; j<18; j++) {
                    var bSkip = false;
                    var r, g, b;
                    /* hacky approach to building first three columns
                     * because I couldn't find a good way to do it
                     * programmatically
                     */
    
                    if (j < 0) {
                        if (j == -3 || j == -1) {
                            r = g = b = 0;
                            bSkip = true;
                        } else {
                            if (i<6) {
                                r = g = b = i;
                            } else {
                                if (i == 6) {
                                    r = 5; g = 0; b = 0;
                                } else if (i == 7) {
                                    r = 0; g = 5; b = 0;
                                } else if (i == 8) {
                                    r = 0; g = 0; b = 5;
                                } else if (i == 9) {
                                    r = 5; g = 5; b = 0;
                                } else if (i == 10) {
                                    r = 0; g = 5; b = 5;
                                } else if (i == 11) {
                                    r = 5; g = 0; b = 5;
                                }
                            }
                        }
                    } else {
                        /* remainder of the columns are built
                         * based on the current row/column
                         */
                        r = parseInt(i/6,10)*3 + parseInt(j/6,10);
                        g = j%6;
                        b = i%6;
                    }
                    var bgColor = '#'+this.options.hexColors[r]+
                                      this.options.hexColors[g]+
                                      this.options.hexColors[b];
    
                    var td = new Element('td');
                    if (!bSkip) {
                        td.setStyle('backgroundColor', bgColor);
    
                        var a = new Element('a', {
                            'class': 'colorSwatch ' + (((r > 2 && g > 2) || (r > 2 && b > 2) || (g > 2 && b > 2)) ? 'borderBlack': 'borderWhite'),
                            'href':'javascript:void(0)',
                            'title':bgColor,
                            'alt':bgColor,
                            events: {
                                'mouseover': swatchOver,
                                'click': swatchClick
                            }
                        });
                        a.store('swatchColor', bgColor);
                        td.adopt(a);
                    } else {
                        var span = new Element('span', {'class':'emptyCell'});
                        td.adopt(span);
                    }
                    tr.adopt(td);
                }
                tbody.adopt(tr);
            }
            this.domObj.adopt(table);
            this.updateSelected();
        },
    
        /**
         * Method: swatchOver
         * handle the mouse moving over a colour swatch by updating the preview
         *
         * Parameters:
         * e - {Event} the mousemove event object
         */
        swatchOver: function(e) {
            var a = e.target;
    
            this.previewSwatch.setStyle('backgroundColor', a.retrieve('swatchColor'));
        },
    
        /**
         * Method: swatchClick
         * handle mouse click on a swatch by updating the color and hiding the
         * panel.
         *
         * Parameters:
         * e - {Event} the mouseclick event object
         */
        swatchClick: function(e) {
            var a = e.target;
    
            this.options.color = a.retrieve('swatchColor');
            this.updateSelected();
            this.fireEvent('click', this);
        },
    
        /**
         * Method: changed
         * handle the user entering a new colour value manually by updating the
         * selected colour if the entered value is valid HEX.
         */
        changed: function() {
            var color = this.colorInput.value;
            if (color.substring(0,1) == '#') {
                color = color.substring(1);
            }
            if (color.toLowerCase().match(/^[0-9a-f]{6}$/)) {
                this.options.color = '#' +color.toUpperCase();
                this.updateSelected();
            }
        },
    
        /**
         * Method: alphaChanged
         * handle the user entering a new alpha value manually by updating the
         * selected alpha if the entered value is valid alpha (0-100).
         */
        alphaChanged: function() {
            var alpha = this.alphaInput.value;
            if (alpha.match(/^[0-9]{1,3}$/)) {
                this.options.alpha = parseFloat(alpha/100);
                this.updateSelected();
            }
        },
    
        /**
         * APIMethod: setColor
         * set the colour represented by this colour panel
         *
         * Parameters:
         * color - {String} the new hex color value
         */
        setColor: function( color ) {
            this.colorInput.value = color;
            this.changed();
        },
    
        /**
         * APIMethod: setAlpha
         * set the alpha represented by this colour panel
         *
         * Parameters:
         * alpha - {Integer} the new alpha value (between 0 and 100)
         */
        setAlpha: function( alpha ) {
            this.alphaInput.value = alpha;
            this.alphaChanged();
        },
    
        /**
         * Method: updateSelected
         * update the colour panel user interface based on the current
         * colour and alpha values
         */
        updateSelected: function() {
            var styles = {'backgroundColor':this.options.color};
    
            this.colorInput.value = this.options.color.substring(1);
    
            this.alphaInput.value = parseInt(this.options.alpha*100,10);
            if (this.options.alpha < 1) {
                styles.opacity = this.options.alpha;
                styles.filter = 'Alpha(opacity='+(this.options.alpha*100)+')';
                
            } else {
                styles.opacity = 1;
                //not sure what the proper way to remove the filter would be since
                // I don't have IE to test against.
                styles.filter = '';  
            }
            this.selectedSwatch.setStyles(styles);
            this.previewSwatch.setStyles(styles);
            
            this.fireEvent('change', this);
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the
         * widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         *    translations changed.
         */
        changeText: function (lang) {
            this.parent();
        
            if (this.alphaLabel !== undefined && this.alphaLabel !== null) {
                this.alphaLabel.set('html', this.getText({set:'Jx',key:'colorpalette',value:'alphaLabel'}));
            }
        }
    });

    if (base.global) {
        base.global.ColorPalette = colorPalette;
    }
    
});

/*
---

name: Jx.Record

description: The basic record implementation. A store uses records to handle and manipulate data.

license: MIT-style license.

requires:
 - Jx.Object

provides: [Jx.Record]

...
 */
// $Id$
/**
 * Class: Jx.Record
 *
 * Extends: <Jx.Object>
 *
 * This class is used as a representation (or container) for a single row
 * of data in a <Jx.Store>. It is not usually directly instantiated by the
 * developer but rather by the store itself.
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define("jx/record", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object"),
        Compare = require("./compare");
        
    var record = module.exports = new Class({

        Extends: jxObject,
        Family: 'Jx.Record',
    
        options: {
            /**
             * Option: separator
             * The separator to pass to the comparator
             * constructor (<Jx.Compare>) - defaults to '.'
             */
            separator : '.',
            /**
             * Option: primaryKey
             * Indicates the column that acts as the primary key for this record.
             * Defaults to id.
             */
            primaryKey: 'id'
        },
        /**
         * Property: data
         * The data for this record
         */
        data: null,
        /**
         * Property: state
         * used to determine the state of this record. When not null (meaning no
         * changes were made) this should be one of
         *
         * - Jx.Record.UPDATE
         * - Jx.Record.DELETE
         * - Jx.Record.INSERT
         */
        state: null,
        /**
         * Property: fields
         * Holds a reference to the fields for this record. These are usually
         * passed to the record from the store. This should be an array of objects
         * where the objects represent the fields. The object should take the form:
         *
         * (code)
         * {
         *     name: <field name>,
         *     type: <field type>,
         *     ..additional options required by the record implementation...
         * }
         * (end)
         *
         * The type of the column should be one of alphanumeric, numeric, date,
         * boolean, or currency.
         */
        fields: null,
        /**
         * Property: virtuals
         * An object that holds all virtual "fields" in this record. You can add
         * virtuals by implementing them or subclassing Jx.Record.
         * 
         * Implement example:
         * (code)
         * Jx.Record.implement('virtuals',{
         *     key: {
         *       get: function(){},
         *       set: function(data){}
         *     }
         * });
         * (end)
         * 
         * or by subclassing:
         * (code)
         * var myRecord = new Class({
         *     Extends: Jx.Record,
         *     virtuals: {
         *       key: {
         *         get: function(){},
         *         set: function(data){}
         *       }
         *     }
         * });
         * (end)
         * 
         * You can then just get and set these fields as you would normal fields.
         */
        virtuals: {
            primaryKey: {
                type: 'alphanumeric',
                get: function(){
                    column = this.resolveCol(this.options.primaryKey);
                    return this.data[column.name];
                }
            }
        },
    
        parameters: ['store', 'fields', 'data', 'options'],
    
        init: function () {
            this.parent();
            if (this.options.fields !== undefined &&
                this.options.fields !== null) {
                this.fields = this.options.fields;
            }
    
            if (this.options.data !== undefined &&
                this.options.data !== null) {
                this.processData(this.options.data);
            } else {
                this.data = {};
            }
    
            if (this.options.store !== undefined &&
                this.options.store !== null) {
                this.store = this.options.store;
            }
            
            //bind the get/set methods of virtuals to the this
            for (var k in this.virtuals) {
                var originalGet, originalSet;
                if (this.virtuals[k].get !== undefined) {
                    originalGet = this.virtuals[k].get;
                    this.virtuals[k].get = originalGet.bind(this);
                }
                if (this.virtuals[k].set !== undefined) {
                    originalSet = this.virtuals[k].set;
                    this.virtuals[k].set = originalSet.bind(this);
                }
            }
    
        },
        /**
         * APIMethod: get
         * returns the value of the requestehd column. Can be programmed to handle
         * pseudo-fields (such as the primaryKey column implemented in this base
         * record).
         *
         * Parameters:
         * column - the string, index, or object of the requested column
         */
        get: function (column) {
            
            //first check for a virtual column
            if (typeOf(column) == 'string' && this.virtuals[column] !== undefined && this.virtuals[column].get !== undefined) {
                return this.virtuals[column].get();
            }
            //if not virtual then it must be part of the data.
            column = this.resolveCol(column);
            if (column !== null && Object.keys(this.data).contains(column.name)) {
                return this.data[column.name];
            } else {
                return null;
            }
        },
        /**
         * APIMethod: set
         * Sets a given value into the requested column.
         *
         *  Parameters:
         *  column - the object, index, or string name of the target column
         *  data - the data to add to the column
         */
        set: function (column, data) {
            
            //check for virtual setter
            if (this.virtuals[column] !== undefined && this.virtuals[column].set !== undefined) {
                //the virtual column needs to set any flags and fire necessary events.
                return this.virtuals[column].set(data);
            }
            
            var type = typeOf(column),
                oldValue;
            if (type !== 'object') {
                column = this.resolveCol(column);
            }
            
            if (column !== null) {
                if (this.data === undefined || this.data === null) {
                    this.data = {};
                }
        
                oldValue = this.get(column);
                this.data[column.name] = data;
                this.state = record.UPDATE;
                return [column.name, oldValue, data];
            } else {
                return null;
            }
    
        },
        /**
         * APIMethod: equals
         * Compares the value of a particular column with a given value
         *
         * Parameters:
         * column - the column to compare with (either column name, virtual name,
         *          or index)
         * value - the value to compare to.
         *
         * Returns:
         * True | False depending on the outcome of the comparison.
         */
        equals: function (column, value) {
            var col = this.resolveCol(column),
                currentValue = this.get(col.name);
            if (currentValue !== null){
                if (this.comparator === undefined || this.comparator === null) {
                    this.comparator = new Compare({
                        separator : this.options.separator
                    });
                }
                var fn = this.comparator[col.type].bind(this.comparator);
                return (fn(currentValue, value) === 0);
            } else {
                return false;
            }
        },
        /**
         * Method: processData
         * This method takes the data passed in and puts it into the form the
         * record needs it in. This default implementation does nothing but
         * assign the data to the data property but it can be overridden in
         * subclasses to massge the data in any way needed.
         *
         * Parameters:
         * data - the data to process
         */
        processData: function (data) {
            this.data = {};
            this.fields.each(function (field) {
                this.data[field.name] = data[field.name];
            }, this);
        },
    
        /**
         * Method: resolveCol
         * Determines which column is being asked for and returns it.
         *
         * Parameters:
         * col - a number referencing a column in the store
         *
         * Returns:
         * the column object referred to
         */
        resolveCol: function (col) {
            var t = typeOf(col),
                ret = null;
            if (t === 'number') {
                ret = this.fields[col];
            } else if (t === 'string') {
                //is it virtual?
                if (Object.keys(this.virtuals).contains(col)){
                    ret = {
                        name: col,
                        type: this.virtuals[col].type
                    };
                } else {
                    //not virtual so check the actual fields.
                    this.fields.each(function (column) {
                        if (column.name === col) {
                            ret = column;
                        }
                    }, this);
                }
            }
            return ret;
        },
        /**
         * APIMethod: asObject
         * Returns the data for this record as a plain object
         */
        asObject: function() {
            return this.data;
        }
        
        
    });
    
    record.UPDATE = 1;
    record.DELETE = 2;
    record.INSERT = 3;
    
    if (base.global) {
        base.global.Record = module.exports;
    }
    
});

/*
---

name: Jx.Store

description: An implementation of a basic data store.

license: MIT-style license.

requires:
 - Jx.Object
 - Jx.Record

provides: [Jx.Store]

...
 */
// $Id$
/**
 * Class: Jx.Store
 *
 * Extends: <Jx.Object>
 *
 * This class is the  store. It keeps track of data. It
 * allows adding, deleting, iterating, sorting etc...
 *
 * For the most part the store is pretty "dumb" meaning it
 * starts with very limited functionality. Actually, it can't
 * even load data by itself. Instead, it needs to have protocols,
 * strategies, and a record class passed to it that it can use.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define("jx/store", function(require, exports, module){
    
    var base = require("../base"),
        jxObject = require("./object"),
        Record = require("./record"),
        Full = require("./store/strategy/full")
        
    var store = module.exports = new Class({

        Extends: jxObject,
        Family: 'Jx.Store',
    
        options: {
            /**
             * Option: id
             * the identifier for this store
             */
            id : null,
            /**
             * Option: fields
             * an array listing the fields of the store in order of their
             * appearance in the data object formatted as an object
             *      {name: 'column name', type: 'column type'}
             * where type can be one of alphanumeric, numeric, date, boolean,
             * or currency.
             */
            fields : [],
            /**
             * Option: protocol
             * The protocol to use for communication in this store. The store
             * itself doesn't actually use it but it is accessed by the strategies
             * to do their work. This option is required and the store won't work
             * without it.
             */
            protocol: null,
            /**
             * Option: strategies
             * This is an array of instantiated strategy objects that will work
             * on this store. They provide many services such as loading data,
             * paging data, saving, and sorting (and anything else you may need
             * can be written). If none are passed in it will use the default
             * Jx.Store.Strategy.Full
             */
            strategies: null,
            /**
             * Option: record
             * This is a Jx.Store.Record instance or one of its subclasses. This is
             * the class that will be used to hold each individual record in the
             * store. Don't pass in a instance of the class but rather the class
             * name itself. If none is passed in it will default to Jx.Record
             */
            record: null,
            /**
             * Option: recordOptions
             * Options to pass to each record as it's created.
             */
            recordOptions: {}
        },
    
        /**
         * Property: data
         * Holds the data for this store
         */
        data : null,
        /**
         * Property: index
         * Holds the current position of the store relative to the data and the pageIndex.
         * Zero-based index.
         */
        index : 0,
        /**
         * APIProperty: id
         * The id of this store.
         */
        id : null,
        /**
         * Property: loaded
         * Tells whether the store has been loaded or not
         */
        loaded: false,
        /**
         * Property: ready
         * Used to determine if the store is completely initialized.
         */
        ready: false,
    
        /**
         * Property: deleted
         * track deleted records before they are purged
         */
        deleted: null,
    
        /**
         * Method: init
         * initialize the store, should be called by sub-classes
         */
        init: function () {
            this.parent();
    
            this.deleted = [];
    
            if (this.options.id !== undefined && this.options.id !== null) {
                this.id = this.options.id;
            }
    
            if (this.options.protocol === undefined || this.options.protocol === null) {
                this.ready = false;
                return;
            } else {
                this.protocol = this.options.protocol;
            }
    
            this.strategies = {};
    
            if (this.options.strategies !== undefined && this.options.strategies !== null) {
                this.options.strategies.each(function(strategy){
                    this.addStrategy(strategy);
                },this);
            } else {
                var strategy = new Full();
                this.addStrategy(strategy);
            }
    
            if (this.options.record !== undefined && this.options.record !== null) {
                this.record = this.options.record;
            } else {
                this.record = Record;
            }
    
    
        },
    
        /**
         * Method: cleanup
         * avoid memory leaks when a store is destroyed, should be called
         * by sub-classes if overridden
         */
        cleanup: function () {
            Object.each(this.strategies, function(strategy){
                strategy.destroy();
            },this);
            this.strategies = null;
            this.protocol.destroy();
            this.protocol = null;
            this.record = null;
        },
        /**
         * APIMethod: getStrategy
         * returns the named strategy if it is present, null otherwise.
         *
         * Parameters:
         * name - the name of the strategy we're looking for
         */
        getStrategy: function (name) {
            if (Object.keys(this.strategies).contains(name)) {
                return this.strategies[name];
            }
            return null;
        },
        /**
         * APIMethod: addStrategy
         * Allows the addition of strategies after store initialization. Handy to
         * have if some other class needs a strategy that is not present.
         *
         * Parameters:
         * strategy - the strategy to add to the store
         */
        addStrategy: function (strategy) {
            this.strategies[strategy.name] = strategy;
            strategy.setStore(this);
            strategy.activate();
        },
        /**
         * APIMethod: load
         * used to load the store. It simply fires an event that the strategies
         * are listening for.
         *
         * Parameters:
         * params - a hash of parameters passed to the strategy for determining
         *     what records to load.
         */
        load: function (params) {
            this.fireEvent('storeLoad', params);
        },
        /**
         * APIMethod: empty
         * Clears the store of data
         */
        empty: function () {
            if (this.data !== undefined && this.data !== null) {
                this.data.empty();
            }
        },
    
        /**
         * APIMethod: hasNext
         * Determines if there are more records past the current
         * one.
         *
         * Returns: true | false (Null if there's a problem)
         */
        hasNext : function () {
            if (this.data !== undefined && this.data !== null) {
                return this.index < this.data.length - 1;
            }
            return null;
        },
    
        /**
         * APIMethod: hasPrevious
         * Determines if there are records before the current
         * one.
         *
         * Returns: true | false
         */
        hasPrevious : function () {
            if (this.data !== undefined && this.data !== null) {
                return this.index > 0;
            }
            return null;
        },
    
        /**
         * APIMethod: valid
         * Tells us if the current index has any data (i.e. that the
         * index is valid).
         *
         * Returns: true | false
         */
        valid : function () {
            return (this.data !== undefined  && this.data !== null && this.data[this.index] !== undefined);
        },
    
        /**
         * APIMethod: next
         * Moves the store to the next record
         *
         * Returns: nothing | null if error
         */
        next : function () {
            if (this.data !== undefined && this.data !== null) {
                this.index++;
                if (this.index === this.data.length) {
                    this.index = this.data.length - 1;
                }
                this.fireEvent('storeMove', this);
                return true;
            } else {
                return null;
            }
        },
    
        /**
         * APIMethod: previous
         * moves the store to the previous record
         *
         * Returns: nothing | null if error
         *
         */
        previous : function () {
            if (this.data !== undefined && this.data !== null) {
                this.index--;
                if (this.index < 0) {
                    this.index = 0;
                }
                this.fireEvent('storeMove', this);
                return true;
            } else {
                return null;
            }
        },
    
        /**
         * APIMethod: first
         * Moves the store to the first record
         *
         * Returns: nothing | null if error
         *
         */
        first : function () {
            if (this.data !== undefined && this.data !== null) {
                this.index = 0;
                this.fireEvent('storeMove', this);
                return true;
            } else {
                return null;
            }
        },
    
        /**
         * APIMethod: last
         * Moves to the last record in the store
         *
         * Returns: nothing | null if error
         */
        last : function () {
            if (this.data !== undefined && this.data !== null) {
                this.index = this.data.length - 1;
                this.fireEvent('storeMove', this);
                return true;
            } else {
                return null;
            }
        },
    
        /**
         * APIMethod: count
         * Returns the number of records in the store
         *
         * Returns: an integer indicating the number of records in the store or null
         * if there's an error
         */
        count : function () {
            if (this.data !== undefined && this.data !== null) {
                return this.data.length;
            }
            return null;
        },
    
        /**
         * APIMethod: getPosition
         * Tells us where we are in the store
         *
         * Returns: an integer indicating the position in the store or null if
         * there's an error
         */
        getPosition : function () {
            if (this.data !== undefined && this.data !== null) {
                return this.index;
            }
            return null;
        },
    
        /**
         * APIMethod: moveTo
         * Moves the index to a specific record in the store
         *
         * Parameters:
         * index - the record to move to
         *
         * Returns: true - if successful false - if not successful null - on error
         */
        moveTo : function (index) {
            if (this.data !== undefined && this.data !== null && index >= 0 && index < this.data.length) {
                this.index = index;
                this.fireEvent('storeMove', this);
                return true;
            } else if (this.data === undefined && this.data === null) {
                return null;
            } else {
                return false;
            }
        },
        /**
         * APIMethod: each
         * allows iteration through the store's records.
         * NOTE: this function is untested
         *
         * Parameters:
         * fn - the function to execute for each record
         * bind - the scope of the function
         * ignoreDeleted - flag that tells the function whether to ignore records
         *                  marked as deleted.
         */
        each: function (fn, bind, ignoreDeleted) {
            if (this.data !== undefined && this.data !== null) {
              var data;
              if (ignoreDeleted) {
                  data = this.data.filter(function (record) {
                      return record.state !== Record.DELETE;
                  }, this);
              } else {
                  data = this.data;
              }
              data.each(fn, bind);
            }
        },
        /**
         * APIMethod: get
         * gets the data for the specified column
         *
         * Parameters:
         * column - indicator of the column to set. Either a string (the name of
         *          the column) or an integer (the index of the column in the
         *          record).
         * index - the index of the record in the internal array. Optional.
         *          defaults to the current index.
         */
        get: function (column, index) {
            if (index === undefined || index === null) {
                index = this.index;
            }
            return this.data[index].get(column);
        },
        /**
         * APIMethod: set
         * Sets the passed data for a particular column on the indicated record.
         *
         * Parameters:
         * column - indicator of the column to set. Either a string (the name of
         *          the column) or an integer (the index of the column in the
         *          record).
         * data - the data to set in the column of the record
         * index - the index of the record in the internal array. Optional.
         *          defaults to the current index.
         */
        set: function (column, data, index) {
            if (index === undefined && index !== null) {
                index = this.index;
            }
            var ret = this.data[index].set(column, data);
            ret.reverse();
            ret.push(index);
            ret.reverse();
            //fire event with array [index, column, oldvalue, newValue]
            this.fireEvent('storeColumnChanged', ret);
        },
        /**
         * APIMethod: refresh
         * Simply fires the storeRefresh event for strategies to listen for.
         */
        refresh: function () {
            this.fireEvent('storeRefresh', this);
        },
        /**
         * APIMethod: addRecord
         * Adds given data to the end of the current store.
         *
         * Parameters:
         * data - The data to use in creating a record. This should be in whatever
         *        form Jx.Store.Record, or the current subclass, needs it in.
         * position - whether the record is added to the 'top' or 'bottom' of the
         *      store.
         * insert - flag whether this is an "insert"
         */
        addRecord: function (data, position, insert) {
            if (this.data === undefined && this.data !== null) {
                this.data = [];
            }
    
            position = (position !== undefined && position !== null) ? position : 'bottom';
    
            var record = data;
            if (!(data instanceof Record)) {
                record = new (this.record)(this, this.options.fields, data, this.options.recordOptions);
            }
            if (insert) {
                record.state = Record.INSERT;
            }
            if (position === 'top') {
                //some literature claims that .shift() and .unshift() don't work reliably in IE
                //so we do it this way.
                this.data.reverse();
                this.data.push(record);
                this.data.reverse();
            } else {
                this.data.push(record);
            }
            this.fireEvent('storeRecordAdded', [this, record, position]);
        },
        /**
         * APIMethod: addRecords
         * Used to add multiple records to the store at one time.
         *
         * Parameters:
         * data - an array of data to add.
         * position - 'top' or 'bottom'. Indicates whether to add at the top or
         * the bottom of the store
         */
        addRecords: function (data, position) {
            var def = (data !== undefined  && data !== null) ,
                type = typeOf(data);
            if (this.data === undefined || this.data === null) {
                this.data = [];
            }
            if (def && type === 'array') {
                this.fireEvent('storeBeginAddRecords', this);
                //if position is top, reverse the array or we'll add them in the
                // wrong order.
                if (position === 'top') {
                    data.reverse();
                }
                data.each(function(d){
                    this.addRecord(d, position);
                },this);
                this.fireEvent('storeEndAddRecords', this);
                return true;
            }
            return false;
        },
    
        /**
         * APIMethod: getRecord
         * Returns the record at the given index or the current store index
         *
         * Parameters:
         * index - the index from which to return the record. Optional. Defaults
         * to the current store index
         */
        getRecord: function (index) {
            if (index === undefined && index !== null) {
                index = this.index;
            }
    
            if (index instanceof Record) {
                return index;
            }
    
            if (typeOf(index) === 'number') {
                if (this.data !== undefined && this.data !== null && this.data[index] !== undefined) {
                    return this.data[index];
                }
            }
    
            return null;
        },
        /**
         * APIMethod: replaceRecord
         * Replaces the record at an existing index with a new record containing
         * the passed in data.
         *
         * Parameters:
         * data - the data to use in creating the new record
         * index - the index at which to place the new record. Optional.
         *          defaults to the current store index.
         */
        replace: function(data, index) {
            if (data !== undefined  && this.data !== null) {
                if (index === undefined  && index !== null) {
                    index = this.index;
                }
                var record = new this.record(this, this.options.fields, data),
                oldRecord = this.data[index];
                this.data[index] = record;
                this.fireEvent('storeRecordReplaced', [oldRecord, record]);
                return true;
            }
            return false;
        },
        /**
         * APIMethod: deleteRecord
         * Marks a record for deletion and removes it from the regular array of
         * records. It adds it to a special holding array so it can be disposed
         * of later.
         *
         * Parameters:
         * index - the index at which to place the new record. Optional.
         *          defaults to the current store index.
         */
        deleteRecord: function(index) {
            if (index === undefined && index !== null) {
                index = this.index;
            }
            var record = this.data[index];
            record.state = Record.DELETE;
            // Set to Null or slice it out and compact the array???
            //this.data[index] = null;
            this.data.splice(index,1);
            // TODO: I moved this to a property that is always an array so I don't
            // get an error in the save strategy.
            // if (this.deleted  == undefined) {
            //     this.deleted = [];
            // }
            this.deleted.push(record);
            this.fireEvent('storeRecordDeleted', [this, record]);
        },
        /**
         * APIMethod: insertRecord
         * Shortcut to addRecord which facilitates marking a record as inserted.
         *
         * Parameters:
         * data - the data to use in creating this inserted record. Should be in
         *          whatever form the current implementation of Jx.Record needs
         * position - where to place the record. Should be either 'top' or
         *    'bottom'.
         */
        insertRecord: function (data, position) {
            this.addRecord(data, position, true);
        },
    
        /**
         * APIMethod: getFields
         * Allows retrieving the fields array
         */
        getFields: function () {
            return this.options.fields;
        },
    
        /**
         * APIMethod: findByColumn
         * Used to find a specific record by the value in a specific column. This
         * is particularly useful for finding records by a unique id column. The
         * search will stop on the first instance of the value
         *
         * Parameters:
         * column - the name (or index) of the column to search by
         * value - the value to look for
         */
        findByColumn: function (column, value) {
            if (typeof StopIteration === "undefined") {
                StopIteration = new Error("StopIteration");
            }
    
            var index;
            try {
                this.data.each(function(record, idx){
                    if (record.equals(column, value)) {
                        index = idx;
                        throw StopIteration;
                    }
                },this);
            } catch (error) {
                if (error !== StopIteration) {
                    throw error;
                }
                return index;
            }
            return null;
        },
        /**
         * APIMethod: removeRecord
         * removes (but does not mark for deletion) a record at the given index
         * or the current store index if none is passed in.
         *
         * Parameters:
         * index - Optional. The store index of the record to remove.
         */
        removeRecord: function (index) {
            if (index === undefined && index !== null) {
                index = this.index;
            }
            this.data.splice(index,1);
            this.fireEvent('storeRecordRemoved', [this, index]);
        },
        /**
         * APIMethod: removeRecords
         * Used to remove multiple contiguous records from a store.
         *
         * Parameters:
         * first - where to start removing records (zero-based)
         * last - where to stop removing records (zero-based, inclusive)
         */
        removeRecords: function (first, last) {
            for (var i = first; i <= last; i++) {
                this.removeRecord(first);
            }
            this.fireEvent('storeMultipleRecordsRemoved', [this, first, last]);
        },
    
        /**
         * APIMethod: parseTemplate
         * parses the provided template to determine which store fields are
         * required to complete it.
         *
         * Parameters:
         * template - the template to parse
         */
        parseTemplate: function (template) {
            //we parse the template based on fields in the data store looking
            //for the pattern {column-name}. If it's in there we add it to the
            //array of ones to look for
            var arr = [],
                s;
            this.options.fields.each(function (col) {
                s = '{' + col.name + '}';
                if (template.contains(s)) {
                    arr.push(col.name);
                }
            }, this);
            return arr;
        },
    
        /**
         * APIMethod: fillTemplate
         * Actually does the work of getting the data from the store
         * and creating a single item based on the provided template
         *
         * Parameters:
         * index - the index of the data in the store to use in populating the
         *          template or a Jx.Record instance.
         * template - the template to fill
         * columnsNeeded - the array of fields needed by this template. should be
         *      obtained by calling parseTemplate().
         * obj - an object with some prefilled keys to use in substituting.
         *      Ones that are also in the store will be overwritten.
         */
        fillTemplate: function (index, template, columnsNeeded, obj) {
            var record = null,
                itemObj;
            if (index !== undefined  && index !== null) {
                if (index instanceof Record) {
                    record = index;
                } else {
                    record = this.getRecord(index);
                }
              } else {
                  record = this.getRecord(this.index);
              }
    
            //create the item
            itemObj = (obj !== undefined  && obj !== null) ? obj : {};
            columnsNeeded.each(function (col) {
                itemObj[col] = record.get(col);
            }, this);
            return template.substitute(itemObj);
        },
    
        /**
         * APIMethod: equals
         * Compares to records to see if they are equivalent. Basically compares the
         * data objects.
         *
         * Parameters:
         * record - the first record to use in the comparison. Can either be a Jx.Record
         *          instance, oor an index to pull from the store.
         * compareTo - the second record to use in the comparison. Same as record.
         */
        equals: function(record,compareTo) {
            record = this.getRecord(record);
            compareTo = this.getRecord(compareTo);
    
            return record.data == compareTo.data;
        }
    
    });
    
    if (base.global) {
        base.global.Store = module.exports;
    }
    
});

/*
---

name: Jx.Plugin.Grid

description: Namespace for grid plugins

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.Grid]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Grid
 * Grid plugin namespace
 *
 *
 * License:
 * This version Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/grid", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.Grid = {};
    }
});

/*
---

name: Jx.Grid

description: A tabular control that has fixed scrolling headers on the rows and columns like a spreadsheet.

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Styles
 - Jx.Layout
 - Jx.Plugin.Grid
 - Jx.Store
 - Jx.List

provides: [Jx.Grid]

css:
 - grid

images:
 - table_col.png
 - table_row.png

...
 */
// $Id$
/**
 * Class: Jx.Grid
 *
 * Extends: <Jx.Widget>
 *
 * A tabular control that has fixed, optional, scrolling headers on the rows
 * and columns like a spreadsheet.
 *
 * Jx.Grid is a tabular control with convenient controls for resizing columns,
 * sorting, and inline editing.  It is created inside another element,
 * typically a div.  If the div is resizable (for instance it fills the page
 * or there is a user control allowing it to be resized), you must call the
 * resize() method of the grid to let it know that its container has been
 * resized.
 *
 * When creating a new Jx.Grid, you can specify a number of options for the
 * grid that control its appearance and functionality. You can also specify
 * plugins to load for additional functionality. Currently Jx provides the
 * following plugins
 *
 * Prelighter - prelights rows, columns, and cells
 * Selector - selects rows, columns, and cells
 * Sorter - sorts rows by specific column
 * Editor - allows editing of cells if the column permits editing
 *
 * Jx.Grid renders data that comes from an external source.  This external
 * source, called the store, must be a Jx.Store or extended from it.
 *
 * Events:
 * gridCellEnter(cell, list) - called when the mouse enters a cell
 * gridCellLeave(cell, list) - called when the mouse leaves a cell
 * gridCellClick(cell) - called when a cell is clicked
 * gridRowEnter(cell, list) - called when the mouse enters a row header
 * gridRowLeave(cell, list) - called when the mouse leaves a row header
 * gridRowClick(cell) - called when a row header is clicked
 * gridColumnEnter(cell, list) - called when the mouse enters a column header
 * gridColumnLeave(cell, list) - called when the mouse leaves a column header
 * gridColumnClick(cell) - called when a column header is clicked
 * gridMouseLeave() - called when the mouse leaves the grid at any point.
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 * This version Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/grid", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Store = require("./store"),
        Layout = require("./layout"),
        List = require("./list"),
        RowModel = null,
        ColumnModel = null,
        TextRenderer = null,
        Column = null;
        
    var grid = module.exports= new Class({
        
        Extends: Widget,
        Family : 'Jx.Grid',
        Binds: ['storeLoaded', 'clickColumnHeader', 'moveColumnHeader', 'clickRowHeader', 'moveRowHeader', 'clickCell', 'dblclickCell', 'moveCell', 'leaveGrid', 'resize', 'drawStore', 'scroll', 'addRow', 'removeRow', 'removeRows', 'updateRow', 'storeChangesCompleted'],
      
        /**
         * Property: pluginNamespace
         * the required variable for plugins
         */
        pluginNamespace: 'Grid',
        
        options: {
            /**
             * Option: parent
             * the HTML element to create the grid inside. The grid will resize
             * to fill the domObj.
             */
            parent: null,
          
            template: "<div class='jxWidget'><div class='jxGridContainer jxGridRowCol'></div><div class='jxGridContainer jxGridColumnsContainer'><table class='jxGridTable jxGridHeader jxGridColumns'><thead class='jxGridColumnHead'></thead></table></div><div class='jxGridContainer jxGridHeader jxGridRowContainer'><table class='jxGridTable jxGridRows'><thead class='jxGridRowBody'></thead></table></div><div class='jxGridContainer jxGridContentContainer'><table class='jxGridTable jxGridContent'><tbody class='jxGridTableBody'></tbody></table></div></div>",
          
            /**
             * Options: columnModel
             * an object consisting of a columns array that defines the individuals
             * columns as well as containing any options for Jx.Grid.ColumnModel or
             * a Jx.Grid.ColumnModel object itself.
             */
            columnModel: null,
          
            /**
             * Option: row
             * Either a Jx.Grid.RowModel object or a json object defining options for
             * the class
             */
            rowModel : null,
      
            /**
             * Option: store
             * An instance of Jx.Store
             */
            store: null
        },
         
        classes: {
            domObj: 'jxWidget',
            columnContainer: 'jxGridColumnsContainer',
            colObj: 'jxGridColumns',
            colTableBody: 'jxGridColumnHead',
            rowContainer: 'jxGridRowContainer',
            rowObj: 'jxGridRows',
            rowColContainer: 'jxGridRowCol',
            rowTableBody: 'jxGridRowBody',
            contentContainer: 'jxGridContentContainer',
            gridObj: 'jxGridContent',
            gridTableBody: 'jxGridTableBody'
        },
        
        /**
         * Property: columns
         * holds a reference to the columns object
         */
        columnModel: null,
        
        /**
         * Property: row
         * Holds a reference to the row object
         */
        rowModel: null,
        
        parameters: ['options'],
        
        /**
         * Property: store
         * holds a reference to the <Jx.Store> that is the store for this
         * grid
         */
        store: null,
        
        /**
         * Property: styleSheet
         * the name of the dynamic style sheet to use for manipulating styles
         */
        styleSheet: 'JxGridStyles',
        
        /**
         * Property: hooks
         * an Object of event names for tracking which events have actually been attached
         * to the grid.
         */
        hooks: null,
        
        /**
         * Property: uniqueId
         * an auto-generated id that is assigned as a class name to the grid's
         * container for scoping generated CSS rules to just this grid
         */
        uniqueId: null,
        
        /**
         * Constructor: Jx.Grid
         */
        init: function() {
            //load classes needed here
            RowModel = require("./grid/rowmodel");
            ColumnModel = require("./grid/columnmodel");
            TextRenderer = require("./grid/renderer/text");
            Column = require("./grid/column");
            
            
            //start actual code
            this.uniqueId = this.generateId('jxGrid_');
            this.store = this.options.store;
            var options = this.options,
                opts;
      
            if (options.rowModel !== undefined && options.rowModel !== null) {
                if (instanceOf(options.rowModel, RowModel)) {
                    this.rowModel = options.rowModel;
                    this.rowModel.grid = this;
                } else if (typeOf(options.rowModel) == 'object') {
                    this.rowModel = new RowModel(Object.append({grid: this}, options.rowModel));
                }
            } else {
                this.rowModel = new RowModel({grid: this});
            }
      
            if (options.columnModel !== undefined && options.columnModel !== undefined) {
                if (instanceOf(options.columnModel, ColumnModel)) {
                    this.columnModel = options.columnModel;
                    this.columnModel.grid = this;
                } else if (typeOf(options.columnModel) === 'object') {
                    this.columnModel = new ColumnModel(Object.append({grid:this}, options.columnModel));
                }
            } else {
                this.columnModel = new ColumnModel({grid: this});
            }
          
            this.hooks = {
                'gridScroll': false,
                'gridColumnEnter': false,
                'gridColumnLeave': false,
                'gridColumnClick': false,
                'gridRowEnter': false,
                'gridRowLeave': false,
                'gridRowClick': false,
                'gridCellClick': false,
                'gridCellDblClick': false,
                'gridCellEnter': false,
                'gridCellLeave': false,
                'gridMouseLeave': false
            };
          
            this.storeEvents = {
                'storeDataLoaded': this.storeLoaded,
                // 'storeSortFinished': this.drawStore,
                'storeRecordAdded': this.addRow,
                'storeColumnChanged': this.updateRow,
                'storeRecordRemoved': this.removeRow,
                'storeMultipleRecordsRemoved': this.removeRows,
                'storeChangesCompleted': this.storeChangesCompleted
            };
          
            this.parent();
        },
        
        wantEvent: function(eventName) {
            var hook = this.hooks[eventName];
            if (hook === false) {
                switch(eventName) {
                case 'gridColumnEnter':
                case 'gridColumnLeave':
                    this.colObj.addEvent('mousemove', this.moveColumnHeader);
                    this.hooks = Object.merge(this.hooks,{
                        'gridColumnEnter': true,
                        'gridColumnLeave': true
                    });
                    break;
                case 'gridColumnClick':
                    this.colObj.addEvent('click', this.clickColumnHeader);
                    this.hooks.gridColumnClick = true;
                    break;
                case 'gridRowEnter':
                case 'gridRowLeave':
                    this.rowObj.addEvent('mousemove', this.moveRowHeader);
                    this.hooks = Object.merge(this.hooks,{
                        'gridRowEnter': true,
                        'gridRowLeave': true
                    });
                    break;
                case 'gridRowClick':
                    this.rowObj.addEvent('click', this.clickRowHeader);
                    this.hooks.gridRowClick = true;
                    break;
                case 'gridCellEnter':
                case 'gridCellLeave':
                    this.gridObj.addEvent('mousemove', this.moveCell);
                    this.hooks = Object.merge(this.hooks, {
                        'gridCellEnter': true,
                        'gridCellLeave': true
                    });
                    break;
                case 'gridCellClick':
                    this.gridObj.addEvent('click', this.clickCell);
                    this.hooks.gridCellClick = true;
                    break;
                case 'gridCellDblClick':
                    this.gridObj.addEvent('dblclick', this.dblclickCell);
                    this.hooks.gridCellDblClick = true;
                    break;
                case 'gridMouseLeave':
                    this.rowObj.addEvent('mouseleave', this.leaveGrid);
                    this.colObj.addEvent('mouseleave', this.leaveGrid);
                    this.gridObj.addEvent('mouseleave', this.leaveGrid);
                    this.hooks.gridMouseLeave = true;
                    break;
                case 'gridScroll':
                    this.contentContainer.addEvent('scroll', this.scroll);
                    break;
                default:
                    break;
                }
            }
        },
        
        /**
         * Method: scroll
         * handle the grid scrolling by updating the position of the headers
         */
        scroll : function () {
            this.columnContainer.scrollLeft = this.contentContainer.scrollLeft;
            this.rowContainer.scrollTop = this.contentContainer.scrollTop;
        },
        
        /**
         * APIMethod: render
         * Create the grid for the current model
         */
        render: function() {
            if (this.domObj) {
                this.redraw();
                return;
            }
            this.parent();
            var store = this.store;
          
            this.domObj.addClass(this.uniqueId);
            new Layout(this.domObj, {
                onSizeChange: this.resize
            });
          
            if (instanceOf(store, Store)) {
                store.addEvents(this.storeEvents);
                if (store.loaded) {
                    this.storeLoaded(store);
                }
            }
            if (!this.columnModel.useHeaders()) {
                this.columnContainer.dispose();
            } else {
                this.wantEvent('gridScroll');
            }
          
            if (!this.rowModel.useHeaders()) {
                this.rowContainer.dispose();
            } else {
                this.wantEvent('gridScroll');
            }
      
            this.contentContainer.setStyle('overflow', 'auto');
          
            // todo: very hacky!  can plugins 'wantEvent' between init and render?
            //YES! made a change to the order of things so we can call wantEvent from
            //the plugin's attach method. Woo!!
            /*
            Object.each(this.hooks, function(value, key) {
                if (value) {
                    this.hooks[key] = false;
                    this.wantEvent(key);
                }
            }, this);
            */
          
            if (this.options.parent !== undefined &&
                this.options.parent !== null &&
                typeOf(this.options.parent) != 'function') {
                this.resize();
            }
        },
        
        /**
         * APIMethod: resize
         * resize the grid to fit inside its container.  This involves knowing
         * something about the model it is displaying (the height of the column
         * header and the width of the row header) so nothing happens if no model is
         * set
         */
        resize: function() {
            var p = this.domObj.getParent(),
                parentSize = p.getSize(),
                colHeaderHeight = 0,
                rowHeaderWidth = 0;
          
            if (this.columnModel.useHeaders()) {
                colHeaderHeight = this.columnModel.getHeaderHeight();
            }
          
            if (this.rowModel.useHeaders()) {
                rowHeaderWidth = this.rowModel.getRowHeaderWidth();
            }
          
            this.rowColContainer.setBorderBoxSize({
                width : rowHeaderWidth,
                height : colHeaderHeight
            });
          
            this.columnContainer.setStyles({
                top: 0,
                left: rowHeaderWidth
            }).setBorderBoxSize({
                width: parentSize.x - rowHeaderWidth,
                height: colHeaderHeight
            });
      
            this.rowContainer.setStyles({
                top: colHeaderHeight,
                left: 0
            }).setBorderBoxSize({
                width: rowHeaderWidth,
                height: parentSize.y - colHeaderHeight
            });
      
            this.contentContainer.setStyles({
                top: colHeaderHeight,
                left: rowHeaderWidth
            }).setBorderBoxSize({
                width: parentSize.x - rowHeaderWidth,
                height: parentSize.y - colHeaderHeight
            });
        },
        
        /**
         * APIMethod: setStore
         * set the store for the grid to display.  If a store is attached to the
         * grid it is removed and the new store is displayed.
         *
         * Parameters:
         * store - {Object} the store to use for this grid
         */
        setStore: function(store) {
            if (this.store) {
                this.store.removeEvents(this.storeEvents);
            }
            if (instanceOf(store, Store)) {
                this.store = store;
                store.addEvents(this.storeEvents);
                if (store.loaded) {
                    this.storeLoaded(store);
                }
                this.render();
                this.domObj.resize();
            } else {
                this.destroyGrid();
            }
        },
        
        /**
         * APIMethod: getStore
         * gets the store set for this grid.
         */
        getStore: function() { 
            return this.store;
        },
        
        storeLoaded: function(store) {
            this.redraw();
        },
        
        /**
         */
        storeChangesCompleted: function(results) {
            if (results && results.successful) {
                //TODO: What goes here?????
            }
        },
        
        redraw: function() {
            var store = this.store,
                template = '',
                tr,
                columns = [],
                useRowHeaders = this.rowModel.useHeaders();
            this.fireEvent('beginCreateGrid');
          
            this.gridObj.getElement('tbody').empty();
            
            this.hoverColumn = this.hoverRow = this.hoverCell = null;
            
            // TODO: consider moving whole thing into Jx.Columns ??
            // create a suitable column representation for everything
            // in the store that doesn't already have a representation
            store.options.fields.each(function(col, index) {
                if (!this.columnModel.getByName(col.name)) {
                    var renderer = new TextRenderer(),
                        format = (col.format !== undefined && col.format !== null) ? col.format : null,
                        template = "<span class='jxGridCellContent'>"+ ((col.label !== undefined && col.label !== null) ? col.label : col.name).capitalize() + "</span>",
                        column;
                    if (col.renderer !== undefined) {
                        if (typeOf(col.renderer) == 'string') {
                            var r = require("./grid/renderer/" + col.renderer);
                            if (r) {
                                renderer = new r();
                            }
                        } else if (typeOf(col.renderer) == 'object' &&
                                   col.renderer.type !== undefined &&
                                   col.renderer.type !== null) {
                            var r = require("./grid/renderer/" + col.renderer.type);
                            if (r) {
                                renderer = new r(col.renderer);
                            }
                        }
                        if (format) {
                            t = typeOf(format);
                            if (t == 'string') {
                                var f = require("./formatter/" + format);    
                                if (f) {
                                    renderer.options.formatter = new f();
                                }
                            } else if (t == 'object' &&
                                   format.type !== undefined &&
                                   format.type !== null) {
                                var f = require("./formatter/" + format.type);
                                if (f) {
                                    renderer.options.formatter = new f(format);
                                }
                            }
                        }
                    }
                    column = new JColumn({
                        grid: this,
                        template: template,
                        renderMode: (col.renderMode !== undefined && col.renderMode !== null) ?
                                      col.renderMode :
                                      (col.width !== undefined && col.width !== undefined) ? 'fixed' : 'fit',
                        width: (col.width !== undefined && col.width !== null) ? col.width : null,
                        isEditable: (col.editable !== undefined && col.editable !== null) ? col.editable : false,
                        isSortable: (col.sortable !== undefined && col.sortable !== null) ? col.sortable : false,
                        isResizable: (col.resizable !== undefined && col.resizable !== null) ? col.resizable : false,
                        isHidden: true,
                        name: col.name || '',
                        renderer: renderer
                    });
                    columns.push(column);
                }
            }, this);
            this.columnModel.addColumns(columns);
            if (this.columnModel.useHeaders()) {
                tr = new Element('tr');
                this.columnModel.getHeaders(tr);
                tr.adopt(new Element('th', {
                    'class': 'jxGridColHead',
                    'html': '&nbsp',
                    styles: {
                        width: 1000
                    }
                }));
                this.colObj.getElement('thead').empty().adopt(tr);
            }
            this.columnModel.calculateWidths();
            this.columnModel.createRules(this.styleSheet+'Columns', '.'+this.uniqueId);
            this.drawStore();
            this.fireEvent('doneCreateGrid');
        },
        
        /**
         * APIMethod: addRow
         * Adds a row to the table. Can add to either the beginning or the end 
         * based on passed flag
         */
        addRow: function (store, record, position) {
            if (this.store.loaded) {
                if (position === 'bottom') {
                    this.store.last();
                } else {
                    this.store.first();
                }
                this.drawRow(record, this.store.index, position);
            }
        },
        
        /**
         * APIMethod: updateRow
         * update a single row in the grid
         *
         * Parameters:
         * index - the row to update
         */
        updateRow: function(index) {
            var record = this.store.getRecord(index);
            this.drawRow(record, index, 'replace');
        },
        
        /**
         * APIMethod: removeRow
         * remove a single row from the grid
         *
         * Parameters:
         * store
         * index
         */
        removeRow: function (store, index) {
            this.gridObj.deleteRow(index);
            this.rowObj.deleteRow(index);
        },
        
        /**
         * APIMethod: removeRows
         * removes multiple rows from the grid
         *
         * Parameters:
         * store
         * index
         */
        removeRows: function (store, first, last) {
            for (var i = first; i <= last; i++) {
                this.removeRow(store, first);
            }
        },
        
        /**
         * APIMethod: setColumnWidth
         * set the width of a column in pixels
         *
         * Parameters:
         * column
         * width
         */
        setColumnWidth: function(column, width) {
            if (column) {
                column.width = width;
                if (column.rule) {
                    column.rule.style.width = width + 'px';
                }
                if (column.cellRule) {
                    column.cellRule.style.width = width + 'px';
                }
            }
        },
        
        /**
         * Method: drawStore
         * clears the grid and redraws the store.  Does not draw the column headers,
         * that is handled by the render() method
         */
        drawStore: function() {
            var useHeaders = this.rowModel.useHeaders(), 
                blank;
            this.domObj.resize();
            this.gridTableBody.empty();
            if (useHeaders) {
                this.rowTableBody.empty();
            }
            this.store.each(function(record,index) {
                this.store.index = index;
                this.drawRow(record, index);
            }, this);
            if (useHeaders) {
                blank = new Element('tr', {
                    styles: { height: 1000 }
                });
                blank.adopt(new Element('th', {
                    'class':'jxGridRowHead', 
                    html: '&nbsp'
                }));
                this.rowTableBody.adopt(blank);
            } 
        },
        
        /**
         * Method: drawRow
         * this method does the heavy lifting of drawing a single record into the
         * grid
         *
         * Parameters:
         * record - {Jx.Record} the record to render
         * index - {Integer} the row index of the record in the store
         * position - {String} 'top' or 'bottom' (default 'bottom') position to put
         *     the new row in the grid.
         */
        drawRow: function(record, index, position) {
            var columns = this.columnModel,
                body = this.gridTableBody,
                row = this.rowModel,
                store = this.store,
                rowHeaders = row.useHeaders(),
                autoRowHeight = row.options.rowHeight == 'auto',
                rowBody = this.rowTableBody,
                rowHeaderColumn,
                rowHeaderColumnIndex,
                renderer,
                formatter, 
                getData,
                tr,
                th,
                text = index + 1,
                rh;
            if (position === undefined || position === null || !['top','bottom','replace'].contains(position)) {
                position = 'bottom';
            }
            tr = row.getGridRowElement(index, '');
            if (position == 'replace' && index < body.childNodes.length) {
                tr.inject(body.childNodes[index], 'after');
                body.childNodes[index].dispose();
            } else {
                tr.inject(body, position);
            }
            columns.getRow(tr, record);
            if (rowHeaders) {
                if (row.options.headerColumn) {
                    rowHeaderColumn = columns.getByName(row.options.headerColumn);
                    renderer = rowHeaderColumn.options.renderer;
                    if (!renderer.domInsert) {
                        formatter = rowHeaderColumn.options.formatter;
                        rowHeaderColumnIndex = columns.columns.indexOf(rowHeaderColumn);
                        getData = function(record) {
                            var data = {},
                            text = '';
                            if (renderer.options.textTemplate) {
                                text = store.fillTemplate(null, renderer.options.textTemplate, renderer.columnsNeeded);
                            } else {
                                text = record.data.get(rowHeaderColumn.name);
                            }
                            data['col'+rowHeaderColumnIndex] = text;
                            return data;
                        };
                        text = rowHeaderColumn.getTemplate(rowHeaderColumnIndex).substitute(getData(record));
                    } else {
                        text = '';
                    }
                }
                th = row.getRowHeaderCell(text);
                if (row.options.headerColumn && renderer.domInsert) {
                    th.adopt(rowHeaderColumn.getHTML());
                }
                rh = new Element('tr').adopt(th);
                if (position == 'replace' && index < rowBody.childNodes.length) {
                    rh.inject(rowBody.childNodes[index], 'after');
                    rowBody.childNodes[index].dispose();
                } else {
                    rh.inject(rowBody, position);
                }
                if (autoRowHeight) {
                    // th.setBorderBoxSize({height: tr.childNodes[0].getBorderBoxSize().height});
                    rh.setBorderBoxSize({height: tr.getBorderBoxSize().height});
                }
            }
            this.fireEvent('gridDrawRow', [index, record]);
        },
        
        /**
         * Method: clickColumnHeader
         * handle clicks on the column header
         */
        clickColumnHeader: function(e) {
            var target = e.target;
            if (target.getParent('thead')) {
                target = target.tagName == 'TH' ? target : target.getParent('th');
                this.fireEvent('gridColumnClick', target);
            }
        },
        
        /**
         * Method: moveColumnHeader
         * handle the mouse moving over the column header
         */
        moveColumnHeader: function(e) {
            var target = e.target;
            target = target.tagName == 'TH' ? target : target.getParent('th.jxGridColHead');
            if (target) {
                if (this.hoverColumn != target) {
                    if (this.hoverColumn) {
                        this.fireEvent('gridColumnLeave', this.hoverColumn);
                    }
                    if (!target.hasClass('jxGridColHead')) {
                        this.leaveGrid(e);
                    } else {
                        this.hoverColumn = target;
                        this.fireEvent('gridColumnEnter', target);
                    }
                }
            }
        },
      
        /**
         * Method: clickRowHeader
         * handle clicks on the row header
         */
        clickRowHeader: function(e) {
            var target = e.target;
            if (target.getParent('tbody')) {
                target = target.tagName == 'TH' ? target : target.getParent('th');
                this.fireEvent('gridRowClick', target);
            }
        },
        
        /**
         * Method: moveRowHeader
         * handle the mouse moving over the row header
         */
        moveRowHeader: function(e) {
            var target = e.target;
            target = target.tagName == 'TH' ? target : target.getParent('th.jxGridRowHead');
            if (target) {
                if (this.hoverRow != target) {
                    if (this.hoverRow) {
                        this.fireEvent('gridRowLeave', this.hoverRow);
                    }
                    if (!target.hasClass('jxGridRowHead')) {
                        this.leaveGrid(e);
                    } else {
                        this.hoverRow = target;
                        this.fireEvent('gridRowEnter', target);
                    }
                }
            }
        },
        
        /**
         * Method: clickCell
         * handle clicks on cells in the grid
         */
        clickCell: function(e) {
            var target = e.target;
            if (target.getParent('tbody')) {
                target = target.tagName == 'TD' ? target : target.getParent('td');
                this.fireEvent('gridCellClick', target);
            }
        },
        
        /**
         * Method: dblclickCell
         * handle doubleclicks on cells in the grid
         */
        dblclickCell: function(e) {
            var target = e.target;
            if (target.getParent('tbody')) {
                target = target.tagName == 'TD' ? target : target.getParent('td');
                this.fireEvent('gridCellDblClick', target);
            }
        },
        
        /**
         * Method: moveCell
         * handle the mouse moving over cells in the grid
         */
        moveCell: function(e) {
            var target = e.target,
                data,
                body,
                row,
                index,
                column;
            target = target.tagName == 'TD' ? target : target.getParent('td.jxGridCell');
            if (target) {
                if (this.hoverCell != target) {
                    if (this.hoverCell) {
                        this.fireEvent('gridCellLeave', this.hoverCell);
                    }
                    if (!target.hasClass('jxGridCell')) {
                        this.leaveGrid(e);
                    } else {
                        this.hoverCell = target;
                        this.getCellData(target);
                        this.fireEvent('gridCellEnter', target);
                    }
                }
            }
        },
        
        getCellData: function(cell) {
            var data = null,
                index,
                column,
                row;
            if (!cell.hasClass('jxGridCell')) {
                cell = cell.getParent('td.jxGridCell');
            }
            if (cell) {
                body = this.gridTableBody;
                row = body.getChildren().indexOf(cell.getParent('tr'));
                this.columnModel.columns.some(function(col,idx){
                    if (cell.hasClass('jxGridCol'+idx)) {
                        index = idx;
                        column = col;
                        return true;
                    }
                    return false;
                });
                data = {
                    row: row,
                    column: column,
                    index: index
                };
                cell.store('jxCellData', data);
            }
            return data;
        },
        
        /**
         * Method: leaveGrid
         * handle the mouse leaving the grid
         */
        leaveGrid: function(e) {
            this.hoverCell = null;
            this.fireEvent('gridMouseLeave');
        },
        
        /**
         * Method: changeText
         * rerender the grid when the language changes
         */
        changeText : function(lang) {
            this.parent();
            this.render();
        },
        
        /**
         * Method: addEvent
         * override default addEvent to also trigger wanting the event
         * which will then cause the underlying events to be registered
         */
        addEvent: function(name, fn) {
            this.wantEvent(name);
            this.parent(name, fn);
        }
    });
    
    if (base.global) {
        base.global.Grid = module.exports;
    }
    
});


/*
---

name: Jx.Button.Flyout

description: Flyout buttons expose a panel when the user clicks the button.

license: MIT-style license.

requires:
 - Jx.Button

provides: [Jx.Button.Flyout]

images:
 - flyout_chrome.png
 - emblems.png

...
 */
// $Id$
/**
 * Class: Jx.Button.Flyout
 *
 * Extends: <Jx.Button>
 *
 * Flyout buttons expose a panel when the user clicks the button.  The
 * panel can have arbitrary content.  You must provide any necessary
 * code to hook up elements in the panel to your application.
 *
 * When the panel is opened, the 'open' event is fired.  When the panel is
 * closed, the 'close' event is fired.  You can register functions to handle
 * these events in the options passed to the constructor (onOpen, onClose).
 *
 * The user can close the flyout panel by clicking the button again, by
 * clicking anywhere outside the panel and other buttons, or by pressing the
 * 'esc' key.
 *
 * Flyout buttons implement <Jx.ContentLoader> which provides the hooks to
 * insert content into the Flyout element.  Note that the Flyout element
 * is not appended to the DOM until the first time it is opened, and it is
 * removed from the DOM when closed.
 *
 * It is generally best to specify a width and height for your flyout content
 * area through CSS to ensure that it works correctly across all browsers.
 * You can do this for all flyouts using the .jxFlyout CSS selector, or you
 * can apply specific styles to your content elements.
 *
 * A flyout closes other flyouts when it is opened.  It is possible to embed
 * flyout buttons inside the content area of another flyout button.  In this
 * case, opening the inner flyout will not close the outer flyout but it will
 * close any other flyouts that are siblings.
 *
 * Example:
 * (code)
 * var flyout = new Jx.Button.Flyout({
 *      label: 'flyout',
 *      content: 'flyoutContent',
 *      onOpen: function(flyout) {
 *          console.log('flyout opened');
 *      },
 *      onClose: function(flyout) {
 *          console.log('flyout closed');
 *      }
 * });
 * (end)
 *
 * Events:
 * open - this event is triggered when the flyout is opened.
 * close - this event is triggered when the flyout is closed.
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/button/flyout', function(require, exports, module){
    
    var base = require("../../base"),
        Button = require("../button");
        
    var flyout = module.exports = new Class({
        Extends: Button,
        Family: 'Jx.Button.Flyout',
        Binds: ['keypressHandler', 'clickHandler'],
        options: {
            /* Option: template
             * the HTML structure of the flyout button
             */
            template: '<span class="jxButtonContainer"><a class="jxButton jxButtonFlyout jxDiscloser"><span class="jxButtonContent"><img class="jxButtonIcon" src="'+base.aPixel.src+'"><span class="jxButtonLabel "></span></a></span>',
            /* Option: contentTemplate
             * the HTML structure of the flyout content area
             */
            contentTemplate: '<div class="jxFlyout"><div class="jxFlyoutContent"></div></div>',
            /* Option: position
             * where to position the flyout, see Jx.Widget::position
             * for details on how to specify this option
             */
            position: {
              horizontal: ['left left', 'right right'],
              vertical: ['bottom top', 'top bottom']
            },
            /* Option: positionElement
             * the element to position the flyout relative to, by default
             * it is the domObj of this button and should only be changed
             * if you really know what you are doing
             */
            positionElement: null,
            /**
             * Option: hasChrome
             * Set to false to prevent chrome form being used on this flyout.
             * Defaults to true.
             */
            hasChrome: true
        },
    
        /**
         * Property: contentClasses
         * the classes array for processing the contentTemplate
         */
        contentClasses: {
            contentContainer: 'jxFlyout',
            content: 'jxFlyoutContent'
        },
    
        /**
         * Property: content
         * the HTML element that contains the flyout content
         */
        content: null,
        /**
         * Method: render
         * construct a new instance of a flyout button.
         */
        render: function() {
            var options = this.options;
            if (!flyout.Stack) {
                flyout.Stack = [];
            }
            this.parent();
            this.processElements(options.contentTemplate, this.contentClasses);
    
            if (options.contentClass) {
                this.content.addClass(options.contentClass);
            }
    
            this.content.store('jxFlyout', this);
            if(!options.loadOnDemand || options.active) {
              this.loadContent(this.content);
            }else{
              this.addEvent('contentLoaded', function(ev) {
                this.show(ev);
              }.bind(this));
            }
        },
        cleanup: function() {
          this.content.eliminate('jxFlyout');
          this.content.destroy();
          Object.each(this.contentClasses, function(v,k){
            this[k] = null;
          }, this);
          this.parent();
        },
        /**
         * APIMethod: clicked
         * Override <Jx.Button::clicked> to hide/show the content area of the
         * flyout.
         *
         * Parameters:
         * e - {Event} the user event
         */
        clicked: function(e) {
            var options = this.options;
            if (!options.enabled) {
                return;
            }
            if (this.contentIsLoaded && options.cacheContent) {
              this.show(e);
            // load on demand or reload content if caching is disabled
            } else if (options.loadOnDemand || !options.cacheContent) {
              this.loadContent(this.content);
            } else {
              this.show(e);
            }
        },
       /**
        * Private Method: show
        * Shows the Flyout after the content is loaded asynchronously
        *
        * Parameters:
        * e - {Event} - the user or contentLoaded event
        */
        show: function(e) {
            var node,
                fly,
                owner = this.owner,
                stack = flyout.Stack,
                options = this.options;
           /* find out what we are contained by if we don't already know */
            if (!owner) {
                this.owner = owner = document.body;
                node = document.id(this.domObj.parentNode);
                while (node != document.body && owner == document.body) {
                    fly = node.retrieve('jxFlyout');
                    if (fly) {
                        this.owner = owner = fly;
                        break;
                    } else {
                        node = document.id(node.parentNode);
                    }
                }
            }
            if (stack[stack.length - 1] == this) {
                this.hide();
                return;
            } else if (owner != document.body) {
                /* if we are part of another flyout, close any open flyouts
                 * inside the parent and register this as the current flyout
                 */
                if (owner.currentFlyout == this) {
                    /* if the flyout to close is this flyout,
                     * hide this and return */
                    this.hide();
                    return;
                } else if (owner.currentFlyout) {
                    owner.currentFlyout.hide();
                }
                owner.currentFlyout = this;
            } else {
                /* if we are at the top level, close the entire stack before
                 * we open
                 */
                while (stack.length) {
                    stack[stack.length - 1].hide();
                }
            }
            // now we go on the stack.
            stack.push(this);
            this.fireEvent('beforeOpen');
    
            options.active = true;
            this.domA.addClass(options.activeClass);
            this.contentContainer.setStyle('visibility','hidden');
            document.id(document.body).adopt(this.contentContainer);
            this.content.getChildren().each(function(child) {
                if (child.resize) {
                    child.resize();
                }
            });
            
            var pos;
            if (options.hasChrome) {
                this.showChrome(this.contentContainer);
                pos = Object.merge({},options.position, {
                  offsets: this.chromeOffsets
                });
            } else {
                pos = options.position
            }
            var rel = options.positionElement || this.domObj;
                
            this.position(this.contentContainer, rel, pos);
    
            /* we have to size the container for IE to render the chrome correctly
             * there is some horrible peekaboo bug in IE 6
             */
            this.contentContainer.setContentBoxSize(document.id(this.content).getMarginBoxSize());
    
            this.stack(this.contentContainer);
            this.contentContainer.setStyle('visibility','');
    
            document.addEvent('keydown', this.keypressHandler);
            document.addEvent('click', this.clickHandler);
            this.fireEvent('open', this);
        },
    
        /**
         * APIMethod: hide
         * Closes the flyout if open
         */
        hide: function() {
            if (this.owner != document.body) {
                this.owner.currentFlyout = null;
            }
            flyout.Stack.pop();
            this.setActive(false);
            this.contentContainer.dispose();
            this.unstack(this.contentContainer);
            document.removeEvent('keydown', this.keypressHandler);
            document.removeEvent('click', this.clickHandler);
            this.fireEvent('close', this);
        },
        /**
         * Method: clickHandler
         * hide flyout if the user clicks outside of the flyout
         */
        clickHandler: function(e) {
            e = new Event(e);
            var elm = document.id(e.target),
                fly = flyout.Stack[flyout.Stack.length - 1];
            if (!elm.descendantOf(fly.content) &&
                !elm.descendantOf(fly.domObj)) {
                fly.hide();
            }
        },
        /**
         * Method: keypressHandler
         * hide flyout if the user presses the ESC key
         */
        keypressHandler: function(e) {
            e = new Event(e);
            if (e.key == 'esc') {
                flyout.Stack[flyout.Stack.length - 1].hide();
            }
        }
    });
    
    if (base.global) {
        base.global.Button.Flyout = module.exports;
    }

});

/*
---

name: Jx.DatePicker

description: Provides a Date Picker component

license: MIT-style license.

requires:
 - Jx.MonthPicker
 - Jx.Button
 - Jx.Button.Flyout
 - Jx.Panel
 
css:
 - datepicker

provides: [Jx.DatePicker]

...
 */
// $Id$
/**
 * Class: Jx.DatePicker
 *
 * Provides a Date Picker component
 *
 * Example:
 * (code)
 * new Jx.DatePicker({
 *     value: '10/12/1982',
 *     onSelect: function(value){
 *         alert('seleccion: '+value);
 *     }
 * })
 * (end)
 *
 * Extends:
 * <Jx.Widget>
 *
 * Author: Ing. Axel Mendoza Pupo.
 * 
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 */
define("jx/datepicker",function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget"),
        Button = require("./button"),
        MonthPicker = require("./monthpicker"),
        Flyout = require("./button/flyout"),
        Panel = require("./panel");
        
    var datePicker = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.DatePicker',
        pluginNamespace: 'DatePicker',
    
        options: {
            template: '<div class="jxDatePicker" align="center"><div class="jxMonthPickerFly"></div><span class="jxDatePickerPrevButton"></span><span class="jxDatePickerBar"></span><span class="jxDatePickerNextButton"></span><table class="jxDatePickerTable"><thead><tr class="jxDatePickerWeekDays"></tr></thead><tbody class="jxDatePickerMonthDays"></tbody></table><div class="jxDatePickerToday"></div></div>',
            value: null
        },
        
        classes: {
            monthPickerFly: 'jxMonthPickerFly',
            domObj: 'jxDatePicker',
            prev: 'jxDatePickerPrevButton',
            next: 'jxDatePickerNextButton',
            today: 'jxDatePickerToday',
            title: 'jxDatePickerBar',
            table: 'jxDatePickerTable',
            weekDays: 'jxDatePickerWeekDays',
            monthDays: 'jxDatePickerMonthDays'
        },
        
        render: function() {
            this.parent();
            if(this.options.value){
                if(typeOf(this.options.value) == 'string'){
                    this.currentDate = new Date(this.options.value);
                } else{
                    this.currentDate = this.options.value;
                }
            } else {
                this.currentDate = new Date();
            }
                    
            var self = this;
            base.getText({set: 'Date', key: 'days_abbr'}).each(function(day){
                self.weekDays.adopt(
                    new Element('th',{
                        'class': 'jxDatePickerHeaderCell',
                        html: day
                    })
                );
            }, this);
                    
            new Button({
                imageClass: 'jxPrevDatePickerIcon',
                onClick: function(){
                    if(self.currentDate.getMonth() == 0){
                        self.currentDate.set('mo', 11);
                        self.currentDate.set('year', self.currentDate.get('year')-1);
                    } else{
                        self.currentDate.set('mo', self.currentDate.getMonth()-1);
                    }
                    self.monthLabel.setLabel(this.getText({set:'Date',key:'months',value: self.currentDate.get('mo')}) + ' '+ self.currentDate.get('year'));
                    self.update();
                }
            }).addTo(this.prev);
                    
            this.monthPicker = new MonthPicker({
                month: this.currentDate.get('mo'),
                year: this.currentDate.get('year'),
                onSelect: function(){
                    self.currentDate.set('mo', this.options.month);
                    self.currentDate.set('year', this.options.year);
                    self.monthLabel.setLabel(this.getText({set:'Date',key:'months',value: self.currentDate.get('mo')}) + ' '+ self.currentDate.get('year'));
                    self.monthLabel.hide();
                    self.update();
                },
                onCancel: function(){
                    self.monthLabel.hide();
                }
            });
                    
            this.monthLabel = new Flyout({
                label: this.getText({set:'Date',key:'months',value: self.currentDate.get('mo')}) + ' '+ self.currentDate.get('year'),
                tooltip: 'Change the current month',
                positionElement: this.domObj,
                position: {
                    horizontal: ['left left'],
                    vertical: ['top top']
                },
                hasChrome: false,
                content: new Panel({
                    width: 171,
                    height: 156,
                    collapsible: false,
                    hideTitle: true,
                    content: self.monthPicker
                }),
                onOpen: function(flyout) {
                    self.monthPicker.setMonth(self.currentDate.get('mo'));
                    self.monthPicker.setYear(self.currentDate.get('year'));
                }
            });
                    
            this.title.adopt(this.monthLabel);
                    
            new Button({
                imageClass: 'jxNextDatePickerIcon',
                onClick: function(){
                    if(self.currentDate.getMonth() == 11){
                        self.currentDate.set('mo', 0);
                        self.currentDate.set('year', self.currentDate.get('year')+1); 
                    } else{
                        self.currentDate.set('mo', self.currentDate.getMonth()+1);
                    }
                    self.monthLabel.setLabel(this.getText({set:'Date',key:'months',value: self.currentDate.get('mo')}) + ' '+ self.currentDate.get('year'));
                    self.update();
                }
            }).addTo(this.next);
                    
            new Button({
                label: 'Today',
                onClick: function(){
                    self.currentDate = new Date();
                    self.update();
                    self.fireEvent('select', new Date());
                }
            }).addTo(this.today);
                    
            this.construct();
            this.update();
        },
        
        construct: function(){
            if(this.rendered){
                return;
            }
            var self = this;
                    
            for (var i=0; i<6; i++) {
                var tr = new Element('tr');
                for (var j=0; j<7; j++) {
                    var td = new Element('td',{
                        events: {
                            click: function(event){
                                if(event.target.get('html') != ''){
                                    //event.target.focus();
                                    self.currentDate.set('date', event.target.get('html')); 
                                                    
                                    if(self.selectedCell){
                                        self.selectedCell.removeClass('jxDatePickerSelected');
                                    }
                                    event.target.addClass('jxDatePickerSelected');
                                    self.selectedCell = event.target;
                                                    
                                    self.fireEvent('select', self.currentDate);
                                }
                                event.stop();
                            }
                        }
                    });
                    tr.adopt(td);
                }
                this.monthDays.adopt(tr);
            }
            this.rendered = true;
        },
        
        update: function(){
            if(this.selectedCell){
                this.selectedCell.removeClass('jxDatePickerSelected');
            }
            this.monthLabel.setLabel(this.getText({set:'Date',key:'months',value: this.currentDate.get('mo')}) + ' '+ this.currentDate.get('year'));
            var firstDay = new Date(this.currentDate.get('year'), this.currentDate.get('mo'), 1);
            var startingDay = firstDay.getDay();
                    
            var lastDayOfMonth = this.currentDate.getLastDayOfMonth();
            var index = 0;
            var day = 1;
            var self = this;
                    
            this.monthDays.getChildren().each(function(row) {
                row.getChildren().each(function(node) {
                    if(index >= startingDay && index <= lastDayOfMonth + startingDay - 1){
                        node.set('html', day);
                        node.addClass('jxDatePickerCell');
                        node.removeClass('jxDatePickerEmptyCell');
                        if(day == self.currentDate.getDate()){
                            self.selectedCell = node;
                            self.selectedCell.addClass('jxDatePickerSelected');
                        }
                        day++;
                    } else{
                        node.set('html', '');
                        node.removeClass('jxDatePickerCell');
                        node.addClass('jxDatePickerEmptyCell');
                    }
                    index++;
                });
            });
        }
    });
    
    if (base.global) {
        base.global.DatePicker = module.exports;
    }
    
});

/*
---

name: Jx.Progressbar

description: A css-based progress bar.

license: MIT-style license.

requires:
 - Jx.Widget
 - Core/Fx.Tween

provides: [Jx.Progressbar]

css:
 - progressbar

images:
 - progressbar.png

...
 */
/**
 * Class: Jx.Progressbar
 *
 * 
 * Example:
 * The following just uses the defaults.
 * (code)
 * var progressBar = new Jx.Progressbar();
 * progressBar.addEvent('update',function(){alert('updated!');});
 * progressBar.addEvent('complete',function(){
 *      alert('completed!');
 *      this.destroy();
 * });
 * 
 * progressbar.addTo('container');
 * 
 * var total = 90;
 * for (i=0; i < total; i++) {
 *      progressbar.update(total, i);
 * }
 * (end)
 * 
 * Events:
 * onUpdate - Fired when the bar is updated
 * onComplete - fires when the progress bar completes it's fill
 * 
 * Locale keys:
 * - progressbar.messageText
 * - progressbar.progressText
 *
 * Copyright (c) 2010 by Jonathan Bomgardner
 * Licensed under an mit-style license
 */
define("jx/progressbar", function(require, exports, module){
    
    var base = require("../base"),
        Widget = require("./widget");
        
    var progressbar = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Progressbar',
        
        options: {
            onUpdate: function(){},
            onComplete: function(){},
            /**
             * Option: parent
             * The element to put this progressbar into
             */
            parent: null,
            /**
             * Option: progressText
             * Text to show while processing, uses 
             * {progress} von {total}
             */
            progressText : null,
            /**
             * Option: template
             * The template used to create the progressbar
             */
            template: '<div class="jxProgressBar-container"><div class="jxProgressBar-message"></div><div class="jxProgressBar"><div class="jxProgressBar-outline"></div><div class="jxProgressBar-fill"></div><div class="jxProgressBar-text"></div></div></div>'
        },
        /**
         * Property: classes
         * The classes used in the template
         */
        classes: {
            domObj: 'jxProgressBar-container',
            message: 'jxProgressBar-message', 
            container: 'jxProgressBar',
            outline: 'jxProgressBar-outline',
            fill: 'jxProgressBar-fill',
            text: 'jxProgressBar-text'
        },
        /**
         * Property: bar
         * the bar that is filled
         */
        bar: null,
        /**
         * Property: text
         * the element that contains the text that's shown on the bar (if any).
         */
        text: null,
        
        /**
         * APIMethod: render
         * Creates a new progressbar.
         */
        render: function () {
            this.parent();
            
            this.domObj.addClass('jxProgressStarting');
    
            //we need to know the width of the bar
            this.width = document.id(this.domObj).getContentBoxSize().width;
            
            //Message
            if (this.message) {
                if (Locale.get('Jx','progressbar').messageText !== undefined &&
                    Locale.get('Jx','progressbar').messageText !== null) {
                    this.message.set('html', this.getText({set:'Jx',key:'progressbar',value:'messageText'}));
                } else {
                    this.message.destroy();
                }
            }
    
            //Fill
            if (this.fill) {
                this.fill.setStyles({
                    'width': 0
                });
            }
            
            var obj = {};
            var progressText = this.options.progressText === null ? 
                                  this.getText({set:'Jx',key:'progressbar',value:'progressText'}) :
                                  this.getText(this.options.progressText);
            if (progressText.contains('{progress}')) {
                obj.progress = 0;
            }
            if (progressText.contains('{total}')) {
                obj.total = 0;
            }
            
            //Progress text
            if (this.text) {
                this.text.set('html', progressText.substitute(obj));
            }
            
            //set the tween instance
            this.fill.set('tween', {onComplete: this.tweenDone.bind(this)});
        },
        /**
         * APIMethod: update
         * called to update the progress bar with new percentage.
         * 
         * Parameters: 
         * total - the total # to progress up to
         * progress - the current position in the progress (must be less than or
         *              equal to the total)
         */
        update: function (total, progress) {
            //check for starting class
            if (this.domObj.hasClass('jxProgressStarting')) {
                this.domObj.removeClass('jxProgressStarting').addClass('jxProgressWorking');
            }
            
            this.total = total;
            this.progress = progress;
    
            var newWidth = (progress * this.width) / total;
            
            this.fill.tween('width', newWidth);
            
        },
        
        tweenDone: function(){
            var obj = {};
            var progressText = this.options.progressText === null ?
                                  this.getText({set:'Jx',key:'progressbar',value:'progressText'}) :
                                  this.getText(this.options.progressText);
            if (progressText.contains('{progress}')) {
                obj.progress = this.progress;
            }
            if (progressText.contains('{total}')) {
                obj.total = this.total;
            }
            var t = progressText.substitute(obj);
            this.text.set('text', t);            
            
            if (this.total <= this.progress) {
                this.complete = true;
                this.domObj.removeClass('jxProgressWorking').addClass('jxProgressFinished');
                this.fireEvent('complete');
            } else {
                this.fireEvent('update');
            }
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         * 		translations changed.
         */
        changeText: function (lang) {
            this.parent();
            if (this.message) {
                this.message.set('html',this.getText({set:'Jx',key:'progressbar',value:'messageText'}));
            }
            //progress text will update on next update.
        }
        
    });
    
    if (base.global) {
        base.global.Progressbar = module.exports;
    }
});

/*
---

name: Jx.Grid.Renderer

description: Base class for all renderers. Used to create the contents of column.

license: MIT-style license.

requires:
 - Jx.Grid

provides: [Jx.Grid.Renderer]

...
 */
/**
 * Class: Jx.Grid.Renderer
 * This is the base class and namespace for all grid renderers.
 * 
 * Extends: <Jx.Widget>
 * We extended Jx.Widget to take advantage of templating support.
 */
define("jx/grid/renderer", function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget"),
        Column = null;
        
    var renderer = module.exports = new Class({
  
        Extends: Widget,
        Family: 'Jx.Grid.Renderer',
        
        parameters: ['options'],
        
        options: {
            deferRender: true,
            /**
             * Option: template
             * The template for rendering this cell. Will be processed as per
             * the Jx.Widget standard.
             */
            template: '<span class="jxGridCellContent"></span>'
        },
        /**
         * APIProperty: attached
         * tells whether this renderer is used in attached mode
         * or not. Should be set by renderers that get a reference to
         * the store.
         */
        attached: null,
        
        /**
         * Property: domInsert
         * boolean, indicates if the renderer needs to insert a DOM element
         * instead of just outputing some templated HTML.  Renderers that
         * do use domInsert will be slower.
         */
        domInsert: false,
      
        classes: {
            domObj: 'jxGridCellContent'
        },
      
        column: null,
      
        init: function () {
            Column = require("./column");
            
            this.parent();
            this.attached = false;
        },
        
        render: function () {
            this.parent();
        },
        
        setColumn: function (column) {
            if (column instanceof Column) {
                this.column = column;
            }
        }
        
      });
    
    if (base.global) {
        base.global.Grid.Renderer = module.exports;
    }
})

/*
---

name: Jx.Grid.Column

description: A representation of a single grid column

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Grid
 - Jx.Grid.Renderer

provides: [Jx.Grid.Column]

...
 */
// $Id$
/**
 * Class: Jx.Grid.Column
 *
 * Extends: <Jx.Object>
 *
 * The class used for defining columns for grids.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/grid/column", function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget"),
        Grid = require("../grid"),
        Renderer = require("./renderer"),
        TextRenderer = null;
        
    var column = module.exports = new Class({

        Extends: Widget,
        Family: 'Jx.Grid.Column',
    
        options: {
            /**
             * Option: renderMode
             * The mode to use in rendering this column to determine its width.
             * Valid options include
             *
             * fit - auto calculates the width for the best fit to the text. This
             *      is the default.
             * fixed - uses the value passed in the width option, doesn't
             *      auto calculate.
             * expand - uses the value in the width option as a minimum width and
             *      allows this column to expand and take up any leftover space.
             *      NOTE: there can be only 1 expand column in a grid. The
             *      Jx.Columns object will only take the first column with this
             *      option as the expanding column. All remaining columns marked
             *      "expand" will be treated as "fixed".
             */
            renderMode: 'fit',
            /**
             * Option: width
             * Determines the width of the column when using 'fixed' rendering mode
             * or acts as a minimum width when using 'expand' mode.
             */
            width: 100,
    
            /**
             * Option: isEditable
             * allows/disallows editing of the column contents
             */
            isEditable: false,
            /**
             * Option: isSortable
             * allows/disallows sorting based on this column
             */
            isSortable: false,
            /**
             * Option: isResizable
             * allows/disallows resizing this column dynamically
             */
            isResizable: false,
            /**
             * Option: isHidden
             * determines if this column can be shown or not
             */
            isHidden: false,
            /**
             * Option: name
             * The name given to this column
             * if no label is specified the name is used as label
             */
            name: '',
            /**
             * Option: label
             * The label given to this column
             */
            label: null,
    
            /**
             * Option: template
             */
            template: null,
            /**
             * Option: renderer
             * an instance of a Jx.Grid.Renderer to use in rendering the content
             * of this column or a config object for creating one like so:
             *
             * (code)
             * {
             *     name: 'Text',
             *     options: { ... renderer options ... }
             * }
             */
            renderer: null
        },
    
        classes: {
          domObj: 'jxGridCellContent'
        },
    
        /**
         * Property: grid
         * holds a reference to the grid (an instance of <Jx.Grid>)
         */
        grid: null,
    
        parameters: ['options','grid'],
    
        /**
         * Constructor: Jx.Column
         * initializes the column object
         */
        init : function () {
            TextRenderer = require("./renderer/text");
            
            this.name = this.options.name;
    
            //adjust header for column
            if (this.options.template === undefined  || this.options.template === null) {
                if(this.options.label !== undefined  && this.options.label !== null){
                    this.options.template = '<span class="jxGridCellContent">' + this.options.label + '</span>';
                } else {
                    this.options.template = '<span class="jxGridCellContent">' + this.name.capitalize() + '</span>';
                }
            }
    
            this.parent();
            if (this.options.grid !== undefined  && this.options.grid !== null && instanceOf(this.options.grid, Grid)) {
                this.grid = this.options.grid;
            }
    
            //check renderer
            if (this.options.renderer === undefined || this.options.renderer === null) {
                //set a default renderer
                this.options.renderer = new TextRenderer({
                    textTemplate: '{' + this.name + '}'
                });
            } else {
                if (!instanceOf(this.options.renderer,Renderer)) {
                    var t = typeOf(this.options.renderer);
                    if (t === 'object') {
                        if(this.options.renderer.options.textTemplate === undefined || this.options.renderer.options.textTemplate === null) {
                          this.options.renderer.options.textTemplate = '{' + this.name + '}';
                        }
                        if(this.options.renderer.name === undefined || this.options.renderer.name === null) {
                          this.options.renderer.name = 'Text';
                        }
                        var r = require("./renderer/" + this.options.renderer.name);
                        this.options.renderer = new r(this.options.renderer.options);
                    }
                }
            }
    
            this.options.renderer.setColumn(this);
        },
    
        getTemplate: function(idx) {
          return "<span class='jxGridCellContent' title='{col"+idx+"}'>{col"+idx+"}</span>";
        },
    
        /**
         * APIMethod: getHeaderHTML
         */
        getHeaderHTML : function () {
          if (this.isSortable() && !this.sortImage) {
            this.sortImage = new Element('img', {
                src: base.aPixel.src
            });
            this.sortImage.inject(this.domObj);
          } else {
            if (!this.isSortable() && this.sortImage) {
              this.sortImage.dispose();
              this.sortImage = null;
            }
          }
          return this.domObj;
        },
    
        setWidth: function(newWidth, asCellWidth) {
            asCellWidth = (asCellWidth !== undefined && asCellWidth !== null) ? asCellWidth : false;
    
            var delta = this.cellWidth - this.width;
            if (!asCellWidth) {
              this.width = parseInt(newWidth,10);
              this.cellWidth = this.width + delta;
              this.options.width = newWidth;
            } else {
                this.width = parseInt(newWidth,10) - delta;
                this.cellWidth = newWidth;
                this.options.width = this.width;
            }
          if (this.rule && parseInt(this.width,10) >= 0) {
              this.rule.style.width = parseInt(this.width,10) + "px";
          }
          if (this.cellRule && parseInt(this.cellWidth,10) >= 0) {
              this.cellRule.style.width = parseInt(this.cellWidth,10) + "px";
          }
        },
    
        /**
         * APIMethod: getWidth
         * return the width of the column
         */
        getWidth: function () {
          return this.width;
        },
    
        /**
         * APIMethod: getCellWidth
         * return the cellWidth of the column
         */
        getCellWidth: function() {
          return this.cellWidth;
        },
    
        /**
         * APIMethod: calculateWidth
         * returns the width of the column.
         *
         * Parameters:
         * rowHeader - flag to tell us if this calculation is for the row header
         */
        calculateWidth : function (rowHeader) {
            //if this gets called then we assume that we want to calculate the width
          rowHeader = (rowHeader !== undefined && rowHeader !== null) ? rowHeader : false;
          var maxWidth,
              maxCellWidth,
              store = this.grid.getStore(),
              t,
              s,
              oldPos,
              text,
              klass;
          store.first();
          if ((this.options.renderMode == 'fixed' ||
               this.options.renderMode == 'expand') &&
              store.valid()) {
            t = new Element('span', {
              'class': 'jxGridCellContent',
              html: 'a',
              styles: {
                width: this.options.width
              }
            });
            s = this.measure(t,'jxGridCell');
            maxWidth = s.content.width;
            maxCellWidth = s.cell.width;
          } else {
              //calculate the width
              oldPos = store.getPosition();
              maxWidth = maxCellWidth = 0;
              while (store.valid()) {
                  //check size by placing text into a TD and measuring it.
                  this.options.renderer.render();
                  text = document.id(this.options.renderer);
                  klass = 'jxGridCell';
                  if (this.grid.rowModel.useHeaders() &&
                          this.options.name === this.grid.rowModel.getRowHeaderColumn()) {
                      klass = 'jxGridRowHead';
                  }
                  s = this.measure(text, klass, rowHeader, store.getPosition());
                  if (s.content.width > maxWidth) {
                      maxWidth = s.content.width;
                  }
                  if (s.cell.width > maxCellWidth) {
                    maxCellWidth = s.cell.width;
                  }
                  if (store.hasNext()) {
                      store.next();
                  } else {
                      break;
                  }
              }
    
              //check the column header as well (unless this is the row header)
              if (!(this.grid.rowModel.useHeaders() &&
                  this.options.name === this.grid.rowModel.getRowHeaderColumn())) {
                  klass = 'jxGridColHead';
                  if (this.isEditable()) {
                      klass += ' jxColEditable';
                  }
                  if (this.isResizable()) {
                      klass += ' jxColResizable';
                  }
                  if (this.isSortable()) {
                      klass += ' jxColSortable';
                  }
                  s = this.measure(this.domObj.clone(), klass);
                  if (s.content.width > maxWidth) {
                      maxWidth = s.content.width;
                  }
                  if (s.cell.width > maxCellWidth) {
                      maxCellWidth = s.cell.width;
                  }
              }
          }
    
          this.width = maxWidth;
          this.cellWidth = maxCellWidth;
          store.moveTo(oldPos);
          return this.width;
        },
        /**
         * Method: measure
         * This method does the dirty work of actually measuring a cell
         *
         * Parameters:
         * text - the text to measure
         * klass - a string indicating and extra classes to add so that
         *          css classes can be taken into account.
         * rowHeader -
         * row -
         */
        measure : function (text, klass, rowHeader, row) {
            var d = new Element('span', {
                'class' : klass
            }),
            s;
            text.inject(d);
            //d.setStyle('height', this.grid.row.getHeight(row));
            d.setStyles({
                'visibility' : 'hidden',
                'width' : 'auto'
            });
    
            d.inject(document.body, 'bottom');
            s = d.measure(function () {
                var el = this;
                //if not rowHeader, get size of innner span
                if (!rowHeader) {
                    el = el.getFirst();
                }
                return {
                    content: el.getMarginBoxSize(),
                    cell: el.getMarginBoxSize()
                };
            });
            d.destroy();
            return s;
        },
        /**
         * APIMethod: isEditable
         * Returns whether this column can be edited
         */
        isEditable : function () {
            return this.options.isEditable;
        },
        /**
         * APIMethod: isSortable
         * Returns whether this column can be sorted
         */
        isSortable : function () {
            return this.options.isSortable;
        },
        /**
         * APIMethod: isResizable
         * Returns whether this column can be resized
         */
        isResizable : function () {
            return this.options.isResizable;
        },
        /**
         * APIMethod: isHidden
         * Returns whether this column is hidden
         */
        isHidden : function () {
            return this.options.isHidden;
        },
        /**
         * APIMethod: isAttached
         * returns whether this column is attached to a store.
         */
        isAttached: function () {
            return this.options.renderer.attached;
        },
    
        /**
         * APIMethod: getHTML
         * calls render method of the renderer object passed in.
         */
        getHTML : function () {
            this.options.renderer.render();
            return document.id(this.options.renderer);
        }
    
    });
    
    if (base.global) {
        base.global.Grid.Column = module.exports;
    }
});

/*
---

name: Jx.Grid.ColumnModel

description: A container for defining and holding individual columns

license: MIT-style license.

requires:
 - Jx.Grid.Column
 - Jx.Grid

provides: [Jx.Grid.ColumnModel]

...
 */
// $Id$
/**
 * Class: Jx.Grid.ColumnModel
 *
 * Extends: <Jx.Object>
 *
 * This class is the container for all columns needed for a grid. It
 * consolidates many functions that didn't make sense to put directly
 * in the column class. Think of it as a model for columns.
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/grid/columnmodel", function(require, exports, module) {
    
    var base = require("../../base"),
        jxObject = require("../object"),
        Grid = require("../grid");
        Column = require("./column"),
        Styles = require("../styles");
        
    var columnModel = module.exports = new Class({

        Extends : jxObject,
        Family: 'Jx.Grid.ColumnModel',
    
        options : {
            /**
             * Option: headerRowHeight
             * the default height of the header row. Set to null or 'auto' to
             * have this class attempt to figure out a suitable height.
             */
            headerRowHeight : 20,
            /**
             * Option: useHeaders
             * Determines if the column headers should be displayed or not
             */
            useHeaders : false,
            /**
             * Option: columns
             * an array holding all of the column instances or objects containing
             * configuration info for the column
             */
            columns : []
        },
        /**
         * Property: columns
         * an array holding the actual instantiated column objects
         */
        columns : [],
        
        /**
         * Property: rowTemplate
         * a string holding a template for a single row of cells to be populated
         * when rendering the store into a grid.  The template is constructed from
         * the individual column templates once the store has been loaded.
         */
        rowTemplate: null,
    
        parameters: ['options','grid'],
        /**
         * Property: hasExpandable
         * boolean indicates whether any of the columns are expandable or not,
         * which affects some calculations for column widths
         */
        hasExpandable: null,
    
        /**
         * APIMethod: init
         * Creates the class.
         */
        init : function () {
            this.parent();
    
            if (this.options.grid !== undefined &&
                this.options.grid !== null &&
                instanceOf(this.options.grid, Grid)) {
              this.grid = this.options.grid;
            }
    
            this.hasExpandable = false;
    
            this.options.columns.each(function (col) {
                //check the column to see if it's a Jx.Grid.Column or an object
                if (instanceOf(col, Column)) {
                    this.columns.push(col);
                } else if (typeOf(col) === "object") {
                    this.columns.push(new Column(col,this.grid));
                }
                var c = this.columns[this.columns.length - 1 ];
            }, this);
            
            this.buildTemplates();
        },
        
        /**
         * APIMethod: addColumns
         * add new columns to the columns object after construction.  Causes
         * the template to change.
         * 
         * Parameters:
         * columns - {Array} an array of columns to add
         */
        addColumns: function(columns) {
          Object.append(this.columns, columns);
          this.buildTemplates();
        },
        
        /**
         * Method: buildTemplates
         * create the row template based on the current columns
         */
        buildTemplates: function() {
          if (!this.grid) {
            return;
          }
          var rowTemplate = '',
              hasExpandable = false,
              grid = this.grid,
              row = grid.rowModel,
              rhc = grid.rowModel.useHeaders() ? this.getByName(row.options.headerColumn) : null,
              colTemplate;
          
          this.columns.each(function(col, idx) {
            var colTemplate = '';
            if (!col.isHidden() && col != rhc) {
              hasExpandable |= col.options.renderMode == 'expand';
              if (!col.options.renderer || !col.options.renderer.domInsert) {
                colTemplate = col.getTemplate(idx);
              }
              rowTemplate += "<td class='jxGridCell jxGridCol"+idx+" jxGridCol"+col.options.name+"'>" + colTemplate + "</td>";
            }
          });
          if (!hasExpandable) {
            rowTemplate += "<td><span class='jxGridCellUnattached'></span></td>";
          }
          this.rowTemplate = rowTemplate;
          this.hasExpandable = hasExpandable;
        },
        /**
         * APIMethod: getHeaderHeight
         * returns the height of the column header row
         *
         * Parameters:
         * recalculate - determines if we should recalculate the height. Currently
         * does nothing.
         */
        getHeaderHeight : function (recalculate) {
            if (this.height === undefined || this.height === null || recalculate) {
                if (this.options.headerRowHeight !== undefined &&
                        this.options.headerRowHeight !== null &&
                        this.options.headerRowHeight !== 'auto') {
                    this.height = this.options.headerRowHeight;
                } //else {
                    //figure out a height.
                //}
            }
            return this.height;
        },
        /**
         * APIMethod: useHeaders
         * returns whether the grid is/should display headers or not
         */
        useHeaders : function () {
            return this.options.useHeaders;
        },
        /**
         * APIMethod: getByName
         * Used to get a column object by the name of the column
         *
         * Parameters:
         * colName - the name of the column
         */
        getByName : function (colName) {
            var ret;
            this.columns.each(function (col) {
                if (col.name === colName) {
                    ret = col;
                }
            }, this);
            return ret;
        },
        /**
         * APIMethod: getByField
         * Used to get a column by the model field it represents
         *
         *  Parameters:
         *  field - the field name to search by
         */
        getByField : function (field) {
            var ret;
            this.columns.each(function (col) {
                if (col.options.modelField === field) {
                    ret = col;
                }
            }, this);
            return ret;
        },
        /**
         * APIMethod: getByGridIndex
         * Used to get a column when all you know is the cell index in the grid
         *
         * Parameters:
         * index - an integer denoting the placement of the column in the grid
         * (zero-based)
         */
        getByGridIndex : function (index) {
            var headers = this.options.useHeaders ? 
                            this.grid.colTableBody.getFirst().getChildren() :
                            this.grid.gridTableBody.getFirst().getChildren();
            var cell = headers[index];
              var hClasses = cell.get('class').split(' ').filter(function (cls) {
                if(this.options.useHeaders)
                  return cls.test('jxColHead-');
                else
                  return cls.test('jxCol-');
              }.bind(this));
            var parts = hClasses[0].split('-');
            return this.getByName(parts[1]);
        },
    
        /**
         * APIMethod: getHeaders
         * Returns a row with the headers in it.
         *
         * Parameters:
         * row - the row to add the headers to.
         */
        getHeaders : function (tr) {
          var grid = this.grid,
              row = grid.rowModel,
              rhc = grid.rowModel.useHeaders() ? this.getByName(row.options.headerColumn) : null;
          if (this.useHeaders()) {
            this.columns.each(function(col, idx) {
              if (!col.isHidden() && col != rhc) {
                var classes = ['jxGridColHead', 'jxGridCol'+idx, 'jxCol-'+col.options.name, 'jxColHead-'+col.options.name],
                    th;
                if (col.isEditable()) { classes.push('jxColEditable'); }
                if (col.isResizable()) { classes.push('jxColResizable'); }
                if (col.isSortable()) { classes.push('jxColSortable'); }
                th = new Element('th', {
                  'class': classes.join(' ')
                });
                th.store('jxCellData', {
                  column: col,
                  colHeader: true,
                  index: idx
                });
                th.adopt(col.getHeaderHTML());
                th.inject(tr);
              }
            });
            if (!this.hasExpandable) {
              new Element('th', {
                'class': 'jxGridColHead jxGridCellUnattached'
              }).inject(tr);
            }
          }
        },
        
        /**
         * Method: getRow
         * create a single row in the grid for a single record and populate
         * the DOM elements for it.
         *
         * Parameters:
         * tr - {DOMElement} the TR element to insert the row into
         * record - {<Jx.Record>} the record to create the row for
         */
        getRow: function(tr, record) {
          var data = {},
              grid = this.grid,
              store = grid.store,
              row = grid.rowModel,
              rhc = grid.rowModel.useHeaders() ? 
                         this.getByName(row.options.headerColumn) : null,
              domInserts = [],
              i = 0;
          this.columns.each(function(column, index) {
            if (!column.isHidden() && column != rhc) {
              if (column.options.renderer && column.options.renderer.domInsert) {
                domInserts.push({column: column, index: i});
              } else {
                var renderer = column.options.renderer,
                    formatter = renderer.options.formatter,
                    text = '';
                if (renderer.options.textTemplate) {
                  text = store.fillTemplate(null, renderer.options.textTemplate, renderer.columnsNeeded);
                } else {
                  text = record.data.get(column.name);
                }
                if (formatter) {
                  text = formatter.format(text);
                }
                data['col'+index] = text;
              }
              i++;
            }
          });
          tr.set('html', this.rowTemplate.substitute(data));
          domInserts.each(function(obj) {
            document.id(tr.childNodes[obj.index]).adopt(obj.column.getHTML());
          });
        },
    
        /**
         * APIMethod: calculateWidths
         * force calculation of column widths.  For columns with 'fit' this will
         * cause the column to test every value in the store to compute the
         * optimal width of the column.  Columns marked as 'expand' will get
         * any extra space left over between the column widths and the width
         * of the grid container (if any).
         */
        calculateWidths: function () {
          //to calculate widths we loop through each column
          var expand = null,
              totalWidth = 0,
              rowHeaderWidth = 0,
              gridSize = this.grid.contentContainer.getContentBoxSize(),
              leftOverSpace = 0;
          this.columns.each(function(col,idx){
            //are we checking the rowheader?
            var rowHeader = false;
            // if (col.name == this.grid.rowModel.options.headerColumn) {
            //   rowHeader = true;
            // }
            //if it's fixed, set the width to the passed in width
            if (col.options.renderMode == 'fixed') {
              col.calculateWidth(); //col.setWidth(col.options.width);
              
            } else if (col.options.renderMode == 'fit') {
              col.calculateWidth(rowHeader);
            } else if (col.options.renderMode == 'expand' && (expand === undefined || expand === null)) {
              expand = col;
            } else {
              //treat it as fixed if has width, otherwise as fit
              if (col.options.width !== undefined && col.options.width !== null) {
                col.setWidth(col.options.width);
              } else {
                col.calculateWidth(rowHeader);
              }
            }
            if (!col.isHidden() /* && !(col.name == this.grid.rowModel.options.headerColumn) */) {
                totalWidth += base.getNumber(col.getCellWidth());
                if (rowHeader) {
                    rowHeaderWidth = col.getWidth();
                }
            }
          },this);
          
          // width of the container
          if (gridSize.width > totalWidth) {
            //now figure the expand column
            if (expand !== undefined && expand !== null) {
              // var leftOverSpace = gridSize.width - totalWidth + rowHeaderWidth;
              leftOverSpace = gridSize.width - totalWidth;
              //account for right borders in firefox...
              if (Browser.firefox) {
                leftOverSpace -= this.getColumnCount(true);
              } else {
                // -2 is for the right hand border on the cell and the table for all other browsers
                leftOverSpace -= 2;
              }
              if (leftOverSpace >= expand.options.width) {
                //in order for this to be set properly the cellWidth must be the
                //leftover space. we need to figure out the delta value and
                //subtract it from the leftover width
                expand.options.width = leftOverSpace;
                expand.calculateWidth();
                expand.setWidth(leftOverSpace, true);
                totalWidth += leftOverSpace;
              } else {
                expand.setWidth(expand.options.width);
              }
            }
          }
          this.grid.gridObj.setContentBoxSize({'width': totalWidth});
          this.grid.colObj.setContentBoxSize({'width': totalWidth});
        },
    
        /**
         * Method: createRules
         * create CSS rules for the current grid object
         */
        createRules: function(styleSheet, scope) {
          var autoRowHeight = this.grid.rowModel.options.rowHeight == 'auto';
          this.columns.each(function(col, idx) {
            var selector = scope+' .jxGridCol'+idx,
                dec = '';
            if (autoRowHeight) {
              //set the white-space to 'normal !important'
              dec = 'white-space: normal !important';
            }
            col.cellRule = Styles.insertCssRule(selector, dec, styleSheet);
            col.cellRule.style.width = col.getCellWidth() + "px";
    
            selector = scope+" .jxGridCol" + idx + " .jxGridCellContent";
            col.rule = Styles.insertCssRule(selector, dec, styleSheet);
            col.rule.style.width = col.getWidth() + "px";
          }, this);
        },
    
        updateRule: function(column) {
            var col = this.getByName(column);
            if (col.options.renderMode === 'fit') {
              col.calculateWidth();
            }
            col.rule.style.width = col.getWidth() + "px";
            col.cellRule.style.width = col.getCellWidth() + "px";
        },
        
        /**
         * APIMethod: getColumnCount
         * returns the number of columns in this model (including hidden).
         */
        getColumnCount : function (noHidden) {
            noHidden = (noHidden !== undefined && noHidden !== null) ? noHidden : false;
            var total = this.columns.length;
            if (noHidden) {
                this.columns.each(function(col){
                    if (col.isHidden()) {
                        total -= 1;
                    }
                },this);
            }
            return total;
        },
        /**
         * APIMethod: getIndexFromGrid
         * Gets the index of a column from its place in the grid.
         *
         * Parameters:
         * name - the name of the column to get an index for
         */
        getIndexFromGrid : function (name) {
            var headers = this.options.useHeaders ? 
                            this.grid.colTableBody.getFirst().getChildren() :
                            this.grid.gridTableBody.getFirst().getChildren(),
                c,
                i = -1,
                self = this;
            headers.each(function (h) {
                i++;
                var hClasses = h.get('class').split(' ').filter(function (cls) {
                    if(self.options.useHeaders)
                      return cls.test('jxColHead-');
                    else
                      return cls.test('jxCol-');
                });
                hClasses.each(function (cls) {
                    if (cls.test(name)) {
                        c = i;
                    }
                });
            }, this);
            return c;
        }
    
    });

    if (base.global) {
        base.global.Grid.ColumnModel = module.exports;
    }
    
});

/*
---

name: Jx.Grid.RowModel

description: Holds information related to display of rows in the grid.

license: MIT-style license.

requires:
 - Jx.Grid

provides: [Jx.Grid.RowModel]

...
 */
// $Id$
/**
 * Class: Jx.Grid.RowModel
 *
 * Extends: <Jx.Object>
 *
 * A class defining a grid row.
 *
 * Inspired by code in the original Jx.Grid class
 *
 * License:
 * Original Copyright (c) 2008, DM Solutions Group Inc.
 * This version Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/grid/rowmodel", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object"),
        Grid = require("../grid");
        
        
    var rowModel = module.exports = new Class({

        Extends : jxObject,
        Family: 'Jx.RowModel',
    
        options : {
            /**
             * Option: useHeaders
             * defaults to false.  If set to true, then a column of row header
             * cells are displayed.
             */
            useHeaders : false,
            /**
             * Option: alternateRowColors
             * defaults to false.  If set to true, then alternating CSS classes
             * are used for rows.
             */
            alternateRowColors : false,
            /**
             * Option: rowClasses
             * object containing class names to apply to rows
             */
            rowClasses : {
                odd : 'jxGridRowOdd',
                even : 'jxGridRowEven',
                all : 'jxGridRowAll'
            },
            /**
             * Option: rowHeight
             * The height of the row. Make it null or 'auto' to auto-calculate.
             */
            rowHeight : 20,
            /**
             * Option: headerWidth
             * The width of the row header. Make it null or 'auto' to auto-calculate
             */
            headerWidth : 40,
            /**
             * Option: headerColumn
             * The name of the column in the model to use as the header
             */
            headerColumn : null
        },
        /**
         * Property: grid
         * A reference to the grid that this row model belongs to
         */
        grid : null,
        /**
         * Property: heights
         * This will hold the calculated height of each row in the grid.
         */
        heights: [],
        /**
         * Property: rules
         * A hash that will hold all of the CSS rules for the rows.
         */
        rules: {},
    
        parameters: ['options','grid'],
    
        /**
         * APIMethod: init
         * Creates the row model object.
         */
        init : function () {
            this.parent();
    
            if (this.options.grid !== undefined && this.options.grid !== null && instanceOf(this.options.grid, Grid)) {
                this.grid = this.options.grid;
            }
        },
        /**
         * APIMethod: getGridRowElement
         * Used to create the TR for the main grid row
         */
        getGridRowElement : function (row, text) {
            var o = this.options,
                rc = o.rowClasses,
                c = o.alternateRowColors ?(row % 2 ? rc.even : rc.odd) : rc.all,
                tr = new Element('tr', {
                  'class' : 'jxGridRow'+row+' '+ c,
                  html: text || ''
                });
            return tr;
        },
        /**
         * Method: getRowHeaderCell
         * creates the TH for the row's header
         */
        getRowHeaderCell : function (text) {
          text = text ? '<span class="jxGridCellContent">'+text + '</span>' : '';
          return new Element('th', {
            'class' : 'jxGridRowHead',
            html: text
          });
        },
        /**
         * APIMethod: getRowHeaderWidth
         * determines the row header's width.
         */
        getRowHeaderWidth : function () {
          var col, width;
          if (this.options.headerColumn) {
            col = this.grid.columnModel.getByName(this.options.headerColumn);
            width = col.getWidth();
            if (width === undefined && width === null) {
              col.calculateWidth(true);
              width = col.getWidth();
            }
          } else {
            width = this.options.headerWidth;
          }
          return width;
        },
    
        /**
         * APIMethod: getHeight
         * determines and returns the height of a row
         */
        getHeight : function (row) {
          var h = this.options.rowHeight,
              rowEl;
          //this should eventually compute a height, however, we would need
          //a fixed width to do so reliably. For right now, we use a fixed height
          //for all rows.
          if (this.heights[row] !== undefined && this.heights[row] !== null) {
            h = this.heights[row];
          } else if (this.options.rowHeight !== undefined && this.options.rowHeight !== null) {
            if (this.options.rowHeight == 'auto') {
              // this.calculateHeight(row);
              h = 20; // TODO calculate?
              rowEl = this.grid.gridTableBody.rows[row];
              if (rowEl) {
                h = rowEl.getContentBoxSize().height; 
              }
            } else if (typeOf(this.options.rowHeight) !== 'number') {
              h = 20; // TODO calculate?
            }
          }
          return h;
        },
        /**
         * Method: calculateHeights
         */
        calculateHeights : function () {
          if (this.options.rowHeight === 'auto' ||
              this.options.rowHeight === undefined ||
              this.options.rowHeight === null) {
            //grab all rows in the grid body
            document.id(this.grid.gridTableBody).getChildren().each(function(row){
              row = document.id(row);
              var data = row.retrieve('jxRowData');
              var s = row.getContentBoxSize();
              this.heights[data.row] = s.height;
            },this);
            document.id(this.grid.rowTableHead).getChildren().each(function(row){
              row = document.id(row);
              var data = row.retrieve('jxRowData');
              if (data) {
                var s = row.getContentBoxSize();
                this.heights[data.row] = Math.max(this.heights[data.row],s.height);
                if (Browser.safari || Browser.chrome) {
                    //for some reason webkit (Safari and Chrome)
                    this.heights[data.row] -= 1;
                }
              }
            },this);
          } else {
            document.id(this.grid.rowTableHead).getChildren().each(function(row,idx){
              this.heights[idx] = this.options.rowHeight;
            }, this);
          }
        },
    
        /**
         * APIMethod: useHeaders
         * determines and returns whether row headers should be used
         */
        useHeaders : function () {
            return this.options.useHeaders;
        },
        /**
         * APIMethod: getRowHeader
         * creates and returns the header for the current row
         *
         * Parameters:
         * list - Jx.List instance to add the header to
         */
        getRowHeader : function (list) {
            var th = this.getRowHeaderCell();
            //if (this.grid.store.getPosition() === 0) {
            //    var rowWidth = this.getRowHeaderWidth();
            //    th.setStyle("width", rowWidth);
            //}
            th.store('jxCellData', {
                rowHeader: true,
                row: this.grid.store.getPosition()
            });
            list.add(th);
        },
        /**
         * APIMethod: getRowHeaderColumn
         * returns the name of the column that is used for the row header
         */
        getRowHeaderColumn : function () {
            return this.options.headerColumn;
        }
    });

    if (base.global) {
        base.global.Grid.RowModel = module.exports;
    }
});

/*
---

name: Jx.Field.Textarea

description: Represents a textarea input

license: MIT-style license.

requires:
 - Jx.Field

provides: [Jx.Field.Textarea]

...
 */
// $Id$
/**
 * Class: Jx.Field.Textarea
 *
 * Extends: <Jx.Field>
 *
 * This class represents a textarea field.
 *
 * These fields are rendered as below.
 *
 * (code)
 * <div id='' class=''>
 *    <label for=''>A label for the field</label>
 *    <textarea id='' name='' rows='' cols=''>
 *      value/ext
 *    </textarea>
 * </div>
 * (end)
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 *
 */
define("jx/field/textarea", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var textarea = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Textarea",
    
        options: {
            /**
             * Option: rows
             * the number of rows to show
             */
            rows: null,
            /**
             * Option: columns
             * the number of columns to show
             */
            columns: null,
            /**
             * Option: template
             * the template used to render this field
             */
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><textarea class="jxInputTextarea" name="{name}"></textarea><span class="jxInputTag"></span></span>'
        },
        /**
         * Property: type
         * The type of field this is.
         */
        type: 'Textarea',
        /**
         * Property: errorClass
         * The class applied to error elements
         */
        errorClass: 'jxFormErrorTextarea',
    
        /**
         * APIMethod: render
         * Creates the input.
        */
        render: function () {
            this.parent();
    
            if (this.options.rows !== undefined && this.options.rows !== null) {
                this.field.set('rows', this.options.rows);
            }
            if (this.options.columns !== undefined && this.options.columns !== null) {
                this.field.set('cols', this.options.columns);
            }
    
            //TODO: Do we need to use OverText here as well??
    
        }
    });
    
    if (base.global) {
        base.global.Field.Textarea = module.exports;
    }
    
});

/*
---

name: Jx.Field.Check

description: Represents a checkbox input

license: MIT-style license.

requires:
 - Jx.Field

provides: [Jx.Field.Checkbox]

...
 */
// $Id$
/**
 * Class: Jx.Field.Check
 *
 * Extends: <Jx.Field>
 *
 * This class represents a radio input field.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 *
 */
define("jx/field/checkbox", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var checkbox = module.exports = new Class({

        Extends : Field,
        Family: "Jx.Field.Checkbox",
    
        options : {
            /**
             * Option: template
             * The template used for rendering this field
             */
            template : '<span class="jxInputContainer"><input class="jxInputCheck" type="checkbox" name="{name}"/><label class="jxInputLabel"></label><span class="jxInputTag"></span></span>',
            /**
             * Option: checked
             * Whether this field is checked or not
             */
            checked : false,
    
            labelSeparator: ''
        },
        /**
         * Property: type
         * The type of this field
         */
        type : 'Check',
    
        /**
         * APIMethod: render
         * Creates a checkbox input field.
        */
        render : function () {
            this.parent();
    
            if (this.options.checked !== undefined && this.options.checked !== null && this.options.checked) {
                if (Browser.ie) {
                    var parent = this.field.getParent();
                    var sibling;
                    if (parent) {
                        sibling = this.field.getPrevious();
                    }
                    this.field.setStyle('visibility','hidden');
                    this.field.inject(document.id(document.body));
                    this.field.checked = true;
                    this.field.defaultChecked = true;
                    this.field.dispose();
                    this.field.setStyle('visibility','visible');
                    if (sibling) {
                        this.field.inject(sibling, 'after');
                    } else if (parent) {
                        this.field.inject(parent, 'top');
                    }
                } else {
                    this.field.set("checked", "checked");
                    this.field.set("defaultChecked", "checked");
                }
            }
    
            // add click event to the label to toggle the checkbox
            if(this.label) {
              this.label.addEvent('click', function(ev) {
                this.setValue(this.getValue() !== null ? false : true);
              }.bind(this));
            }
        },
    
        /**
         * APIMethod: setValue
         * Sets the value property of the field
         *
         * Parameters:
         * v - Whether the box shouldbe checked or not. "checked" or "true" if it should be checked.
         */
        setValue : function (v) {
            if (!this.options.readonly) {
                if (v === 'checked' || v === 'true' || v === true) {
                    this.field.set('checked', "checked");
                } else {
                    this.field.erase('checked');
                }
            }
        },
    
        /**
         * APIMethod: getValue
         * Returns the current value of the field. The field must be
         * "checked" in order to return a value. Otherwise it returns null.
         */
        getValue : function () {
            if (this.field.get("checked")) {
                return this.field.get("value");
            } else {
                return null;
            }
        },
    
        /**
         * APIMethod: reset
         * Sets the field back to the value passed in the original
         * options. no IE hack is implemented because the field should
         * already be in the DOM when this is called.
         */
        reset : function () {
            if (this.options.checked) {
                this.field.set('checked', "checked");
            } else {
                this.field.erase('checked');
            }
        },
    
        getChecked: function () {
            return this.field.get("checked");
        }
    
    });

    if (base.global) {
        base.global.Field.Checkbox = module.exports;
    }
    
});

/* 
--- 

name: Jx.Field.Display 

description: A Jx.Field.Display provides a way to only display a value in a form similar to Ext.form.DisplayField 

license: MIT-style license. 

requires:
 - Jx.Field

provides: [Jx.Field.Display] 

...
*/
/**
 * Class: Jx.Field.Display
 **/
define("jx/field/display", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var display = module.exports = new Class({
        Extends: Field,
        options: { 
            template: '<span class="jxInputContainer"><label class="jxInputLabel" ></label><span class="jxInputTag"></span></span>'
        },
        render: function(){
            this.parent();
            this.field = new Element('div',{
                html: this.options.value,
                id: this.id
            });
            this.field.inject(this.label,'after');

            this.field.store('field', this); 
        },

        setValue : function (v) { 
            if (!this.options.readonly) { 
                this.field.set('html', v); 
            } 
        }, 
        
        getValue : function () { 
            return this.field.get("html"); 
        }
    });

    if (base.global) {
        base.global.Field.Display = module.exports;
    }
    
});

/*
---

name: Jx.Field.Button

description: Represents a button input

license: MIT-style license.

requires:
 - Jx.Field
 - Jx.Button

provides: [Jx.Field.Button]

...
 */
/**
 * Class: Jx.Field.Button
 *
 * Extends: <Jx.Field>
 *
 * This class represents a button.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/button", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        Button = require("../button");
        
    var button = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Button",
    
        options: {
            /**
             * Option: buttonClass
             * choose the actual Jx.Button subclass to create for this form
             * field.  The default is to create a basic Jx.Button.  To create
             * a different kind of button, pass the class to this option, for
             * instance:
             * (code)
             * buttonClass: Jx.Button.Color
             * (end)
             */
            buttonClass: Button,
            
            /**
             * Option: buttonOptions
             */
            buttonOptions: {},
            /**
             * Option: template
             * The template used to render this field
             */
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><div class="jxInputButton"></div><span class="jxInputTag"></span></span>'
        },
        
        button: null,
        
        /**
         * Property: type
         * The type of this field
         */
        type: 'Button',
    
        processTemplate: function(template, classes, container) {
            var h = this.parent(template, classes, container);
            this.button = new this.options.buttonClass(this.options.buttonOptions);
            this.button.addEvent('click', function(){
              this.fireEvent('click');
            }.bind(this));
            var c = h.jxInputButton;
            if (c) {
                this.button.domObj.replaces(c);
            }
            this.button.setEnabled(!this.options.disabled);
            return h;
        },
        
        click: function() {
            this.button.clicked();
        },
        
        enable: function() {
          this.parent();
          this.button.setEnabled(true);
        },
        
        disable: function() {
          this.parent();
          this.button.setEnabled(false);
        }
    });
    
    if (base.global) {
        base.global.Field.Button = module.exports;
    }
    
});

/*
---

name: Jx.ButtonSet

description: A ButtonSet manages a set of Jx.Button instances by ensuring that only one of the buttons is active.

license: MIT-style license.

requires:
 - Jx.Object

provides: [Jx.ButtonSet]


...
 */
// $Id$
/**
 * Class: Jx.ButtonSet
 *
 * Extends: <Jx.Object>
 *
 * A ButtonSet manages a set of <Jx.Button> instances by ensuring that only
 * one of the buttons is active.  All the buttons need to have been created
 * with the toggle option set to true for this to work.
 *
 * Example:
 * (code)
 * var toolbar = new Jx.Toolbar('bar');
 * var buttonSet = new Jx.ButtonSet();
 *
 * var b1 = new Jx.Button({label: 'b1', toggle:true, contentID: 'content1'});
 * var b2 = new Jx.Button({label: 'b2', toggle:true, contentID: 'content2'});
 * var b3 = new Jx.Button({label: 'b3', toggle:true, contentID: 'content3'});
 * var b4 = new Jx.Button({label: 'b4', toggle:true, contentID: 'content4'});
 *
 * buttonSet.add(b1,b2,b3,b4);
 * (end)
 *
 * Events:
 * change - the current button has changed
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/button/set', function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object"),
        Button = require("../button");
        
    var set = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.ButtonSet',
        Binds: ['buttonChanged'],
        /**
         * Property: buttons
         * {Array} array of buttons that are managed by this button set
         */
        buttons: [],
        
        cleanup: function() {
          this.buttons.each(function(b){
            b.removeEvent('down', this.buttonChanged);
            b.setActive = null;
          },this);
          this.activeButton = null;
          this.buttons = null;
          this.parent();
        },
    
        /**
         * APIMethod: add
         * Add one or more <Jx.Button>s to the ButtonSet.
         *
         * Parameters:
         * button - {<Jx.Button>} an instance of <Jx.Button> to add to the button
         * set.  More than one button can be added by passing extra parameters to
         * this method.
         */
        add : function() {
            Array.from(arguments).each(function(button) {
                if (button.domObj.hasClass(button.options.toggleClass)) {
                    button.domObj.removeClass(button.options.toggleClass);
                    button.domObj.addClass(button.options.toggleClass+'Set');
                }
                button.addEvent('down',this.buttonChanged);
                button.setActive = function(active) {
                    if (button.options.active && this.activeButton == button) {
                        return;
                    } else {
                        Button.prototype.setActive.apply(button, [active]);
                    }
                }.bind(this);
                if (!this.activeButton || button.options.active) {
                    button.options.active = false;
                    button.setActive(true);
                }
                this.buttons.push(button);
            }, this);
            return this;
        },
        /**
         * APIMethod: remove
         * Remove a button from this Button.
         *
         * Parameters:
         * button - {<Jx.Button>} the button to remove.
         */
        remove : function(button) {
            this.buttons.erase(button);
            if (this.activeButton == button) {
                if (this.buttons.length) {
                    this.buttons[0].setActive(true);
                }
                button.removeEvent('down',this.buttonChanged);
                button.setActive = Button.prototype.setActive;
            }
        },
        /**
         * APIMethod: empty
         * empty the button set and clear the active button
         */
        empty: function() {
          this.buttons = [];
          this.activeButton = null;
        },
        /**
         * APIMethod: setActiveButton
         * Set the active button to the one passed to this method
         *
         * Parameters:
         * button - {<Jx.Button>} the button to make active.
         */
        setActiveButton: function(button) {
            var b = this.activeButton;
            this.activeButton = button;
            if (b && b != button) {
                b.setActive(false);
            }
        },
        /**
         * Method: buttonChanged
         * Handle selection changing on the buttons themselves and activate the
         * appropriate button in response.
         *
         * Parameters:
         * button - {<Jx.Button>} the button to make active.
         */
        buttonChanged: function(button) {
            this.setActiveButton(button);
            this.fireEvent('change', this);
        }
    });
    
    if (base.global) {
        base.global.ButtonSet = set;
    }

});

/*
---

name: Jx.Field.Combo

description: Represents an editable combo

license: MIT-style license.

requires:
 - Jx.Field
 - Jx.Button
 - Jx.Menu
 - Jx.Menu.Item
 - Jx.ButtonSet

provides: [Jx.Field.Combo]

...
 */
// $Id$
/**
 * Class: Jx.Field.Combo
 *
 * Extends: <Jx.Field>
 *
 *
 * Example:
 * (code)
 * (end)
 *
 * Events:
 * change - 
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/combo", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field")
        Button = require("../button"),
        ButtonSet = require("../button/set"),
        Menu = require("../menu");
        
    var combo = module.exports = new Class({
        Extends: Field,
        Family: 'Jx.Field.Combo',
        pluginNamespace: 'Combo',
    
        options: {
            buttonTemplate: '<a class="jxButtonContainer jxButton" href="javascript:void(0);"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>',
            /* Option: template
             */
             template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputWrapper"><input type="text" class="jxInputCombo"  name="{name}"><img class="jxInputIcon" src="'+base.aPixel.src+'"><span class="jxInputRevealer"></span></span><span class="jxInputTag"></span></span>'
         },
         
         type: 'Combo',
         
        /**
         * APIMethod: render
         * create a new instance of Jx.Field.Combo
         */
        render: function() {
            this.classes = Object.merge(this.classes,{
              wrapper: 'jxInputWrapper',
              revealer: 'jxInputRevealer',
              icon: 'jxInputIcon'
            });
            this.parent();
            
            var button = new Button({
              template: this.options.buttonTemplate,
              imageClass: 'jxInputRevealerIcon'
            }).addTo(this.revealer);
    
            this.menu = new Menu();
            this.menu.button = button;
    
            this.buttonSet = new ButtonSet({
                onChange: (function(set) {
                    var button = set.activeButton;
                    var l = button.options.label;
                    if (l == '&nbsp;') {
                        l = '';
                    }
                    this.setLabel(l);
                    var img = button.options.image;
                    if (img.indexOf('a_pixel') != -1) {
                        img = '';
                    }
                    this.setImage(img, button.options.imageClass);
    
                    this.fireEvent('change', this);
                }).bind(this)
            });
            if (this.options.items) {
                this.add(this.options.items);
            }
            var that = this;
            button.addEvent('click', function(e) {
                if (this.list.count() === 0) {
                    return;
                }
                if (!button.options.enabled) {
                    return;
                }
                this.contentContainer.setStyle('visibility','hidden');
                this.contentContainer.setStyle('display','block');
                document.id(document.body).adopt(this.contentContainer);
                /* we have to size the container for IE to render the chrome correctly
                 * but just in the menu/sub menu case - there is some horrible peekaboo
                 * bug in IE related to ULs that we just couldn't figure out
                 */
                this.contentContainer.setContentBoxSize(this.subDomObj.getMarginBoxSize());
    
                this.showChrome(this.contentContainer);
    
                this.position(this.contentContainer, that.field, {
                    horizontal: ['left left', 'right right'],
                    vertical: ['bottom top', 'top bottom'],
                    offsets: this.chromeOffsets
                });
    
                this.contentContainer.setStyle('visibility','');
    
                document.addEvent('mousedown', this.bound.hide);
                document.addEvent('keyup', this.bound.keypress);
    
                this.fireEvent('show', this);
            }.bind(this.menu));
    
            this.menu.addEvents({
                'show': (function() {
                    //this.setActive(true);
                }).bind(this),
                'hide': (function() {
                    //this.setActive(false);
                }).bind(this)
            });
        },
        
        setLabel: function(label) {
          if (this.field !== undefined && this.field !== null) {
            this.field.value = this.getText(label);
          }
        },
        
        setImage: function(url, imageClass) {
          if (this.icon !== undefined && this.icon !== null) {
            this.icon.setStyle('background-image', 'url('+url+')');
            this.icon.setStyle('background-repeat', 'no-repeat');
    
            if (this.options.imageClass) {
                this.icon.removeClass(this.options.imageClass);
            }
            if (imageClass) {
                this.options.imageClass = imageClass;
                this.icon.addClass(imageClass);
                this.icon.setStyle('background-position','');
            } else {
                this.options.imageClass = null;
                this.icon.setStyle('background-position','center center');
            }
          }
          if (!url) {
            this.wrapper.addClass('jxInputIconHidden');
          } else {
            this.wrapper.removeClass('jxInputIconHidden');
          }
        },
    
        /**
         * Method: valueChanged
         * invoked when the current value is changed
         */
        valueChanged: function() {
            this.fireEvent('change', this);
        },
    
        setValue: function(value) {
            this.field.set('value', value);
            this.buttonSet.buttons.each(function(button){
              button.setActive(button.options.label === value);
            },this);
        },
    
        /**
         * Method: onKeyPress
         * Handle the user pressing a key by looking for an ENTER key to set the
         * value.
         *
         * Parameters:
         * e - {Event} the keypress event
         */
        onKeyPress: function(e) {
            if (e.key == 'enter') {
                this.valueChanged();
            }
        },
    
        /**
         * Method: add
         * add a new item to the pick list
         *
         * Parameters:
         * options - {Object} object with properties suitable to be passed to
         * a <Jx.Menu.Item.Options> object.  More than one options object can be
         * passed, comma separated or in an array.
         */
        add: function() {
            Array.from(arguments).flatten().each(function(opt) {
                var button = new Jx.Menu.Item(Object.merge({},opt,{
                    toggle: true
                }));
                this.menu.add(button);
                this.buttonSet.add(button);
                if (opt.selected) {
                  this.buttonSet.setActiveButton(button);
                }
            }, this);
        },
    
        /**
         * Method: remove
         * Remove the item at the given index.  Not implemented.
         *
         * Parameters:
         * idx - {Mixed} the item to remove by reference or by index.
         */
        remove: function(idx) {
          var item,
            t = typeOf(idx);
          if (t == 'number' && idx < this.buttonSet.buttons.length) {
            item = this.buttonSet.buttons[idx];
          } else if (t == 'string'){
            this.buttonSet.buttons.some(function(button){
                if (button.options.label === idx) {
                    item = button;
                    return true;
                }
                return false;
            },this);
          }
          if (item) {
            this.buttonSet.remove(item);
            this.menu.remove(item);
          }
        },
        /**
         * APIMethod: empty
         * remove all values from the combo
         */
        empty: function() {
          this.menu.empty();
          this.buttonSet.empty();
          this.setLabel('');
          this.setImage(base.aPixel.src);
        },
        
        enable: function() {
          this.parent();
          this.menu.setEnabled(true);
        },
        
        disable: function() {
          this.parent();
          this.menu.setEnabled(false);
        }
        
    });
    
    if (base.global) {
        base.global.Field.Combo = module.exports;
    }
    
});

/*
---

name: Jx.Field.Radio

description: Represents a radio button input

license: MIT-style license.

requires:
 - Jx.Field

provides: [Jx.Field.Radio]

...
 */
// $Id$
/**
 * Class: Jx.Field.Radio
 *
 * Extends: <Jx.Field>
 *
 * This class represents a radio input field.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/radio", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var radio = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Radio",
    
        options: {
            /**
             * Option: template
             * The template used to create this field
             */
            template: '<span class="jxInputContainer"><input class="jxInputRadio" type="radio" name="{name}"/><label class="jxInputLabel"></label><span class="jxInputTag"></span></span>',
            /**
             * Option: checked
             * whether this radio button is checked or not
             */
            checked: false,
    
            labelSeparator: ''
        },
        /**
         * Property: type
         * What kind of field this is
         */
        type: 'Radio',
    
        /**
         * APIMethod: render
         * Creates a radiobutton input field.
         */
        render: function () {
            this.parent();
    
            if (this.options.checked !== undefined && this.options.checked !== null &&
                 this.options.checked) {
                if (Browser.ie) {
                    var parent = this.field.getParent();
                    var sibling;
                    if (parent) {
                        sibling = this.field.getPrevious();
                    }
                    this.field.setStyle('visibility','hidden');
                    this.field.inject(document.id(document.body));
                    this.field.checked = true;
                    this.field.defaultChecked = true;
                    this.field.dispose();
                    this.field.setStyle('visibility','visible');
                    if (sibling) {
                        this.field.inject(sibling, 'after');
                    } else if (parent) {
                        this.field.inject(parent, 'top');
                    }
                } else {
                    this.field.set("checked", "checked");
                    this.field.set("defaultChecked", "checked");
                }
            }
    
            // add click event to toggle the radio buttons
            this.label.addEvent('click', function(ev) {
              this.field.checked ? this.setValue(false) : this.setValue(true);
            }.bind(this));
    
        },
    
        /**
         * APIMethod: setValue
         * Sets the value property of the field
         *
         * Parameters:
         * v - The value to set the field to, "checked" it should be checked.
         */
        setValue: function (v) {
            if (!this.options.readonly) {
                if (v === 'checked' || v === 'true' || v === true) {
                    this.field.set('checked', "checked");
                } else {
                    this.field.erase('checked');
                }
            }
        },
    
        /**
         * APIMethod: getValue
         * Returns the current value of the field. The field must be "checked"
         * in order to return a value. Otherwise it returns null.
         */
        getValue: function () {
            if (this.field.get("checked")) {
                return this.field.get("value");
            } else {
                return null;
            }
        },
    
        /**
         * Method: reset
         * Sets the field back to the value passed in the original
         * options
         */
        reset: function () {
            if (this.options.checked) {
                this.field.set('checked', "checked");
            } else {
                this.field.erase('checked');
            }
        }
    
    });

    if (base.global) {
        base.global.Field.Radio = module.exports;
    }
    
});

/*
---

name: Jx.Field.OptionGroup

description:

license: MIT-style license.

requires:
 - Jx.Field
 - Jx.Field.Checkbox
 - Jx.Field.Radio
 - Jx.Styles

provides: [Jx.Field.OptionGroup]

css:
 - optiongroup

...
 */
/** 
 * Class: Jx.Field.OptionGroup
 * This class creates an option group. It allows arranging checkboxes or
 * radiobuttons in columns.
 * 
 * License:
 * Copyright (c) 2011, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/optiongroup", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        Checkbox = require("./checkbox"),
        Radio = require("./radio"),
        Styles = require("../styles");
        
    var optionGroup = module.exports = new Class({

        Extends: Field,
        Family: 'Jx.Field.OptionGroup',
    
        pluginNamespace: 'OptionGroup',
    
        options: {
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputOptionGroup"></span><span class="jxInputTag"></span></span>',
            type: 'check',
            items: null,
            columns: 2,
            asArray: false,
            name: null
        },
    
        type: 'OptionGroup',
    
        styleSheet: 'jxFieldOptionGroup',
    
        columns: null,
    
        init: function () {
            this.columns = [];
    
            if (this.options.type === 'check') {
                this.fieldType = Checkbox;
            } else {
                this.fieldType = Radio;
            }
            this.uniqueId = this.generateId();
            this.parent();
        },
    
        render: function () {
            this.parent();
    
            this.domObj.set('id', this.uniqueId);
            for (var i = 1; i <= this.options.columns; i++) {
                this.columns.push(
                    new Element('div',{
                        'class': 'jxOptionGroupColumn column-'+i
                    }).inject(this.field)
                );
    
            }
    
            //create style for columns
    
            this.styleSheet += this.uniqueId;
            this.columnWidth = Math.floor(1 * 100 / this.options.columns);
            this.columnStyle = Styles.insertCssRule('#' + this.uniqueId + ' .jxOptionGroupColumn', '' ,this.styleSheet);
            this.columnStyle.style.width = this.columnWidth + '%';
    
            if (this.options.items !== undefined && this.options.items !== null) {
                this.add(this.options.items)
            }
        },
    
        add: function (items) {
            if (typeOf(items) === 'string') {
                items = Array.from(items);
            }
    
            var column = 0;
            Object.each(items, function(item){
                if (this.options.asArray) {
                    if (this.options.name !== undefined && this.options.name !== null) {
                        item.name = this.options.name + '[]';
                    } else {
                        if (!item.name.contains('[]')) {
                            item.name += '[]';
                        }
                    }
                }
                new this.fieldType(item).addTo(this.columns[column]);
                column += 1;
                if (column === this.options.columns) {
                    column = 0;
                } 
            },this);
            
        },
    
        empty: function () {
            Object.each(this.columns, function(col){
                col.empty();
            },this);
        }
    });
    
    if (base.global) {
        base.global.Field.OptionGroup = module.exports;
    }
    
});

/*
---

name: Jx.Field.Text

description: Represents a text input

license: MIT-style license.

requires:
 - Jx.Field

optional:
 - More/OverText

provides: [Jx.Field.Text]

...
 */
// $Id$
/**
 * Class: Jx.Field.Text
 *
 * Extends: <Jx.Field>
 *
 * This class represents a text input field.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/text", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var text = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Text",
    
        options: {
            /**
             * Option: overText
             * an object holding options for mootools-more's OverText class. Leave it null to
             * not enable it, make it an object to enable.
             */
            overText: null,
            /**
             * Option: template
             * The template used to render this field
             */
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><input class="jxInputText" type="text" name="{name}"/><span class="jxInputTag"></span></span>'
        },
        /**
         * Property: type
         * The type of this field
         */
        type: 'Text',
    
        /**
         * APIMethod: render
         * Creates a text input field.
         */
        render: function () {
            this.parent();
    
            this.field.addEvents({
                keydown: this.onKeyDown.bind(this),
                keyup: this.onKeyUp.bind(this)
            });
            //create the overText instance if needed
            if (this.options.overText !== undefined && this.options.overText !== null) {
                var opts = Object.append({}, this.options.overText);
                this.field.set('alt', this.options.tip);
                this.overText = new OverText(this.field, opts);
                this.overText.show();
            }
    
        },
        
        onKeyDown: function(e){
            this.fireEvent('keydown',[this,e]);
        },
        
        onKeyUp: function(e){
            this.fireEvent('keyup', [this,e]);   
        }
    
    });
    
    if (base.global) {
        base.global.Field.Text = module.exports;
    }
    
});

/*
---

name: Jx.Field.Spinner

description: Provide a Text Field with two buttons that fire events

license: MIT-style license.

requires:
 - Jx.Field.Text

css:
 - spinner
 

provides: [Jx.Field.Spinner]

...
 */
// $Id$
/**
 * Class: Jx.Field.Spinner
 *
 * A Jx.Widget that provides a Text Field with two buttons that fires events
 *
 * Example:
 * (code)
 *      new Jx.Field.Spinner({
 *              label: 'Spin Field',
 *              onSpinUp: function(){
 *                      alert("spin up click event");
 *              },
 *              onSpinDown: function(){
 *                      alert("spin down click event");
 *              }
 *      })
 * (end)
 *
 * Extends:
 * <Jx.Field.Text>
 *
 * Author: Ing. Axel Mendoza Pupo.
 *
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/spinner", function(require, exports, module){
    
    var base = require("../../base"),
        Text = require("./text"),
        Button = require("../button");
        
    var spinner = module.exports = new Class({
        Extends: Text,
        Family: 'Jx.Field.Spinner',
        
        options: {
            buttonTemplate: '<a class="jxButtonContainer jxButton" href="javascript:void(0);"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>',
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputWrapper"><input type="text" class="jxInputText"  name="{name}"><span class="jxInputSpinners"></span></span><span class="jxInputTag"></span></span>'
        },
    
        render: function(){
            this.classes = Object.merge({},this.classes, {
                wrapper: 'jxInputWrapper',
                revealer: 'jxInputSpinners'
            });
            this.parent();
    
            this.buttonUp = new Button({
                template: this.options.buttonTemplate,
                imageClass: 'jxInputSpinUpIcon',
                onClick: function(){
                    this.fireEvent('spinUp', this);
                }.bind(this)
            }).addTo(this.revealer);
    
            this.buttonDown = new Button({
                template: this.options.buttonTemplate,
                imageClass: 'jxInputSpinDownIcon',
                onClick: function(){
                    this.fireEvent('spinDown', this);
                }.bind(this)
            }).addTo(this.revealer);
        }
    }); 
    
    if (base.global) {
        base.global.Field.Spinner = module.exports;
    }
    
});

/*
---

name: Jx.Field.NumberSpinner

description: Based on Jx.Field.Spinner, this provides a way to spin numbers

license: MIT-style license.

requires:
 - Jx.Field.Spinner

provides: [Jx.Field.NumberSpinner]

...
 */
// $Id$
/**
 * Class: Jx.Field.NumberSpinner
 *
 * A Jx.Widget that provides a Text Field with two buttons that fires events
 * and will spin numbers up and down 
 *
 * Example:
 * (code)
 *      new Jx.Field.NumberSpinner({
 *          label: 'Spin Field'
 *      })
 * (end)
 *
 * Extends:
 * <Jx.Field.Spinner>
 *
 * Author: Jonathan Bomgardner
 *
 * License:
 * Copyright (c) 2011, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/numberspinner", function(require, exports, module){
    
    var base = require("../../base"),
        Spinner = require("./spinner");
        
    var numberSpinner = module.exports = new Class({
        Extends: Spinner,
        Family: 'Jx.Field.NumberSpinner',
        
        options: {
            allowNegative: true,
            step: 1,
            value: 0
        },
        
        init: function(){
            this.parent();
            
            this.bound = {
                up: this.onSpinUp.bind(this),
                down: this.onSpinDown.bind(this)
            }
            
            this.addEvents({
                onSpinUp: this.bound.up,
                onSpinDown: this.bound.down
            });
        },
        
        onSpinUp: function(){
            var num = this.getValue().toInt();
            num+=this.options.step;
            this.setValue(num);
        },
        
        onSpinDown: function(){
            var num = this.getValue().toInt();
            num-=this.options.step;
            if (!this.options.allowNegative && num < 0){
                num = 0;
            }
            this.setValue(num);
        }
    });
    
    if (base.global) {
        base.global.Field.NumberSpinner = module.exports;
    }
});

/*
---

name: Jx.Field.Select

description: Represents a select, or drop down, input

license: MIT-style license.

requires:
 - Jx.Field

provides: [Jx.Field.Select]

...
 */
// $Id$
/**
 * Class: Jx.Field.Select
 *
 * Extends: <Jx.Field>
 *
 * This class represents a form select field.
 *
 * These fields are rendered as below.
 *
 * (code)
 * <div id='' class=''>
 *    <label for=''>A label for the field</label>
 *    <select id='' name=''>
 *      <option value='' selected=''>text</option>
 *    </select>
 * </div>
 * (end)
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 *
 */
define("jx/field/select", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var select = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Select",
    
        options: {
            /**
             * Option: multiple
             * {Boolean} optional, defaults to false.  If true, then the select
             * will support multi-select
             */
            mulitple: false,
            /**
             * Option: size
             * {Integer} optional, defaults to 1.  If set, then this specifies
             * the number of rows of the select that are visible
             */
            size: 1,
            /**
             * Option: comboOpts
             * Optional, defaults to null. if not null, this should be an array of
             * objects formated like [{value:'', selected: true|false,
             * text:''},...]
             */
            comboOpts: null,
            /**
             * Option: optGroups
             * Optional, defaults to null. if not null this should be an array of
             * objects defining option groups for this select. The comboOpts and
             * optGroups options are mutually exclusive. optGroups will always be
             * shown if defined.
             *
             * define them like [{name: '', options: [{value:'', selected: '',
             * text: ''}...]},...]
             */
            optGroups: null,
            /**
             * Option: template
             * The template for creating this select input
             */
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><select class="jxInputSelect" name="{name}"></select><span class="jxInputTag"></span></span>'
        },
        /**
         * Property: type
         * Indictes this type of field.
         */
        type: 'Select',
    
        /**
         * APIMethod: render
         * Creates a select field.
         */
        render: function () {
            this.parent();
            
            if (this.options.multiple !== undefined && this.options.multiple !== null) {
              this.field.set('multiple', this.options.multiple);
            }
            if (this.options.size !== undefined && this.options.size !== null) {
              this.field.set('size', this.options.size);
            }
            if (this.options.optGroups !== undefined && this.options.optGroups !== null) {
                this.options.optGroups.each(function(group){
                    var gr = new Element('optGroup');
                    gr.set('label',group.name);
                    group.options.each(function(option){
                        var opt = new Element('option', {
                            'value': option.value,
                            'html': this.getText(option.text)
                        });
                        if (option.selected !== undefined && option.selected !== null && option.selected) {
                            opt.set("selected", "selected");
                        }
                        gr.grab(opt);
                    },this);
                    this.field.grab(gr);
                },this);
            } else if (this.options.comboOpts !== undefined && this.options.comboOpts !== null) {
                this.options.comboOpts.each(function (item) {
                    this.addOption(item);
                }, this);
            }
        },
    
        /**
         * Method: addOption
         * add an option to the select list
         *
         * Parameters:
         * item - The option to add.
         * position (optional) - an integer index or the string 'top'.
         *                     - default is to add at the bottom.
         */
        addOption: function (item, position) {
            var opt = new Element('option', {
                'value': item.value,
                'html': this.getText(item.text)
            });
            if (item.selected !== undefined  && item.selected !== null && item.selected) {
                opt.set("selected", "selected");
            }
            var where = 'bottom';
            var field = this.field;
            if (position !== undefined && position !== null) {
                if (typeOf(position) == 'integer' &&
                    (position >= 0  && position < field.options.length)) {
                    field = this.field.options[position];
                    where = 'before';
                } else if (position == 'top') {
                    where = 'top';
                }
    
            }
            opt.inject(field, where);
        },
    
        /**
         * Method: removeOption
         * removes an option from the select list
         *
         * Parameters:
         *  item - The option to remove.
         */
        removeOption: function (item) {
            //TBD
        },
        /**
         * Method: setValue
         * Sets the value property of the field
         *
         * Parameters:
         * v - The value to set the field to.
         */
        setValue: function (v) {
            if (!this.options.readonly) {
                //loop through the options and set the one that matches v
                $$(this.field.options).each(function (opt) {
                    if (opt.get('value') === v) {
                        document.id(opt).set("selected", true);
                    }
                }, this);
            }
        },
    
        /**
         * Method: getValue
         * Returns the current value of the field.
         */
        getValue: function () {
            var index = this.field.selectedIndex;
            //check for a set "value" attribute. If not there return the text
            if (index > -1) {
                var ret = this.field.options[index].get("value");
                if (ret === undefined && ret === null) {
                    ret = this.field.options[index].get("text");
                }
                return ret;
            }
        },
        
        /**
         * APIMethod: empty
         * Empties all options from this select
         */
        empty: function () {
            if (this.field.options !== undefined && this.field.options !== null) {
                Array.from(this.field.options).each(function (option) {
                    this.field.remove(option);
                }, this);
            }
        }
    });
    
    if (base.global) {
        base.global.Field.Select = module.exports;
    }
    
});

/*
---

name: Jx.Formatter.Date

description: Formats dates using the mootools-more Date extensions

license: MIT-style license.

requires:
 - More/Date.Extras
 - Jx.Formatter

provides: [Jx.Formatter.Date]
...
 */
// $Id$
/**
 * Class: Jx.Formatter.Date
 *
 * Extends: <Jx.Formatter>
 *
 * This class formats dates using the mootools-more's
 * Date extensions. See the -more docs for details of
 * supported formats for parsing and formatting.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/date", function(require, exports, module){
    
    var base = require("../../base"),
        Formatter = require("../formatter");
        
    var date = module.exports = new Class({

        Extends: Formatter,
        Family: "Jx.Formatter.Date",
    
        options: {
            /**
             * Option: format
             * The format to use. See the mootools-more Date
             * extension documentation for details on supported
             * formats
             */
            format: '%B %d, %Y'
        },
        /**
         * APIMethod: format
         * Does the work of formatting dates
         *
         * Parameters:
         * value - the text to format
         */
        format: function (value) {
            var d = Date.parse(value);
            return d.format(this.options.format);
        }
    });
    
    if (base.global) {
        base.global.Formatter.Date = module.exports;
    }
});

/*
---

name: Jx.Field.Date

description: Provides a field to select a valid date value using a Date Picker

license: MIT-style license.

requires:
 - Jx.DatePicker
 - Jx.Field
 - Jx.Formatter.Date
 - Jx.Button.Flyout
 
css:
 - field.date

provides: [Jx.Field.Date]

...
 */
// $Id$
/**
 * Class: Jx.Field.Date
 *
 * Provides a field to select a valid date value using a Date Picker
 *
 * Example:
 * (code)
 * 	new Jx.Field.Date({
 * 		label: 'Start Date',
 *		value: '05/05/1984',
 *		format: '%m/%d/%Y'
 *	})
 * (end)
 *
 * Extends:
 * <Jx.Field>
 *
 * Author: Ing. Axel Mendoza Pupo.
 * 
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/date", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        DateFormatter = require("../formatter/date"),
        Flyout = require("../button/flyout"),
        DatePicker = require("../datepicker");
        
    var date = module.exports = new Class({    
        Extends: Field,
        Family: 'Jx.Field.Date',
        
        options: {
            buttonTemplate: '<a class="jxButtonContainer jxButton" href="javascript:void(0);"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>',
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputWrapper"><input type="text" class="jxInputText"  name="{name}"><span class="jxInputRevealer"></span></span><span class="jxInputTag"></span></span>',
            format: '%d/%m/%Y'
        },
         
        type: 'Text',
         
        /**
         * APIMethod: render
         * create a new instance of Jx.Field.Date
         */
        render: function() {
            this.classes = Object.merge({},this.classes, {
              wrapper: 'jxInputWrapper',
              revealer: 'jxInputRevealer',
              icon: 'jxInputIcon'
            });
            this.parent();
            
            this.formatter = new DateFormatter({
                format: this.options.format
            });
            
            var pickerContainer = new Element('div',{
                styles: {
                    width: 171,
                    height: 156
                }
            });
            
            var button = new Flyout({
                template: this.options.buttonTemplate,
                imageClass: 'jxInputRevealerIcon',
                positionElement: this.field,
                content: pickerContainer
            }).addTo(this.revealer);
            
            //we need to style the Flyout so grab a reference and add our class
            document.id(button.content).addClass('jxDateFieldFlyout');
            
            this.datePicker = new DatePicker({
                value: this.options.value,
                onSelect: function(value){
                    var valueNew = this.formatter.format(value);
                    this.setValue(valueNew);
                    button.hide();
                }.bind(this)
            }).addTo(pickerContainer);
            
            button.addEvent('click', function(e) {
                
                if (!button.options.enabled) {
                    return;
                }
                this.contentContainer.setStyle('visibility','hidden');
                this.contentContainer.setStyle('display','block');
                document.id(document.body).adopt(this.contentContainer);
                /* we have to size the container for IE to render the chrome correctly
                 * but just in the menu/sub menu case - there is some horrible peekaboo
                 * bug in IE related to ULs that we just couldn't figure out
                 */
                this.contentContainer.setContentBoxSize(this.subDomObj.getMarginBoxSize());
    
                this.showChrome(this.contentContainer);
    
                this.position(this.contentContainer, that.field, {
                    horizontal: ['left left', 'right right'],
                    vertical: ['bottom top', 'top bottom'],
                    offsets: this.chromeOffsets
                });
    
                this.contentContainer.setStyle('visibility','');
    
                document.addEvent('mousedown', this.bound.hide);
                document.addEvent('keyup', this.bound.keypress);
    
                //this.fireEvent('show', this);
                
                
            }.bind(this));
         }
    });
    
    if (base.global) {
        base.global.Field.Date = module.exports;
    }
    
});

/*
---

name: Jx.Field.Password

description: Represents a password input

license: MIT-style license.

requires:
 - Jx.Field.Text

provides: [Jx.Field.Password]

...
 */
// $Id$
/**
 * Class: Jx.Field.Password
 *
 * Extends: <Jx.Field.Text>
 *
 * This class represents a password input field.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/password", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var password = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Password",
    
        options: {
            template: '<span class="jxInputContainer"><label class="jxInputLabel" ></label><input class="jxInputPassword" type="password" name="{name}"/><span class="jxInputTag"></span></span>'
        },
    
        type: 'Password'
    });
    
    if (base.global) {
        base.global.Field.Password = module.exports;
    }
    
});

/*
---

name: Jx.Field.Editor

description:

license: MIT-style license.

requires:
 - Jx.Field
 - Jx.Editor
 - more/Element.Shortcuts

provides: [Jx.Field.Editor]

css:
 - field.editor


...
 */
define("jx/field/editor", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        Editor = require("../editor");
        
    var editor = module.exports = new Class({

        Extends: Field,
        Family: 'Jx.Field.Editor',
    
        options: {
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputEditor"></span><span class="jxInputTag"></span></span>',
            editorOptions: {
                buttons: [
                    ['bold','italic','underline','strikethrough','separator','alignment',
                          'separator','orderedlist','unorderedlist','indent','outdent'],
                    ['undo','redo','separator','customStyles','block',
                          'separator', 'link','unlink', 'image','separator', 'toggle']
                ]
            }
    
        },
    
        type: 'Editor',
    
        render: function () {
            this.parent();
    
            this.options.editorOptions.content = this.options.value;
            this.options.editorOptions.textareaName = this.options.name;
            
            if (this.options.parent !== null &&
                this.options.parent !== undefined &&
                typeOf(this.options.parent) != 'function') {
                this.createEditor();
            }
    
        },
    
        addTo: function (reference, where) {
    
            this.parent(reference, where);
            //this.createEditor();
            
        },
        
        createEditor: function(){
            if (document.id(this.field).isVisible()) {
                //if the delay is still set...
                if (this.delay) { clearTimeout(this.delay);}
                if (this.editor === undefined ||
                    this.editor === null || !instanceOf(this.editor, Editor)) {
                    this.options.editorOptions.parent = document.id(this.field);
                    this.editor = new Editor(this.options.editorOptions);
                    this.editor.resize();
                    this.field = this.editor.textarea;
                    //grab change and blur events and pass them on for the editor
                    this.editor.addEvents({
                        'editorChange': function(){
                            this.fireEvent('change', this);
                        }.bind(this),
                        'editorBlur': function(){
                            this.fireEvent('blur',this);
                        }.bind(this)
                    });
                }
            } else {
                //we would need to wait until the field is visible before we can render the editor
                //simply delay this function for a seconds and then try again
                this.delay = this.createEditor.delay(1000, this);
            }
        },
    
        getValue: function () {
            return this.editor.saveContent().getContent();
        },
    
        setValue: function (value) {
            this.editor.setContent(value).saveContent();
        }
    
        
    });
    
    if (base.global) {
        base.global.Field.Editor = module.exports;
    }
    
});

/*
---

name: Jx.Store.Strategy

description: Base class for all store strategies.

license: MIT-style license.

requires:
 - Jx.Store

provides: [Jx.Store.Strategy]


...
 */
// $Id$
/**
 * Class: Jx.Store.Strategy
 * 
 * Extends: <Jx.Object>
 * 
 * Base class for all Jx.Store strategies
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */

define("jx/store/strategy", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object"),
        Store = require("../store");
        
    var strategy = module.exports = new Class({
    
        Extends: jxObject,
        Family: 'Jx.Store.Strategy',
        /**
         * APIProperty: store
         * The store this strategy is associated with
         */
        store: null,
        /**
         * APIProperty: active
         * whether this strategy has been activated or not.
         */
        active: null,
        
        /**
         * Method: init
         * initialize the strategy, should be called by subclasses
         */
        init: function () {
            this.parent();
            this.active = false;
        },
        /**
         * APIMethod: setStore
         * Associates this strategy with a particular store.
         */
        setStore: function (store) {
            if (store instanceof Store) {
                this.store = store;
                return true;
            }
            return false;
        },
        
        /**
         * APIMethod: activate
         * activates the strategy if it isn't already active.
         */
        activate: function () {
            if (!this.active) {
                this.active = true;
                return true;
            }
            return false;
        },
        /**
         * APIMethod: deactivate
         * deactivates the strategy if it is already active.
         */
        deactivate: function () {
            if (this.active) {
                this.active = false;
                return true;
            }
            return false;
        }
    });
    
    if (base.global) {
        base.global.Store.Strategy = module.exports;
    }
    
});

/*
---

name: Jx.Store.Strategy.Paginate

description: Strategy for loading data in pages and moving between them. This strategy makes sure the store only contains the current page's data.

license: MIT-style license.

requires:
 - Jx.Store.Strategy

provides: [Jx.Store.Strategy.Paginate]


...
 */
// $Id$
/**
 * Class: Jx.Store.Strategy.Paginate
 * 
 * Extends: <Jx.Store.Strategy>
 * 
 * Store strategy for paginating results in a store.
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */
define("jx/store/strategy/paginate", function(require, exports, module){
    
    var base = require("../../../base"),
        Strategy = require("../strategy");
        
    var paginate = module.exports = new Class({
    
        Extends: Strategy,
        Family: "Jx.Store.Strategy.Paginate",
        
        name: 'paginate',
        
        options: {
            /**
             * Option: getPaginationParams
             * a function that returns an object that holds the parameters
             * necessary for getting paginated data from a protocol.
             */
            getPaginationParams: function () {
                return {
                    page: this.page,
                    itemsPerPage: this.itemsPerPage
                };
            },
            /**
             * Option: startingItemsPerPage
             * Used to set the intial itemsPerPage for the strategy. the pageSize 
             * can be changed using the setPageSize() method.
             */
            startingItemsPerPage: 25,
            /**
             * Option: startingPage
             * The page to start on. Defaults to 1 but can be set to any other 
             * page.
             */
            startingPage: 1,
            /**
             * Option: expirationInterval
             * The interval, in milliseconds (1000 = 1 sec), to hold a page of
             * data before it expires. If the page is expired, the next time the
             * page is accessed it must be retrieved again. Default is 5 minutes
             * (1000 * 60 * 5)
             */
            expirationInterval: (1000 * 60 * 5),
            /**
             * Option: ignoreExpiration
             * Set to TRUE to ignore the expirationInterval setting and never
             * expire pages.
             */
            ignoreExpiration: false
        },
        /**
         * Property: data
         * holds the pages of data keyed by page number.
         */
        data: null,
        /**
         * property: cacheTimer
         * holds one or more cache timer ids - one per page. Each page is set to 
         * expire after a certain amount of time.
         */
        cacheTimer: null,
        /**
         * Property: page
         * Tracks the page the store currently holds.
         */
        page: null,
        /**
         * Property: itemsPerPage
         * The number of items on each page
         */
        itemsPerPage: null,
        
        /**
         * Method: init
         * initialize this strategy
         */
        init: function () {
            this.parent();
            this.data = {};
            this.cacheTimer = {};
            //set up bindings that we need here
            this.bound.load = this.load.bind(this);
            this.bound.loadStore = this.loadStore.bind(this);
            this.itemsPerPage = this.options.startingItemsPerPage;
            this.page = this.options.startingPage;
        },
        
        /**
         * APIMethod: activate
         * activates the strategy if it isn't already active.
         */
        activate: function () {
            this.parent();
            this.store.addEvent('storeLoad', this.bound.load);
        },
        
        /**
         * APIMethod: deactivate
         * deactivates the strategy if it is already active.
         */
        deactivate: function () {
            this.parent();
            this.store.removeEvent('storeLoad', this.bound.load);
        },
        /**
         * APIMethod: load
         * Called to load data into the store
         * 
         * Parameters:
         * params - a Hash of parameters to use in getting data from the protocol.
         */
        load: function (params) {
            this.store.fireEvent('storeBeginDataLoad', this.store);
            this.store.protocol.addEvent('dataLoaded', this.bound.loadStore);
            this.params = params;
            var opts = {
                data: Object.merge({},params, this.options.getPaginationParams.apply(this))
            };
            this.store.protocol.read(opts);
        },
        /**
         * Method: loadStore
         * Used to assist in the loading of data into the store. This is 
         * called as a response to the protocol finishing.
         * 
         *  Parameters:
         *  resp - the response object
         */
        loadStore: function (resp) {
            this.store.protocol.removeEvent('dataLoaded', this.bound.loadStore);
            if (resp.success()) {
                if (resp.meta !== undefined && resp.meta !== null) {
                    this.parseMetaData(resp.meta);
                }
                this.data[this.page] = resp.data;
                this.loadData(resp.data);
            } else {
                this.store.fireEvent('storeDataLoadFailed', this.store);
            }
        },
        /**
         * Method: loadData
         * This method does the actual work of loading data to the store. It is
         * called when either the protocol finishes or setPage() has the data and
         * it's not expired.
         * 
         * Parameters:
         * data - the data to load into the store.
         */
        loadData: function (data) {
            this.store.empty();
            this.store.loaded = false;
            if (!this.options.ignoreExpiration) {
                var id = this.expirePage.delay(this.options.expirationInterval, this, this.page);
                this.cacheTimer[this.page]  = id;
            }
            this.store.addRecords(data);
            this.store.loaded = true;
            this.store.fireEvent('storeDataLoaded',this.store);
        },
        /**
         * Method: parseMetaData
         * Takes the metadata returned from the protocol and places it in the
         * appropriate Vplaces.
         * 
         * Parameters:
         * meta - the meta data object returned from the protocol.
         */
        parseMetaData: function (meta) {
            if (meta.columns !== undefined && meta.columns !== null) {
                this.store.options.fields = meta.columns;
            }
            if (meta.totalItems !== undefined && meta.totalItems !== null) {
                this.totalItems = meta.totalItems;
            }
            if (meta.totalPages !== undefined && meta.totalPages !== null) {
                this.totalPages = meta.totalPages;
            }
            if (meta.primaryKey !== undefined && meta.primaryKey !== null) {
                this.store.options.recordOptions.primaryKey = meta.primaryKey;
            }
                
        },
        /**
         * Method: expirePage
         * Is called when a pages cache timer expires. Will expire the page by 
         * erasing the page and timer. This will force a reload of the data the 
         * next time the page is accessed.
         * 
         * Parameters:
         * page - the page number to expire.
         */
        expirePage: function (page) {
            delete this.data[page];
            delete this.cacheTimer[page];
        },
        /**
         * APIMethod: setPage
         * Allows a caller (i.e. a paging toolbar) to move to a specific page.
         * 
         * Parameters:
         * page - the page to move to. Can be any absolute page number, any number
         *        prefaced with '-' or '+' (i.e. '-1', '+3'), 'first', 'last', 
         *        'next', or 'previous'
         */
        setPage: function (page) {
            if (typeOf(page) === 'string') {
                switch (page) {
                    case 'first':
                        this.page = 1;
                        break;
                    case 'last':
                        this.page = this.totalPages;
                        break;
                    case 'next':
                        this.page++;
                        break;
                    case 'previous':
                        this.page--;
                        break;
                    default:
                        this.page = this.page + Jx.getNumber(page);
                        break;
                }
            } else {
                this.page = page;
            }
            if (Object.keys(this.cacheTimer).contains(this.page)) {
                window.clearTimeout(this.cacheTimer.get(this.page));
                delete this.cacheTimer[this.page];
            }
            if (Object.keys(this.data).contains(this.page)){
                this.loadData(this.data[this.page]);
            } else {
                this.load(this.params);
            }
        },
        /**
         * APIMethod: getPage
         * returns the current page
         */
        getPage: function () {
            return this.page;
        },
        /**
         * APIMethod: getNumberOfPages
         * returns the total number of pages.
         */
        getNumberOfPages: function () {
            return this.totalPages;
        },
        /**
         * APIMethod: setPageSize
         * sets the current size of the pages. Calling this will expire every page 
         * and force the current one to reload with the new size.
         */
        setPageSize: function (size) {
            //set the page size 
            this.itemsPerPage = size;
            //invalidate all pages cached and reload the current one only
            Object.each(this.cacheTimer, function(val){
                window.clearTimeout(val);
            },this);
            this.cacheTimer = {};
            this.data = {};
            this.load();
        },
        /**
         * APIMethod: getPageSize
         * returns the current page size
         */
        getPageSize: function () {
            return this.itemsPerPage;
        },
        /**
         * APIMethod: getTotalCount
         * returns the total number of items as received from the protocol.
         */
        getTotalCount: function () {
            return this.totalItems;
        }
    });
    
    if (base.global) {
        base.global.Store.Strategy.Paginate = module.exports;
    }
    
});

/*
---

name: Jx.Toolbar.Pager

description: A basic implementation of a paging toolbar

license: MIT-style license.

requires:
 - Jx.Toolbar
 - Jx.Button
 - Jx.Toolbar.Item
 - Jx.Store.Strategy.Paginate

css:
 - pager
 
provides: [Jx.Toolbar.Pager]

images:
 - 

...
 */
// $Id$
/**
 * Class: Jx.Toolbar.Pager
 *
 * Extends: <Jx.Toolbar>
 *
 * A toolbar designed to support paging. It requires a store to be passed in.
 * If the store doesn't have a paginate strategy it adds one.
 *
 *
 * License:
 * Copyright (c) 2011, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/toolbar/pager", function(require, exports, module){
    
    var base = require("../../base"),
        Toolbar = require("../toolbar"),
        Button = require("../button"),
        Item = require("./item"),
        Paginate = require("../store/strategy/paginate")
        
    var pager = module.exports = new Class({

        Extends: Toolbar,
    
        options: {
            store: null,
            paginationOptions: {
                ignoreExpiration: true
            },
            scroll: false
        },
        
        currentPage: 1,
        totalPages: 1,
    
        init: function () {
            
            
            if (this.options.store !== undefined) {
                this.store = this.options.store;
            } else {
                //can't do anything without a store!
                return;
            }
    
            this.strategy = this.store.getStrategy('paginate');
    
            if (this.strategy === undefined) {
                //it didn't have the strategy so let's add it
                var full = this.store.getStrategy('full');
                if (full) { full.deactivate(); }
                this.strategy = new Paginate(this.options.paginationOptions);
                this.store.addStrategy(this.strategy);
            }
    
            this.parent();
            
            this.store.addEvent('storeDataLoaded', this.updateToolbar.bind(this));
            
            
        },
    
        render: function () {
            //create the toolbar
            this.parent();
    
            this.counter = new Element('div', {
                html: 'Page: 1 of X',
                id: 'counter'
            });
            this.firstPage = new Button({
                id: 'start',
                label: '<<',
                //image: 'images/asterisk_orange.png',
                tooltip: 'jump to first page',
                onClick: function() { 
                    this.strategy.setPage('first'); 
                }.bind(this)
            });
            this.previousPage = new Button({
                id: 'previous',
                label: '<',
                //image: 'images/asterisk_orange.png',
                tooltip: 'previous page',
                onClick: function() { 
                    this.strategy.setPage('previous'); 
                }.bind(this)
            });
            this.nextPage = new Button({
                id: 'next',
                label: '>',
                //image: 'images/asterisk_orange.png',
                tooltip: 'next page',
                onClick: function() { 
                    this.strategy.setPage('next');
                }.bind(this)
            });
            this.lastPage = new Button({
                id: 'last',
                label: '>>',
                //image: 'images/asterisk_orange.png',
                tooltip: 'jump to last page',
                onClick: function() { 
                    this.strategy.setPage('last');
                }.bind(this)
            });
            this.add(this.firstPage, this.previousPage, new Item(this.counter), this.nextPage, this.lastPage);
            if (this.store.loaded) {
                this.updateToolbar();
            }
        },
    
        updateToolbar: function () {
            this.currentPage = this.strategy.getPage();
            this.totalPages = this.strategy.getNumberOfPages();
            this.counter.set('html','Page ' + this.currentPage + ' of ' + this.totalPages);
            //disable the buttons here based on page.
            if (this.currentPage == this.totalPages) {
                this.enableButtons(true, false);
            } else if (this.currentPage == 1) {
                this.enableButtons(false,true);
            } else {
                this.enableButtons(true,true);
            }
            this.update();
        },
        
        enableButtons: function (prev, next) {
            this.nextPage.setEnabled(next);
            this.lastPage.setEnabled(next);
            this.firstPage.setEnabled(prev);
            this.previousPage.setEnabled(prev);
        }
    });
    
    if (base.global) {
        base.global.Toolbar.Pager = module.exports;
    }
});

/*
---

name: Jx.Adaptor.ListView

description:

license: MIT-style license.

requires:
 - Jx.Adaptor


provides: [Jx.Adaptor.ListView]

...
 */

define('jx/adaptor/listview',function(require, exports, module){
    
    var base = require("../../base");
    
    //This just needs to set the namespace in the global object
    if (base.global) {
        base.global.Adaptor.ListView = {};
    }
});


/*
---

name: Jx.Adaptor.ListView.Fill

description:

license: MIT-style license.

requires:
 - Jx.Adaptor.ListView
 - Jx.ListItem

provides: [Jx.Adaptor.ListView.Fill]

css:
-

images:
-

...
 */

define("jx/adaptor/listview/fill", function(require, exports, module){
    
    var base = require("../../../base"),
        Adaptor = require("../../adaptor"),
        ListItem = require("../../listitem");
            
    var fill = module.exports = new Class({
    
        
        Extends: Adaptor,
        Family: 'Jx.Adaptor.Listview.Fill',    
        Binds: ['fill'],
    
        name: 'listview.fill',
    
        options: {
            itemTemplate: "<li class='jxListItemContainer'><a class='jxListItem' href='javascript:void(0);'><span class='itemLabel'>{label}</span></a></li>",
            emptyMessage: null
        },
    
        itemColumnsNeeded: null,
    
        init: function () {
            this.parent();
        },
    
        attach: function (listview) {
            this.parent(listview);
    
            this.currentIndex = 0;
    
            this.store.addEvents({
                'storeDataLoaded': this.fill,
                'storeDataLoadFailed': this.fill,
                'storeRecordDeleted': this.fill
            });
            
            listview.addEvent('postRender', function(){
                if (this.store.loaded) {
                    this.fill();
                }
            }.bind(this));
            
        },
    
        detach: function () {
            this.parent();
            this.store.removeEvents({
                'storeDataLoaded': this.fill,
                'storeDataLoadFailed': this.fill,
                'storeRecordDeleted': this.fill
            });
        },
    
        fill: function () {
            this.widget.empty();
    
            if (this.columnsNeeded === undefined || this.columnsNeeded === null || this.columnsNeeded.length == 0) {
                this.columnsNeeded = this.store.parseTemplate(this.options.template);
            }
    
            if (this.itemColumnsNeeded === undefined || this.itemColumnsNeeded === null || this.itemColumnsNeeded.length == 0) {
                this.itemColumnsNeeded = this.store.parseTemplate(this.options.itemTemplate);
            }
    
            var items = [];
    
            var maxRecords = this.store.count();
            if (maxRecords > 0) {
                for (var i = 0; i < maxRecords; i++) {
                    var record = this.store.getRecord(i);
                    var template = this.store.fillTemplate(record, this.options.template, this.columnsNeeded);
                    var o = {item: template};
                    var theTemplate = this.store.fillTemplate(record, this.options.itemTemplate, this.columnsNeeded, o);
                    var item = new ListItem({template:theTemplate});
                    document.id(item).store('storeId',i);
                    items.push(item);
                    this.fireEvent('itemCreated', [item,record]);
                }
            } else {
                var template = "<li class='jxListItemContainer'><a class='jxListItem' href='javascript:void(0);'><span class='itemLabel'>{label}</span></a></li>";
                var o = {
                    label: this.options.emptyMessage
                }
                var theTemplate = new String(template).substitute(o);
                var item = new ListItem({template:theTemplate});
                items.push(item);
            }
    
            this.widget.add(items);
            
        }
    });

    if (base.global) {
        base.global.Adaptor.ListView.Fill = module.exports;
    }
});

/*
---

name: Jx.Field.ComboBox

description: a Combo that shows a paginated Jx.ListView

license: MIT-style license.

requires:
 - Jx.Toolbar.Pager
 - Jx.ListView
 - Jx.Adaptor.ListView.Fill
 - Jx.Button.Flyout
 - Jx.Panel

provides: [Jx.Field.ComboBox]

...
 */
// $Id$
/**
 * Class: Jx.Field.ComboBox
 *
 * A Combo that show a Jx.ListView items from a supplied store to select for the combo.
 * Supports pagination based on the class Jx.Toolbar.Pager
 *
 * Example:
 * (code)
 * new Jx.Field.ComboBox({
 *     label:'ComboBox',
 *     name:'ComboBox',
 *     displayField: 'nombre',
 *     valueField: 'id',
 *     store: store
 * })
 * (end)
 *
 * Extends:
 * <Jx.Field>
 *
 * Author: Ing. Axel Mendoza Pupo.
 *
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/combobox", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        ListView = require("../listview"),
        Fill = require("../adaptor/listview/fill"),
        Flyout = require("../button/flyout"),
        Pager = require("../toolbar/pager");
        
    var comboBox = module.exports = new Class({
    
        Extends: Field,
        Family: 'Jx.Field.Combo',            
        pluginNamespace: 'Combo',
    
        options: {
            buttonTemplate: '<a class="jxButtonContainer jxButton" href="javascript:void(0);"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>',
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputWrapper"><input type="text" class="jxInputCombo"  name="{name}"><span class="jxInputRevealer"></span></span><span class="jxInputTag"></span></span>',
            itemTemplate: '',
            store: null,
            displayField: null,
            valueField: 'id',
            hiddenValue: null,
            emptyMessage: '',
            onChange: function(field){
                var store = this.options.store;
                var index = store.findByColumn(this.options.displayField, field.getValue());
                var record = this.options.store.getRecord(index);
                this.hiddenValue = store.get(this.options.valueField,index);
            }.bind(this)
         },
    
         type: 'Combo',
    
        /**
         * APIMethod: render
         * create a new instance of Jx.Field.Combo
         */
        init: function () {
            this.hiddenValue = this.options.hiddenValue;
            if (this.options.itemTemplate === undefined ||
                this.options.itemTemplate === null ||
                this.options.itemTemplate == '') {
                this.options.itemTemplate = '{'+this.options.displayField +'}';
            }
            this.parent();
        },
    
        getValue: function(){
            if(this.hiddenValue == null) {
                return this.field.value;
            }
            return this.hiddenValue;
        },
        
        render: function() {
            this.classes = Object.merge({},this.classes, {
              wrapper: 'jxInputWrapper',
              revealer: 'jxInputRevealer',
              icon: 'jxInputIcon'
            });
            this.parent();
    
            //use ListView.Fill adaptor
            this.adaptor = new Fill({
                itemTemplate: "<li class='jxListItemContainer'><a class='jxListItem' href='javascript:void(0);'>{item}</a></li>",
                template: this.options.itemTemplate,
                emptyMessage: this.options.emptyMessage,
                store: this.options.store
            });
            
            this.listView = new ListView({
                plugins: [this.adaptor]        
            });
    
            var button = new Flyout({
                template: this.options.buttonTemplate,
                imageClass: 'jxInputRevealerIcon',
                positionElement: this.field,
                content: new Jx.Panel({
                    width: 260,
                    height: 240,
                    collapse: false,
                    hideTitle: true,
                    content: this.listView,
                    toolbars: [
                        new Pager({
                                store: this.options.store,
                                position: 'bottom',
                                align: 'left',
                                paginationOptions: {
                                    ignoreExpiration: true
                                },
                        })
                    ]
                })
    
            }).addTo(this.revealer);
    
    
    
            this.listView.addEvent('click',function(jx,listview,el){
                button.hide();
                var idx = document.id(jx).retrieve('storeId').toInt();
                this.setValue(this.options.store.get(this.options.displayField,idx));
                this.hiddenValue = this.options.store.get(this.options.valueField, idx);
            }.bind(this));
        }
    
    });
    
    if (base.global) {
        base.global.Field.ComboBox = module.exports;
    }
    
});

/*
---

name: Jx.Tree.Folder

description: A Jx.Tree.Folder is an item in a tree that can contain other items. It is expandable and collapsible.

license: MIT-style license.

requires:
 - Jx.Widget.List
 - Jx.Tree

provides: [Jx.Tree.Folder]

...
 */
// $Id$
/**
 * Class: Jx.Tree.Folder
 *
 * A Jx.TreeFolder is an item in a tree that can contain other items.  It is
 * expandable and collapsible.
 *
 * Example:
 * (code)
 * (end)
 *
 * Extends:
 * <Jx.Widget.list>
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tree/folder", function(require, exports, module){
    
    var base = require("../../base"),
        WidgetList = require("../widget/list"),
        Item = null;
        
    var folder = module.exports = new Class({
    
        Extends: WidgetList,
        Family: 'Jx.Tree.Folder',
        
        options: {
            /* Option: label
             * {String} the label to display for the TreeItem
             */
            label: '',
            /* Option: contextMenu
             * {<Jx.ContextMenu>} the context menu to trigger if there
             * is a right click on the node
             */
            contextMenu: null,
            /* Option: enabled
             * {Boolean} the initial state of the TreeItem.  If the
             * TreeItem is not enabled, it cannot be clicked.
             */
            enabled: true,
            selectable: true,
            /* Option: image
             * {String} URL to an image to use as the icon next to the
             * label of this TreeItem
             */
            image: null,
            /* Option: imageClass
             * {String} CSS class to apply to the image, useful for using CSS
             * sprites
             */
            imageClass: '',
            /* Option: open
             * is the folder open?  false by default.
             */
            open: false,
            /* folders will share a selection with the tree they are in */
            select: false,
            
            trackEvents: false,
            
            template: '<li class="jxTreeContainer jxTreeBranch"><img class="jxTreeImage" src="'+base.aPixel.src+'" alt="" title=""><a class="jxTreeItem" href="javascript:void(0);"><img class="jxTreeIcon" src="'+base.aPixel.src+'" alt="" title=""><span class="jxTreeLabel"></span></a><ul class="jxTree jxListContainer"></ul></li>'
        },
        classes: {
            domObj: 'jxTreeContainer',
            domA: 'jxTreeItem',
            domImg: 'jxTreeImage',
            domIcon: 'jxTreeIcon',
            domLabel: 'jxTreeLabel',
            domTree: 'jxTree',
            container: 'jxListContainer'
        },
        
        dirty: false,
        
        init: function(){
            Item = require("./item");
            this.parent();
        },
        /**
         * APIMethod: render
         * Create a new instance of Jx.Tree.Folder
         */
        render : function() {
            this.parent();
            this.domObj.store('jxTreeFolder', this);
            
            this.options.returnJx = true;
            
            if (!this.options.selectable) {
                this.domObj.addClass('jxUnselectable');
            }
    
            if (this.options.id) {
                this.domObj.id = this.options.id;
            }
            if (!this.options.enabled) {
                this.domObj.addClass('jxDisabled');
            }
    
            if (this.options.image && this.domIcon) {
                this.domIcon.setStyle('backgroundImage', 'url('+this.options.image+')');
                if (this.options.imageClass) {
                    this.domIcon.addClass(this.options.imageClass);
                }
    
            }
    
            if (this.options.label && this.domLabel) {
                this.setLabel(this.options.label);
            }
    
            if (this.domA) {
                this.domA.addEvents({
                    drag: function(e) { e.stop(); }
                });
                //TODO: should we keep this in? Can it be overridden by a plugin?
                if (typeof Drag != 'undefined') {
                    new Drag(this.domA, {
                        onStart: function() {this.stop();}
                    });
                }
            }
    
            if (this.options.enabled !== undefined && this.options.enabled !== null) {
                this.enable(this.options.enabled, true);
            }
            
            if (this.options.open) {
                this.expand();
            } else {
                this.collapse();
            }
    
        },
        
        cleanup: function() {
          this.domObj.eliminate('jxTreeFolder');
          this.domObj.eliminate('jxTreeItem');
          this.domA.eliminate('jxTreeItem');
          this.domA.eliminate('jxContextMenu');
          this.domObj.eliminate('jxListTarget');
          this.domObj.eliminate('jxListTargetItem');
          this.parent();
        },
        
        /**
         * APIMethod: add
         * add one or more items to the tree at a particular position in the tree
         *
         * Parameters:
         * item - {<Jx.TreeItem>} or an array of items to be added
         * position - {mixed} optional location to add the items.  By default,
         * this is 'bottom' meaning the items are added at the end of the list.
         * See <Jx.Widget.List::add> for options
         *
         * Returns:
         * {<Jx.Tree>} a reference to this object for chaining calls
         */
        add: function(item, position) {
            if (typeOf(item) == 'array') {
                item.each(function(what){ this.add(what, position); }.bind(this) );
                return null;
            }
            if (instanceOf(item, folder)) {
                item.addEvents({
                    add: function(what) { 
                        this.fireEvent('add', what); 
                    }.bind(this),
                    remove: function(what) { 
                        this.fireEvent('remove', what); 
                    }.bind(this)
                    /*
                    click: function(what) { 
                        this.fireEvent('click', what); 
                    }.bind(this)
                    */
                });
                item.setSelection(this.selection);
                item.stopListening();
            }
            
            item.owner = this;
            this.parent(item,position);
            this.setDirty(true);
            if (this.owner) {
                this.owner.update(true);
            }
            return this;
        },
        
        /**
         * Method: update
         * Update the CSS of the TreeFolder's DOM element in case it has changed
         * position.
         *
         * Parameters:
         * shouldDescend - {Boolean} propagate changes to child nodes?
         * isLast - {Boolean} is this the last item in the list?
         *
         * Returns:
         * {<Jx.Tree.Folder>} a reference to this for chaining
         */
        update: function(shouldDescend,isLast) {
            /* avoid update if not attached to tree yet */
            if (!this.domObj.parentNode) return;
            
            if (isLast !== undefined && isLast !== null) {
                if (isLast) {
                    this.container.removeClass('jxTreeNest');
                } else {
                    this.container.addClass('jxTreeNest');
                }
            }
            
            if (this.dirty || (this.owner && this.owner.dirty)) {
                if (isLast === undefined || isLast === null) {
                  isLast = this.domObj.hasClass('jxTreeBranchLastOpen') ||
                           this.domObj.hasClass('jxTreeBranchLastClosed');
                }
                
                ['jxTreeBranchOpen','jxTreeBranchLastOpen','jxTreeBranchClosed',
                'jxTreeBranchLastClosed'].each(function(c){
                  this.removeClass(c);
                }, this.domObj);
                
                var c = 'jxTreeBranch';
                c += isLast ? 'Last' : '';
                c += this.options.open ? 'Open' : 'Closed';
                this.domObj.addClass(c);
                
                if (shouldDescend) {
                    var last = this.count() - 1;
                    this.items().each(function(item, idx){
                        var lastItem = idx == last,
                            jx = base.getWidget(item);
                        if (instanceOf(jx, folder)) {
                            jx.update(shouldDescend, lastItem);
                        } else if (instanceOf(jx, Item)) {
                            jx.update(lastItem);
                        }
                    });
                }
            }
    
            
        },
       
        /**
         * APIMethod: expand
         * Expands the folder
         *
         * Returns:
         * {<Jx.Tree.Folder>} a reference to this for chaining
         */
        expand : function() {
            this.options.open = true;
            this.container.setStyle('display', 'block');
            this.setDirty(true);
            this.update(true);
            this.fireEvent('disclosed', this);
            return this;
        },
        /**
         * APIMethod: collapse
         * Collapses the folder
         *
         * Returns:
         * {<Jx.Tree.Folder>} a reference to this for chaining
         */
        collapse : function() {
            this.options.open = false;
            this.container.setStyle('display', 'none');
            this.setDirty(true);
            this.update(true);
            this.fireEvent('disclosed', this);
            return this;
        },
        /**
         * APIMethod: findChild
         * Get a reference to a child node by recursively searching the tree
         *
         * Parameters:
         * path - {Array} an array of labels of nodes to search for
         *
         * Returns:
         * {Object} the node or null if the path was not found
         */
        findChild : function(path) {
            //path is empty - we are asking for this node
            if (path.length === 0) {
                return this;
            } else {
                return this.tree.findChild(path);
            }
        },
        /**
         * Method: setSelection
         * sets the <Jx.Selection> object to be used by this folder.  Used
         * to propogate a single selection object throughout a tree.
         *
         * Parameters:
         * selection - {<Jx.Selection>} the new selection object to use
         *
         * Returns:
         * {<Jx.Tree.Folder>} a reference to this for chaining
         */
        setSelection: function(selection) {
            this.parent(selection);
            return this;
        },
        
        isEnabled: function(){
            return this.options.enabled;
        },
        
        isOpen: function(){
            return this.options.open;
        },
        
        setDirty: function(state) {
          this.dirty = state;
          if (this.owner && this.owner.setDirty) {
              this.owner.setDirty(state);
          }
        },
        
        /**
         * Method: getLabel
         * Get the label associated with a TreeItem
         *
         * Returns:
         * {String} the name
         */
        getLabel: function() {
            return this.options.label;
        },
    
        /**
         * Method: setLabel
         * set the label of a tree item
         */
        setLabel: function(label) {
            this.options.label = label;
            if (this.domLabel) {
                this.domLabel.set('html',this.getText(label));
                this.setDirty(true);
            }
        },
    
        setImage: function(url, imageClass) {
            if (this.domIcon && url !== undefined && url !== null ) {
                this.options.image = url;
                this.domIcon.setStyle('backgroundImage', 'url('+this.options.image+')');
                this.setDirty(true);
            }
            if (this.domIcon && imageClass !== undefined && imageClass !== null) {
                this.domIcon.removeClass(this.options.imageClass);
                this.options.imageClass = imageClass;
                this.domIcon.addClass(imageClass);
                this.setDirty(true);
            }
        },
        enable: function(state, force) {
            if (this.options.enabled != state || force) {
                this.options.enabled = state;
                if (this.options.enabled) {
                    this.domObj.removeClass('jxDisabled');
                    this.fireEvent('enabled', this);
                } else {
                    this.domObj.addClass('jxDisabled');
                    this.fireEvent('disabled', this);
                    if (this.selection) {
                        this.selection.unselect(document.id(this));
                    }
                }
            }
        },
    
        /**
         * Method: propertyChanged
         * A property of an object has changed, synchronize the state of the
         * TreeItem with the state of the object
         *
         * Parameters:
         * obj - {Object} the object whose state has changed
         */
        propertyChanged : function(obj) {
            this.options.enabled = obj.isEnabled();
            if (this.options.enabled) {
                this.domObj.removeClass('jxDisabled');
            } else {
                this.domObj.addClass('jxDisabled');
            }
        },
        
        /**
         * APIMethod: setBusy
         * set the busy state of the widget
         *
         * Parameters:
         * busy - {Boolean} true to set the widget as busy, false to set it as
         *    idle.
         */
        setBusy: function(state) {
          if (this.busy == state) {
            return;
          }
          this.busy = state;
          this.fireEvent('busy', this.busy);
          if (this.busy) {
            this.domImg.addClass(this.options.busyClass);
          } else {
            if (this.options.busyClass) {
              this.domImg.removeClass(this.options.busyClass);
            }
          }
        },
        
        changeText : function(lang) {
          this.parent();
          this.setLabel(this.options.label);
        }
        
    });
    
    if (base.global) {
        base.global.Tree.Folder = module.exports;
    }
});

/*
---

name: Jx.Tree.Item

description: An item in a tree.

license: MIT-style license.

requires:
 - Jx.Widget
 - Jx.Tree

optional:
 - More/Drag

provides: [Jx.Tree.Item]

images:
 - tree_hover.png

...
 */
// $Id$
/**
 * Class: Jx.Tree.Item
 *
 * Extends: <Jx.Widget>
 *
 * An item in a tree.  An item is a leaf node that has no children.
 *
 * Jx.Tree.Item supports selection via the click event.  The application
 * is responsible for changing the style of the selected item in the tree
 * and for tracking selection if that is important.
 *
 * Example:
 * (code)
 * (end)
 *
 * Events:
 * click - triggered when the tree item is clicked
 *
 * Implements:
 * Events - MooTools Class.Extras
 * Options - MooTools Class.Extras
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/tree/item", function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget");
        
    var item = module.exports = new Class ({
    
        Extends: Widget,
        Family: 'Jx.Tree.Item',
        selection: null,
        /**
         * Property: domObj
         * {HTMLElement} a reference to the HTML element that is the TreeItem
         * in the DOM
         */
        domObj : null,
        /**
         * Property: owner
         * {Object} the folder or tree that this item belongs to
         */
        owner: null,
        options: {
            /* Option: label
             * {String} the label to display for the TreeItem
             */
            label: '',
            /* Option: contextMenu
             * {<Jx.ContextMenu>} the context menu to trigger if there
             * is a right click on the node
             */
            contextMenu: null,
            /* Option: enabled
             * {Boolean} the initial state of the TreeItem.  If the
             * TreeItem is not enabled, it cannot be clicked.
             */
            enabled: true,
            selectable: true,
            /* Option: image
             * {String} URL to an image to use as the icon next to the
             * label of this TreeItem
             */
            image: null,
            /* Option: imageClass
             * {String} CSS class to apply to the image, useful for using CSS
             * sprites
             */
            imageClass: '',
            lastLeafClass: 'jxTreeLeafLast',
            template: '<li class="jxTreeContainer jxTreeLeaf"><img class="jxTreeImage" src="'+base.aPixel.src+'" alt="" title=""><a class="jxTreeItem" href="javascript:void(0);"><img class="jxTreeIcon" src="'+base.aPixel.src+'" alt="" title=""><span class="jxTreeLabel"></span></a></li>',
            busyMask: {
              message: null
            }
        },
        classes: {
            domObj: 'jxTreeContainer',
            domA: 'jxTreeItem',
            domImg: 'jxTreeImage',
            domIcon: 'jxTreeIcon',
            domLabel: 'jxTreeLabel'
        },
    
        /**
         * APIMethod: render
         * Create a new instance of Jx.TreeItem with the associated options
         */
        render : function() {
            this.parent();
    
            this.domObj = this.elements.jxTreeContainer;
            this.domObj.store('jxTreeItem', this);
            this.domA.store('jxTreeItem', this);
            if (this.options.contextMenu) {
              this.domA.store('jxContextMenu', this.options.contextMenu);
            }
            /* the target for jxPressed, jxSelected, jxHover classes */
            this.domObj.store('jxListTarget', this.domA);
    
            if (!this.options.selectable) {
                this.domObj.addClass('jxUnselectable');
            }
    
            if (this.options.id) {
                this.domObj.id = this.options.id;
            }
            if (!this.options.enabled) {
                this.domObj.addClass('jxDisabled');
            }
    
            if (this.options.image && this.domIcon) {
                this.domIcon.setStyle('backgroundImage', 'url('+this.options.image+')');
                if (this.options.imageClass) {
                    this.domIcon.addClass(this.options.imageClass);
                }
    
            }
    
            if (this.options.label && this.domLabel) {
                this.setLabel(this.options.label);
            }
    
            if (this.domA) {
                this.domA.addEvents({
                    drag: function(e) { e.stop(); }
                });
                if (typeof Drag != 'undefined') {
                    new Drag(this.domA, {
                        onStart: function() {this.stop();}
                    });
                }
            }
    
            if (this.options.enabled !== undefined && this.options.enabled !== null) {
                this.enable(this.options.enabled, true);
            }
        },
        
        setDirty: function(state) {
            this.dirty = state;
            if (state && this.owner && this.owner.setDirty) {
                this.owner.setDirty(state);
            }
        },
        
        /**
         * Method: finalize
         * Clean up the TreeItem and remove all DOM references
         */
        finalize: function() { this.destroy(); },
        /**
         * Method: finalizeItem
         * Clean up the TreeItem and remove all DOM references
         */
        cleanup: function() {
          this.domObj.eliminate('jxTreeItem');
          this.domA.eliminate('jxTreeItem');
          this.domA.eliminate('jxContextMenu');
          this.domObj.eliminate('jxListTarget');
          this.domObj.eliminate('jxListTargetItem');
          this.domA.removeEvents();
          this.owner = null;
          this.selection = null;
          this.parent();
        },
        /**
         * Method: update
         * Update the CSS of the TreeItem's DOM element in case it has changed
         * position
         *
         * Parameters:
         * isLast - {Boolean} is the item the last one or not?
         */
        update : function(isLast) {
            if (isLast) {
                this.domObj.addClass(this.options.lastLeafClass);
            } else {
                this.domObj.removeClass(this.options.lastLeafClass);
            }
        },
        
        /**
         * Method: select
         * Select a tree node.
         */
        select: function() {
            if (this.selection && this.options.enabled) {
                this.selection.select(this.domA);
            }
        },
    
        /**
         * Method: getLabel
         * Get the label associated with a TreeItem
         *
         * Returns:
         * {String} the name
         */
        getLabel: function() {
            return this.options.label;
        },
    
        /**
         * Method: setLabel
         * set the label of a tree item
         */
        setLabel: function(label) {
            this.options.label = label;
            if (this.domLabel) {
                this.domLabel.set('html',this.getText(label));
                this.setDirty(true);
            }
        },
    
        setImage: function(url, imageClass) {
            if (this.domIcon && url !== undefined && url !== null ) {
                this.options.image = url;
                this.domIcon.setStyle('backgroundImage', 'url('+this.options.image+')');
                this.setDirty(true);
            }
            if (this.domIcon && imageClass !== undefined && imageClass !== null) {
                this.domIcon.removeClass(this.options.imageClass);
                this.options.imageClass = imageClass;
                this.domIcon.addClass(imageClass);
                this.setDirty(true);
            }
        },
        enable: function(state, force) {
            if (this.options.enabled != state || force) {
                this.options.enabled = state;
                if (this.options.enabled) {
                    this.domObj.removeClass('jxDisabled');
                    this.fireEvent('enabled', this);
                } else {
                    this.domObj.addClass('jxDisabled');
                    this.fireEvent('disabled', this);
                    if (this.selection) {
                        this.selection.unselect(document.id(this));
                    }
                }
            }
        },
    
        /**
         * Method: propertyChanged
         * A property of an object has changed, synchronize the state of the
         * TreeItem with the state of the object
         *
         * Parameters:
         * obj - {Object} the object whose state has changed
         */
        propertyChanged : function(obj) {
            this.options.enabled = obj.isEnabled();
            if (this.options.enabled) {
                this.domObj.removeClass('jxDisabled');
            } else {
                this.domObj.addClass('jxDisabled');
            }
        },
        setSelection: function(selection){
            this.selection = selection;
        },
        
        /**
         * Method: update
         * Update the CSS of the TreeItem's DOM element in case it has changed
         * position
         *
         * Parameters:
         * isLast - {Boolean} is the item the last one or not?
         */
        update : function(isLast) {
            if (isLast) {
                this.domObj.addClass(this.options.lastLeafClass);
            } else {
                this.domObj.removeClass(this.options.lastLeafClass);
            }
        },
        
        /**
         * APIMethod: setBusy
         * set the busy state of the widget
         *
         * Parameters:
         * busy - {Boolean} true to set the widget as busy, false to set it as
         *    idle.
         */
        setBusy: function(state) {
          if (this.busy == state) {
            return;
          }
          this.busy = state;
          this.fireEvent('busy', this.busy);
          if (this.busy) {
            this.domImg.addClass(this.options.busyClass);
          } else {
            if (this.options.busyClass) {
              this.domImg.removeClass(this.options.busyClass);
            }
          }
        },
        
        changeText : function(lang) {
          this.parent();
          this.setLabel(this.options.label);
        }
    });
    
    if (base.global) {
        base.global.Tree.Item = module.exports;
    }
    
});


/*
---

name: Jx.Store.Strategy.Progressive

description: Strategy based on Strategy.Paginate but loads data progressively without removing old or curent data from the store.

license: MIT-style license.

requires:
 - Jx.Store.Strategy.Paginate

provides: [Jx.Store.Strategy.Progressive]

...
 */
/**
 * Class: Jx.Store.Strategy.Progressive
 *
 * Extends: <Jx.Store.Strategy.Paginate>
 *
 * Store strategy for progressively obtaining results in a store. You can
 * continually call nextPage() to get the next page and the store will retain
 * all current data. You can set a maximum number of records the store should
 * hold and whether it should dropRecords when that max is hit.
 *
 * License:
 * Copyright (c) 2010, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */

define("jx/store/strategy/progresive", function(require, exports, module){
    
    var base = require("../../../base"),
        Paginate = require("./paginate");
        
    var progressive = module.exports = new Class({
    
        Extends: Paginate,
        Family: "Jx.Store.Strategy.Progressive",
        
        name: 'progressive',
        
        options: {
            /**
             * Option: maxRecords
             * The maximum number of records we want in the store at any one time.
             */
            maxRecords: 1000,
            /**
             * Option: dropRecords
             * Whether the strategy should drop records when the maxRecords limit 
             * is reached. if this is false then maxRecords is ignored and data is
             * always added to the bottom of the store. 
             */
            dropRecords: true
        },
        /**
         * Property: startingPage
         */
        startingPage: 0,
        /**
         * Property: maxPages
         */
        maxPages: null,
        /**
         * Property: loadedPages
         */
        loadedPages: 0,
        /**
         * Property: loadAt
         * Options are 'top' or 'bottom'. Defaults to 'bottom'.
         */
        loadAt: 'bottom',
        
        /**
         * Method: init
         * initialize this strategy
         */
        init: function () {
            this.parent();
            if (this.options.dropPages) {
                this.maxPages = Math.ceil(this.options.maxRecords/this.itemsPerPage);
            }
        },
        
        /**
         * Method: loadStore
         * Used to assist in the loading of data into the store. This is 
         * called as a response to the protocol finishing.
         * 
         *  Parameters:
         *  resp - the response object
         */
        loadStore: function (resp) {
            this.store.protocol.removeEvent('dataLoaded', this.bound.loadStore);
            if (resp.success()) {
                if (resp.meta !== undefined && resp.meta !== null) {
                    this.parseMetaData(resp.meta);
                }
                this.loadData(resp.data);
            } else {
                this.store.fireEvent('storeDataLoadFailed', this.store);
            }
        },
        
        /**
         * Method: loadData
         * This method does the actual work of loading data to the store. It is
         * called when either the protocol finishes or setPage() has the data and
         * it's not expired.
         * 
         * Parameters:
         * data - the data to load into the store.
         */
        loadData: function (data) {
            this.store.loaded = false;
            this.store.addRecords(data, this.loadAt);
            this.store.loaded = true;
            this.loadedPages++;
            this.store.fireEvent('storeDataLoaded',this.store);
        },
        
        /**
         * APIMethod: nextPage
         * Allows a caller (i.e. a paging toolbar) to load more data to the end of 
         * the store
         * 
         * Parameters:
         * params - a hash of parameters to pass to the request if needed.
         */
        nextPage: function (params) {
            if (params === undefined || params === null) {
                params = {};
            }
            if (this.options.dropRecords && this.totalPages > this.startingPage + this.loadedPages) {
                this.loadAt = 'bottom';
                if (this.loadedPages >= this.maxPages) {
                    //drop records before getting more
                    this.startingPage++;
                    this.store.removeRecords(0,this.itemsPerPage - 1);
                    this.loadedPages--;
                }
            }
            this.page = this.startingPage + this.loadedPages + 1;
            this.load(Object.merge({},this.params, params));
        },
        /**
         * APIMethod: previousPage
         * Allows a caller to move back to the previous page.
         *
         * Parameters:
         * params - a hash of parameters to pass to the request if needed.
         */
        previousPage: function (params) {
            //if we're not dropping pages there's nothing to do
            if (!this.options.dropRecords) {
                return;
            }
            
            if (params === undefined || params === null) {
                params = {};
            }
            if (this.startingPage > 0) {
                this.loadAt = 'top';
                if (this.loadedPages >= this.maxPages) {
                    //drop off end before loading previous pages
                    this.startingPage--;
                    this.store.removeRecords(this.options.maxRecords - this.itemsPerPage, this.options.maxRecords);
                    this.loadedPages--;
                }
                this.page = this.startingPage;
                this.load(Object.merge({},this.params, params));
            }
        }
    });
    
    if (base.global) {
        base.global.Store.Strategy.Progressive = module.exports;
    }
    
});

/*
---

name: Jx.Adaptor.Tree

description: Base class for all adaptors that fill Jx.Tree widgets. Also acts as the namespace for other Jx.Tree adaptors.

license: MIT-style license.

requires:
 - Jx.Adaptor
 - Jx.Tree.Folder
 - Jx.Tree.item
 - Jx.Store.Strategy.Progressive

provides: [Jx.Adaptor.Tree]

...
 */
/**
 * Class: Jx.Adaptor.Tree
 * This base class is used to change a store (a flat list of records) into the
 * data structure needed for a Jx.Tree. It will have 2 subclasses:
 * <Jx.Adapter.Tree.Mptt> and <Jx.Adapter.Tree.Parent>.
 *
 * Copyright 2010 by Jonathan Bomgardner
 * License: mit-style
 */

define('jx/adaptor/tree',function(require,exports,module){

    var base = require("../../base"),
        Adaptor = require("../adaptor"),
        Folder = require("../tree/folder"),
        Item = require("../tree/item"),
        Progressive = require("../store/strategy/progressive");
        
    var tree = module.exports = new Class({

        Extends: Jx.Adaptor,
        Family: 'Jx.Adaptor.Tree',

        Binds: ['fill','checkFolder'],

        options: {
            /**
             * Option: monitorFolders
             * Determines if this adapter should use monitor the TreeFolder items in
             * order to request any items they should contain if they are empty.
             */
            monitorFolders: false,
            /**
             * Option: startingNodeKey
             * The store primary key to use as the node that we're requesting.
             * Initially set to -1 to indicate that we're request the first set of
             * data
             */
            startingNodeKey: -1,
            /**
             * Option: folderOptions
             * A Hash containing the options for <Jx.TreeFolder>. Defaults to null.
             */
            folderOptions: null,
            /**
             * Option: itemOptions
             * A Hash containing the options for <Jx.TreeItem>. Defaults to null.
             */
            itemOptions: null
        },
        /**
         * Property: folders
         * A Hash containing all of the <Jx.TreeFolders> in this tree.
         */
        folders: null,
        /**
         * Property: currentRecord
         * An integer indicating the last position we were at in the store. Used to
         * allow the adaptor to pick up rendering items after we request additional
         * data.
         */
        currentRecord: -1,
        init: function() {
          this.folders = {};
          this.parent();
        },
        /**
         * APIMethod: attach
         * Attaches this adaptor to a specific tree instance.
         *
         * Parameters:
         * tree - an instance of <Jx.Tree>
         */
        attach: function (tree) {
            this.parent(tree);
    
            this.tree = tree;
    
            if (this.options.monitorFolders) {
                this.strategy = this.store.getStrategy('progressive');
    
                if (this.strategy === undefined || this.strategy === null) {
                    this.strategy = new Progressive({
                        dropRecords: false,
                        getPaginationParams: function () { return {}; }
                    });
                    this.store.addStrategy(this.strategy);
                } else {
                    this.strategy.options.dropRecords = false;
                    this.strategy.options.getPaginationParams = function () { return {}; };
                }
    
            }
    
            this.store.addEvent('storeDataLoaded', this.fill);
    
    
        },
        /**
         * APIMethod: detach
         * removes this adaptor from the current tree.
         */
        detach: function () {
          this.parent();
          this.store.removeEvent('storeDataLoaded', this.fill);
        },
        /**
         * APIMethod: firstLoad
         * Method used to start the first store load.
         */
        firstLoad: function () {
          //initial store load
          this.busy = 'tree';
          this.tree.setBusy(true);
            this.store.load({
                node: this.options.startingNodeKey
            });
        },
    
        /**
         * APIMethod: fill
         * This function will start at this.currentRecord and add the remaining
         * items to the tree.
         */
        fill: function () {
          var i,
              template,
              item,
              p,
              folder,
              options = this.options;
    
          if (this.busy == 'tree') {
            this.tree.setBusy(false);
            this.busy = 'none';
          } else if (this.busy == 'folder') {
            this.busyFolder.setBusy(false);
            this.busy = 'none';
          }
            var l = this.store.count() - 1;
            for (i = this.currentRecord + 1; i <= l; i++) {
                template = this.store.fillTemplate(i,options.template,this.columnsNeeded);
    
                if (this.hasChildren(i)) {
                    //add as folder
                    item = new Folder(Object.merge({},options.folderOptions, {
                        label: template
                    }));
    
                    if (options.monitorFolders) {
                      item.addEvent('disclosed', this.checkFolder);
                    }
    
                    this.folders[i] = item;
                } else {
                    //add as item
                    item = new Item(Object.merge({},options.itemOptions, {
                        label: template
                    }));
                }
                document.id(item).store('index', i).store('jxAdaptor', this);
                //check for a parent
                if (this.hasParent(i)) {
                    //add as child of parent
                    p = this.getParentIndex(i);
                    folder = this.folders[p];
                    folder.add(item);
                } else {
                    //otherwise add to the tree itself
                    this.tree.add(item);
                }
            }
            this.currentRecord = l;
        },
        /**
         * Method: checkFolder
         * Called by the disclose event of the tree to determine if we need to
         * request additional items for a branch of the tree.
         */
        checkFolder: function (folder) {
            var items = folder.items(),
                index,
                node;
            if (items === undefined || items === null || items.length === 0) {
                //get items via the store
                index = document.id(folder).retrieve('index');
                node = this.store.get('primaryKey', index);
                this.busyFolder = folder;
                this.busyFolder.setBusy(true);
                this.busy = 'folder';
                this.store.load({
                    node: node
                });
            }
        },
        /**
         * Method: hasChildren
         * Virtual method to be overridden by sublcasses. Determines if a specific
         * node has any children.
         */
        hasChildren: function(){},
        /**
         * Method: hasParent
         * Virtual method to be overridden by sublcasses. Determines if a specific
         * node has a parent node.
         */
        hasParent: function(){},
        /**
         * Method: getParentIndex
         * Virtual method to be overridden by sublcasses. Determines the store index
         * of the parent node.
         */
        getParentIndex: function(){}
    });
    
    if (base.global) {
        base.global.Adaptor.Tree = module.exports;
    }
    
});

/*
---

name: Jx.Adaptor.Tree.Object

description: Fills a Jx.Tree instance from an object based on the children property

license: MIT-style license.

requires:
 - Jx.Adaptor.Tree
 - Jx.Tree.Folder
 - Jx.Tree.Item

provides: [Jx.Adaptor.Tree.Object]


...
 */
/**
 * Class: Jx.Adapter.Tree.Object
 * This class adapts a table adhering to the classic Parent-style "tree table".
 *
 * This adaptor does not use a store. Instead, it depends on a basic object
 * where each entry has a "children" property that contains it's children.
 * The object would look like:
 *
 * (code)
 * [{
 *  label: <label>,
 *  icon: <image>,
 *  children: [{},{},{}]
 *  },...]
 * (end)
 *
 * In order to get the data, simply pass in a configured Jx.Store.Protocol subclass
 * that it can use to acces the data.
 * 
 * Copyright 2010 by Jonathan Bomgardner
 * License: mit-style
 */

define("jx/adaptor/tree/object",function(require, exports, module){
    
    var base = require("../../../base"),
        Folder = require("../../tree/folder"),
        Item = require("../../tree/item"),
        Plugin = require("../../plugin");
        
    var treeObject = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Adaptor.Tree.Object',
        
        options: {
            /**
             * Option: protocol
             * A <Jx.Store.Protocol> subclass to use in accessing the data
             * for this adaptor
             */
            protocol: null,
            /**
             * Option: folderOptions
             * A Hash containing the options for <Jx.TreeFolder>. Defaults to null.
             */
            folderOptions: {
                open: false    
            },
            /**
             * Option: itemOptions
             * A Hash containing the options for <Jx.TreeItem>. Defaults to null.
             */
            itemOptions: {
                active : false
            },
            /*
             * Option: labelProperty
             *	configure the property of the label in the objects of the data. 
             * Defaults to 'label' for be backward compatible.
                */
            labelProperty: 'label'
        },
        
        init: function(){
            this.parent();
            
            this.bound.fill = this.fill.bind(this);
            
        },
        
        fill: function(resp){
            this.options.protocol.removeEvent('dataLoaded', this.bound.fill);
            if (resp.success()) {
                this.tree.empty();
                var items = resp.data;
                for (var j = 0; j < items.length; j++) {
                    this.makeItems(items[j], this.tree);
                }
            } 
        },
        
        makeItems: function(node, tree){
            if(node.children != undefined){
                var folder = new Folder(Object.merge({},this.options.folderOptions,{
                    label: node[this.options.labelProperty],
                    image: node.icon,
                    attributes: node.attributes
                }));
    
                tree.add(folder);
                
                for (var j = 0; j < node.children.length; j++) {
                    this.makeItems(node.children[j], folder);
                }
                            
            }else {
                var item = new Item(Object.merge({},this.options.itemOptions,{
                    label: node[this.options.labelProperty],
                    image: node.icon,
                    attributes: node.attributes
                }));
    
                tree.add(item);
            }
        },
        
        load: function(params){
            this.options.protocol.addEvent('dataLoaded', this.bound.fill);
            var opts = {};
            if (params !== undefined && params !== null) {
                opts.data = params;
            } else {
                opts.data = {};
            }
            opts.data.page = 0;
            opts.data.itemsPerPage = -1;
            this.options.protocol.read(opts);
        },
        
        attach: function(tree){
            this.tree = tree;
            this.parent(tree);
        },
        
        detach: function(){
            this.tree = null;
            this.parent();
        }
        
    });
    
    if (base.global) {
        base.global.Adaptor.Tree.Object = module.exports;
    }
    
});

/*
---

name: Jx.Field.TreeCombo

description: is a Combo that show a Jx.Tree 

license: MIT-style license.

requires:
 - Jx.Store.Protocol.Ajax
 - Jx.Tree
 - Jx.Adaptor.Tree.Object
 - Jx.Button.Flyout
 - Jx.Field

provides: [Jx.Field.TreeCombo]

...
 */
// $Id$
/**
 * Class: Jx.Field.TreeCombo
 *
 * A Combo that shows a Jx.Tree to select any Jx.TreeFolder or Jx.TreeItem for
 * the Combo field. Items of the tree are populated from an Ajax Request to the
 * supplied url option.
 *
 * Example:
 * (code)
 * new Jx.Field.TreeCombo({
 *   url: '../common/menu.htm',
 *   label:'ComboBox',
 *   name:'ComboBox'
 * })
 * (end)
 *
 * Extends:
 * <Jx.Field>
 *
 * Author: Ing. Axel Mendoza Pupo.
 *
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/treecombo", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        AjaxProtocol = require("../data/protocol/ajax"),
        JSONParser = require("../data/parser/json"),
        TreeObjectAdaptor = require("../adaptor/tree/object"),
        Tree = require("../tree"),
        Folder = require("../tree/folder"),
        Flyout = require("../button/flyout"),
        Panel = require("../panel");
        
    var treeCombo = module.exports = new Class({
    
        Extends: Field,
        Family: 'Jx.Field.Combo',    
        pluginNamespace: 'TreeCombo',
    
        options: {
            buttonTemplate: '<a class="jxButtonContainer jxButton" href="javascript:void(0);"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>',
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputWrapper"><input type="text" class="jxInputText"  name="{name}"><span class="jxInputRevealer"></span></span><span class="jxInputTag"></span></span>',
            hiddenValue: null,
            protocol: null,
            url: null,
            treeOptions: {}
        },
    
        type: 'Text',
    
        
    
        /**
         * APIMethod: render
         * create a new instance of Jx.Field.Combo
         */
        render: function() {
            this.classes = Object.merge({},this.classes,{
                wrapper: 'jxInputWrapper',
                revealer: 'jxInputRevealer',
                icon: 'jxInputIcon'
            });
            this.parent();
    
            if (this.options.protocol === null || this.options.protocol === undefined) {
                //create Ajax protocol as default with url
                this.protocol = new AjaxProtocol({
                    urls: {
                        read: this.options.url
                    },
                    parser: JSONParser()
                });
            } else {
                this.protocol = this.options.protocol;
            }
                
            this.adaptor = new TreeObjectAdaptor({
                protocol: this.protocol
            });
            
            this.treeView = new Tree(Object.merge({},this.options.treeOptions,{
                plugins: [this.adaptor],
                selectionFunction: function(el, e){
                    
                    var item = document.id(el).retrieve('jxListTargetItem') || el,
                        flag = !item.hasClass('jxUnselectable');
                        
                    var jx = base.getWidget(el);
                    if (instanceOf(jx, Folder)) {
                        if (e.target.hasClass('jxTreeImage') && flag) {
                            flag = false;
                        } 
                    }
                    return flag;
                }
            }));
    
            this.button = new Flyout({
                template: this.options.buttonTemplate,
                imageClass: 'jxInputRevealerIcon',
                positionElement: this.field,
                content: new Panel({
                    width: 260,
                    height: 240,
                    collapse: false,
                    hideTitle: true,
                    content: this.treeView
                })
            }).addTo(this.revealer);
    
            this.treeView.addEvent('select',function(jx){
                this.button.hide();
                this.setValue(jx.getLabel());
            }.bind(this));
    
            this.button.addEvent('click', function(e) {
    
                if (!button.options.enabled) {
                    return;
                }
                this.contentContainer.setStyle('visibility','hidden');
                this.contentContainer.setStyle('display','block');
                document.id(document.body).adopt(this.contentContainer);
                /* we have to size the container for IE to render the chrome correctly
                 * but just in the menu/sub menu case - there is some horrible peekaboo
                 * bug in IE related to ULs that we just couldn't figure out
                 */
    
                this.contentContainer.setContentBoxSize(this.subDomObj.getMarginBoxSize());
    
                this.showChrome(this.contentContainer);
    
                this.position(this.contentContainer, that.field, {
                    horizontal: ['left left', 'right right'],
                    vertical: ['bottom top', 'top bottom'],
                    offsets: this.chromeOffsets
                });
    
                this.contentContainer.setStyle('visibility','');
    
                document.addEvent('mousedown', this.bound.hide);
                document.addEvent('keyup', this.bound.keypress);
    
            }.bind(this));
            
            //load the data
            this.adaptor.load();
        },
    
        setValue: function(value) {
            this.field.set('value', value);
        },
        
        /**
         * APIMethod: empty
         * remove all values from the combo
         */
        empty: function() {
            this.setValue('');
            this.treeView.empty();
        },
        
        load: function(){
            this.empty();
            this.adaptor.load();
        }
    });
    
    if (base.global) {
        base.global.Field.TreeCombo = module.exports;
    }
    
});

/*
---

name: Jx.Field.Hidden

description: Represents a hidden input

license: MIT-style license.

requires:
 - Jx.Field

provides: [Jx.Field.Hidden]

...
 */
// $Id$
/**
 * Class: Jx.Field.Hidden
 *
 * Extends: <Jx.Field>
 *
 * This class represents a hidden input field.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/hidden", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field");
        
    var hidden = module.exports = new Class({

        Extends: Field,
        Family: "Jx.Field.Hidden",
    
        options: {
            /**
             * Option: template
             * The template used to render this field
             */
            template: '<span class="jxInputContainer"><input class="jxInputHidden" type="hidden" name="{name}"/></span>'
        },
        /**
         * Property: type
         * The type of this field
         */
        type: 'Hidden'
    
    });

    if (base.global) {
        base.global.Field.Hidden = module.exports;
    }
    
});





/*
---

name: Jx.Field.File

description: Represents a file input w/upload and progress tracking capabilities (requires APC for progress)

license: MIT-style license.

requires:
 - Jx.Field.Text
 - Jx.Button
 - Core/Request.JSON
 - Jx.Field.Hidden
 - Jx.Form

provides: [Jx.Field.File]

css:
 - file


...
 */
/**
 * Class: Jx.Field.File
 *
 * Extends: <Jx.Field>
 *
 * This class is designed to work with an iFrame and APC upload progress.
 * APC is a php specific technology but any server side implementation that
 * works in the same manner should work. You can then wire this class to the
 * progress bar class to show progress.
 *
 * The other option is to not use progress tracking and just use the base
 * upload which works through a hidden iFrame. In order to use this with Jx.Form
 * you'll need to add it normally but keep a reference to it. When you call
 * Jx.Form.getValues() it will not return any file information. You can then
 * call the Jx.Field.File.upload() method for each file input directly and
 * then submit the rest of the form via ajax.
 *
 * Locale Keys:
 * - file.browseLabel
 * 
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/file", function(require, exports, module){
    
    var base = require("../../base"),
        Field = require("../field"),
        Text = require("./text"),
        Button = require("../button"),
        Form = require("../form"),
        Hidden = require("./hidden");
        
    var file = module.exports = new Class({

        Extends: Field,
        Family: 'Jx.Field.File',
    
        options: {
            /**
             * Option: template
             * The template used to render the field
             */
            template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><div class="jxFileInputs"><input class="jxInputFile" type="file" name="{name}" /></div><span class="jxInputTag"></span></span>',
            /**
             * Option: autoUpload
             * Whether to upload the file immediatelly upon selection
             */
            autoUpload: false,
            /**
             * Option: Progress
             * Whether to use the APC, or similar, progress method.
             */
            progress: false,
            /**
             * Option: progressIDUrl
             * The url to call in order to get the ID, or key, to use
             * with the APC upload process
             */
            progressIDUrl: '',
            /**
             * Option: progressName
             * The name to give the field that holds the generated progress ID retrieved
             * from the server. Defaults to 'APC_UPLOAD_PROGRESS' which is the default
             * for APC.
             */
            progressName: 'APC_UPLOAD_PROGRESS',
            /**
             * Option: progressId
             * The id to give the form element that holds the generated progress ID
             * retrieved from the server. Defaults to 'progress_key'.
             */
            progressId: 'progress_key',
            /**
             * Option: handlerUrl
             * The url to send the file to.
             */
            handlerUrl: '',
            /**
             * Option: progressUrl
             * The url used to retrieve the upload prgress of the file.
             */
            progressUrl: '',
            /**
             * Option: debug
             * Defaults to false. If set to true it will prevent the hidden form
             * and IFrame from being destroyed at the end of the upload so it can be
             * inspected during development
             */
            debug: false,
            /**
             * Option: mode
             * determines whether this file field acts in single upload mode or
             * multiple file upload mode. The multiple upload mode was done to work with
             * Jx.Panel.FileUpload. When in multiple mode, this field will remove the actual
             * file control after a file is selected, fires an event to signify the selection but will
             * hold on to the files until told to upload them. Obviously 'multiple' mode isn't designed
             * to be used when the control is outside of the Upload Panel (unless the user designs
             * their own upload panel around it).
             */
            mode: 'single'
    
        },
        /**
         * Property: type
         * The Field type used in rendering
         */
        type: 'File',
        /**
         * Property: forms
         * holds all form references when we're in multiple mode
         */
        forms: null,
    
        init: function () {
            this.parent();
    
            this.forms = {};
            //create the iframe
            //we use the same iFrame for each so we don't have to recreate it each time
            this.isIFrameSetup = true;
            this.iframe = new Element('iframe', {
              name: this.generateId(),
              styles: {
                'display':'none',
                'visibility':'hidden'
              }
            });
            // this.iframe = new IFrame(null, {
            //     styles: {
            //         'display':'none',
            //         'visibility':'hidden'
            //     },
            //     name : this.generateId()
            // });
            this.iframe.inject(document.body);
            this.iframe.addEvent('load', this.processIFrameUpload.bind(this));
    
        },
    
        /**
         * APIMethod: render
         * renders the file input
         */
        render: function () {
            this.parent();
    
            //add a unique ID if no id is defined
            if (this.options.id === undefined || this.options.id === null) {
                this.field.set('id', this.generateId());
            }
    
            //now, create the fake inputs
    
            this.fake = new Element('div', {
                'class' : 'jxFileFake'
            });
            this.text = new Text({
                template : '<span class="jxInputContainer"><input class="jxInputText" type="text" /></span>'
            });
            this.browseButton = new Button({
                label: this.getText({set:'Jx',key:'file',value:'browseLabel'})
            });
    
            this.fake.adopt(this.text, this.browseButton);
            this.field.grab(this.fake, 'after');
    
            this.field.addEvents({
                change : this.copyValue.bind(this),
                //mouseout : this.copyValue.bind(this),
                mouseenter : this.mouseEnter.bind(this),
                mouseleave : this.mouseLeave.bind(this)
            });
    
        },
        /**
         * Method: copyValue
         * Called when the value in the actual file input changes and when
         * the mouse moves out of it to copy the value into the "fake" text box.
         */
        copyValue: function () {
            if (this.options.mode=='single' && this.field.value !== '' && (this.text.field.value !== this.field.value)) {
                this.text.field.value = this.field.value;
                this.fireEvent('fileSelected', this);
                this.forms[this.field.value] = this.prepForm();
                if (this.options.autoUpload) {
                    this.uploadSingle();
                }
            } else if (this.options.mode=='multiple') {
                var filename = this.field.value;
                var form = this.prepForm();
                this.forms[filename] = form;
                this.text.setValue('');
                //fire the selected event.
                this.fireEvent('fileSelected', filename);
            }
        },
        /**
         * Method: mouseEnter
         * Called when the mouse enters the actual file input to make the
         * fake button highlight.
         */
        mouseEnter: function () {
            this.browseButton.domA.addClass('jxButtonPressed');
        },
        /**
         * Method: mouseLeave
         * called when the mouse leaves the actual file input to turn off
         * the highlight of the fake button.
         */
        mouseLeave: function () {
            this.browseButton.domA.removeClass('jxButtonPressed');
        },
    
        prepForm: function () {
            //load in the form
            var form = new Form({
                action : this.options.handlerUrl,
                name : 'jxUploadForm',
                fileUpload: true
            });
    
            //move the form input into it (cloneNode)
            var parent = document.id(this.field.getParent());
            var sibling = document.id(this.field).getPrevious();
            var clone = this.field.clone().cloneEvents(this.field);
            document.id(form).grab(this.field);
            // tried clone.replaces(this.field) but it didn't seem to work
            if (sibling) {
              clone.inject(sibling, 'after');
            } else if (parent) {
                clone.inject(parent, 'top');
            }
            this.field = clone;
    
            this.mouseLeave();
    
            return form;
        },
    
        upload: function (externalForm) {
            //do we have files to upload?
            if (Object.getLength(this.forms) > 0) {
                var keys = Object.keys(this.forms);
                this.currentKey = keys[0];
                var form = this.forms[this.currentKey];
                delete this.forms[this.currentKey];
                if (externalForm !== undefined && externalForm !== null && Object.getLength(this.forms) === 0) {
                    var fields = externalForm.fields;
                    Object.each(fields, function(field){
                        if (!(field instanceof Jx.Field.File)) {
                            document.id(field).clone().inject(form);
                        }
                    }.bind(this));
                }
                this.uploadSingle(form);
            } else {
                //fire finished event...
                this.fireEvent('allUploadsComplete', this);
            }
        },
        /**
         * APIMethod: uploadSingle
         * Call this to upload the file to the server
         */
        uploadSingle: function (form) {
            this.form = (form !== undefined && form !== null) ? form : this.prepForm();
    
            this.fireEvent('fileUploadBegin', [this.currentKey, this]);
    
            this.text.setValue('');
    
            document.id(this.form).set('target', this.iframe.get('name')).setStyles({
                visibility: 'hidden',
                display: 'none'
            }).inject(document.body);
    
            //if polling the server we need an APC_UPLOAD_PROGRESS id.
            //get it from the server.
            if (this.options.progress) {
                var req = new Request.JSON({
                    url: this.options.progressIDUrl,
                    method: 'get',
                    onSuccess: this.submitUpload.bind(this)
                });
                req.send();
            } else {
                this.submitUpload();
            }
        },
        /**
         * Method: submitUpload
         * Called either after upload() or as a result of a successful call
         * to get a progress ID.
         *
         * Parameters:
         * data - Optional. The data returned from the call for a progress ID.
         */
        submitUpload: function (data) {
            //check for ID in data
            if (data !== undefined && data !== null && data.success && 
                data.id !== undefined && data.id !== null) {
                this.progressID = data.id;
                //if have id, create hidden progress field
                var id = new Hidden({
                    name : this.options.progressName,
                    id : this.options.progressId,
                    value : this.progressID
                });
                id.addTo(this.form, 'top');
            }
    
            //submit the form
            document.id(this.form).submit();
            //begin polling if needed
            if (this.options.progress && this.progressID !== undefined && this.progressID !== null) {
                this.pollUpload();
            }
        },
        /**
         * Method: pollUpload
         * polls the server for upload progress information
         */
        pollUpload: function () {
            var d = { id : this.progressID };
            var r = new Request.JSON({
                data: d,
                url : this.options.progressUrl,
                method : 'get',
                onSuccess : this.processProgress.bind(this),
                onFailure : this.uploadFailure.bind(this)
            });
            r.send();
        },
    
        /**
         * Method: processProgress
         * process the data returned from the request
         *
         * Parameters:
         * data - The data from the request as an object.
         */
        processProgress: function (data) {
            if (data !== undefined && data !== null) {
                this.fireEvent('fileUploadProgress', [data, this.currentKey, this]);
                if (data.current < data.total) {
                    this.polling = true;
                    this.pollUpload();
                } else {
                    this.polling = false;
                }
            }
        },
        /**
         * Method: uploadFailure
         * called if there is a problem getting progress on the upload
         */
        uploadFailure: function (xhr) {
            this.fireEvent('fileUploadProgressError', [this, xhr]);
        },
        /**
         * Method: processIFrameUpload
         * Called if we are not using progress and the IFrame finished loading the
         * server response.
         */
        processIFrameUpload: function () {
            var iframeBody;
            //the body text should be a JSON structure
            //get the body
            if (this.isIFrameSetup) {
                if (this.iframe.contentDocument  && this.iframe.contentDocument.defaultView) {
                  iframeBody = this.iframe.contentDocument.defaultView.document.body.innerHTML;
                } else {
                  // seems to be needed for ie7
                  iframeBody = this.iframe.contentWindow.document.body.innerHTML;
                }
    
                var data = JSON.decode(iframeBody);
                if (data !== undefined && data !== null && 
                    data.success !== undefined && data.success !== null && 
                    data.success) {
                    this.done = true;
                    this.doneData = data;
                    this.uploadCleanUp();
                    this.fireEvent('fileUploadComplete', [data, this.currentKey, this]);
                } else {
                    this.fireEvent('fileUploadError', [data , this.currentKey, this]);
                }
    
                if (this.options.mode == 'multiple') {
                    this.upload();
                } else {
                    this.fireEvent('allUploadsComplete', this);
                }
            }
        },
        /**
         * Method: uploadCleanUp
         * Cleans up the hidden form and IFrame after a completed upload. Set
         * this.options.debug to true to keep this from happening
         */
        uploadCleanUp: function () {
            if (!this.options.debug) {
                this.form.destroy();
            }
        },
        /**
         * APIMethod: remove
         * Removes a file from the hash of forms to upload.
         *
         * Parameters:
         * filename - the filename indicating which file to remove.
         */
        remove: function (filename) {
            if (Object.keys(this.forms).contains(filename)) {
                delete this.forms[filename];
            }
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         * 		translations changed.
         */
        changeText: function (lang) {
            this.parent();
            if (this.browseButton !== undefined && this.browseButton !== null) {
                this.browseButton.setLabel( this.getText({set:'Jx',key:'file',value:'browseLabel'}) );
            }
        },
        
        /**
         * APIMethod: getFileInputs
         * Used to get an array of all of the basic file inputs. This is mainly 
         * here for use by Jx.Form to be able to suck in the file inputs
         * before a standard submit.
         * 
         */
        getFileInputs: function () {
            var inputs = [];
            Object.each(this.forms, function(form){
                var input = document.id(form).getElement('input[type=file]');
                inputs.push(input);
            },this);
            return inputs;
        }
    });
    
    if (base.global) {
        base.global.Field.File = module.exports;
    }
    
});

/*
---

name: Jx.Button.Color

description: A button that allows the user to select a color.

license: MIT-style license.

requires:
 - Jx.Button.Flyout
 - Jx.ColorPalette

provides: [Jx.Button.Color]

...
 */
// $Id$
/**
 * Class: Jx.Button.Color
 *
 * Extends: <Jx.Button.Flyout>
 *
 * A <Jx.ColorPalette> wrapped up in a Jx.Button.  The button includes a
 * preview of the currently selected color.  Clicking the button opens
 * the color panel.
 *
 * A color button is essentially a <Jx.Button.Flyout> where the content
 * of the flyout is a <Jx.ColorPalette>.  For performance, all color buttons
 * share an instance of <Jx.ColorPalette> which means only one button can be
 * open at a time.  This isn't a huge restriction as flyouts already close
 * each other when opened.
 *
 * Example:
 * (code)
 * var colorButton = new Jx.Button.Color({
 *     onChange: function(button) {
 *         console.log('color:' + button.options.color + ' alpha: ' +
 *                     button.options.alpha);
 *     }
 * });
 * (end)
 *
 * Events:
 * change - fired when the color is changed.
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/button/color', function(require, exports, module){

    var base = require("../../base"),
        Flyout = require("./flyout"),
        ColorPalette = require("../colorpalette");
    
    var color = module.exports = new Class({
        Extends: Flyout,
        Family: 'Jx.Button.Color',
    
        /**
         * Property: swatch
         * the color swatch element used to portray the currently selected
         * color
         */
        swatch: null,
    
        options: {
            /**
             * Option: color
             * a color to initialize the panel with, defaults to #000000
             * (black) if not specified.
             */
            color: '#000000',
            /**
             * Option: alpha
             * an alpha value to initialize the panel with, defaults to 1
             *  (opaque) if not specified.
             *
             */
            alpha: 100,
            /*
             * Option: template
             * the HTML template for the color button
             */
            template: '<span class="jxButtonContainer"><a class="jxButton jxButtonFlyout jxDiscloser"><span class="jxButtonContent"><span class="jxButtonSwatch"><span class="jxButtonSwatchColor"></span></span><span class="jxButtonLabel"></span></span></a></span>'
        },
    
        /**
         * Property: classes
         * {<Hash>} a hash of object properties to CSS class names used to
         * automatically extract references to important DOM elements when
         * processing a widget template.  This allows developers to provide custom
         * HTML structures without affecting the functionality of widgets.
         */
        classes: {
            domObj: 'jxButtonContainer',
            domA: 'jxButton',
            swatch: 'jxButtonSwatchColor',
            domLabel: 'jxButtonLabel'
        },
    
        /**
         * Method: render
         * creates a new color button.
         */
        render: function() {
            if (!color.ColorPalette) {
                color.ColorPalette = new ColorPalette(this.options);
            }
    
            /* we need to have an image to replace, but if a label is
               requested, there wouldn't normally be an image. */
            this.options.image = base.aPixel.src;
    
            /* now we can safely initialize */
            this.parent();
            this.updateSwatch();
    
            this.bound.changed = this.changed.bind(this);
            this.bound.hide = this.hide.bind(this);
        },
        cleanup: function() {
          this.bound.changed = false;
          this.bound.hide = false;
          this.parent();
        },
        /**
         * APIMethod: clicked
         * override <Jx.Button.Flyout> to use a singleton color palette.
         */
        clicked: function() {
            var cp = color.ColorPalette;
            if (cp.currentButton) {
                cp.currentButton.hide();
            }
            cp.currentButton = this;
            cp.addEvent('change', this.bound.changed);
            cp.addEvent('click', this.bound.hide);
            this.content.appendChild(cp.domObj);
            cp.domObj.setStyle('display', 'block');
            Flyout.prototype.clicked.apply(this, arguments);
            /* setting these before causes an update problem when clicking on
             * a second color button when another one is open - the color
             * wasn't updating properly
             */
    
            cp.options.color = this.options.color;
            cp.options.alpha = this.options.alpha/100;
            cp.updateSelected();
        },
    
        /**
         * APIMethod: hide
         * hide the color panel
         */
        hide: function() {
            var cp = color.ColorPalette;
            this.setActive(false);
            cp.removeEvent('change', this.bound.changed);
            cp.removeEvent('click', this.bound.hide);
            Flyout.prototype.hide.apply(this, arguments);
            cp.currentButton = null;
        },
    
        /**
         * APIMethod: setColor
         * set the color represented by this color panel
         *
         * Parameters:
         * color - {String} the new hex color value
         */
        setColor: function(color) {
            this.options.color = color;
            this.updateSwatch();
        },
    
        /**
         * APIMethod: setAlpha
         * set the alpha represented by this color panel
         *
         * Parameters:
         * alpha - {Integer} the new alpha value (between 0 and 100)
         */
        setAlpha: function(alpha) {
            this.options.alpha = alpha;
            this.updateSwatch();
        },
    
        /**
         * Method: changed
         * handle the color changing in the palette by updating the preview swatch
         * in the button and firing the change event.
         *
         * Parameters:
         * panel - <Jx.ColorPalette> the palette that changed.
         */
        changed: function(panel) {
            var changed = false;
            if (this.options.color != panel.options.color) {
                this.options.color = panel.options.color;
                changed = true;
            }
            if (this.options.alpha != panel.options.alpha * 100) {
                this.options.alpha = panel.options.alpha * 100;
                changed = true;
            }
            if (changed) {
                this.updateSwatch();
                this.fireEvent('change',this);
            }
        },
    
        /**
         * Method: updateSwatch
         * Update the swatch color for the current color
         */
        updateSwatch: function() {
            var styles = {'backgroundColor':this.options.color};
            if (this.options.alpha < 100) {
                styles.filter = 'Alpha(opacity='+(this.options.alpha)+')';
                styles.opacity = this.options.alpha / 100;
    
            } else {
                styles.opacity = 1;
                styles.filter = '';
            }
            this.swatch.setStyles(styles);
        }
    });

    if (base.global) {
        base.global.Button.Color = color;
    }

});

/*
---

name: Jx.Plugin.Field

description: Namespace for Jx.Field plugins

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.Field]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Field
 * Field plugin namespace
 *
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/field", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.Field = {};
    }
});

/*
---

name: Jx.Plugin.Field.Validator

description: Provides validation services for Jx.Field subclasses

license: MIT-style license.

requires:
 - Jx.Plugin.Field
 - More/Form.Validator
 - More/Form.Validator.Extras

provides: [Jx.Plugin.Field.Validator]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Field.Validator
 *
 * Extends: <Jx.Plugin>
 *
 * Field plugin for enforcing validation when a field is not used in a form.
 *
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner.
 * Parts inspired by mootools-more's Form.Validator class
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/field/validator", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Field = require("../../field");
        
    var validator = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Field.Validator",
        name: 'Field.Validator',
    
        options: {
            /**
             * Option: validators
             * An array that contains either a string that names the predefined
             * validator to use with its needed options or an object that defines
             * the options of an InputValidator (also with needed options) defined
             * like so:
             *
             * (code)
             * {
             *     validatorClass: 'name:with options',    //gets applied to the field
             *     validator: {                         //used to create the InputValidator
             *         name: 'validatorName',
             *         options: {
             *             errorMsg: 'error message',
             *             test: function(field,props){}
             *         }
             *     }
             * }
             * (end)
             */
            validators: [],
            /**
             * Option: validateOnBlur
             * Determines whether the plugin will validate the field on blur.
             * Defaults to true.
             */
            validateOnBlur: true,
            /**
             * Option: validateOnChange
             * Determines whether the plugin will validate the field on change.
             * Defaults to true.
             */
            validateOnChange: true
        },
        /**
         * Property: valid
         * tells whether this field passed validation or not.
         */
        valid: null,
        /**
         * Property: errors
         * array of errors found on this field
         */
        errors: null,
        validators : null,
        /**
         * APIMethod: init
         * construct a new instance of the plugin.  The plugin must be attached
         * to a Jx.Grid instance to be useful though.
         */
        init: function () {
            this.parent();
            this.errors = [];
            this.validators = {};
            this.bound.validate = this.validate.bind(this);
            this.bound.reset = this.reset.bind(this);
            this.bound.postRender = this.onPostRender.bind(this);
        },
        /**
         * APIMethod: attach
         * Sets up the plugin and connects it to the field
         */
        attach: function (field) {
            if (field === undefined || field === null || !(field instanceof Field)) {
                return;
            }
            this.field = field;
            if (this.field.options.required && !this.options.validators.contains('required')) {
                //would have used unshift() but reading tells me it may not work in IE.
                this.options.validators.reverse().push('required');
                this.options.validators.reverse();
            }
            
            if (this.options.validateOnBlur) {
                field.addEvent('blur', this.bound.validate);
            }
            
            if (this.options.validateOnChange) {
                field.addEvent('change', this.bound.validate);
            }
            
            field.addEvent('reset', this.bound.reset);
            
            if (field.ready) {
                this.onPostRender();
            } else {
                //add function for postRender
                field.addEvent('postRender',this.bound.postRender);
            }
        },
        /**
         * APIMethod: onPostRender
         * Event handler for adding stuff directly to the DOM objects after they are rendered.
         */
        onPostRender: function(){
            //add validation classes
            this.options.validators.each(function (v) {
                var t = typeOf(v);
                if (t === 'string') {
                    this.field.field.addClass(v);
                } else if (t === 'object') {
                    this.validators[v.validator.name] = new InputValidator(v.validator.name, v.validator.options);
                    this.field.field.addClass(v.validatorClass);
                }
            }, this);
            this.field.removeEvent('postRender',this.bound.postRender);
        },
        
        /**
         * APIMethod: detach
         */
        detach: function () {
            if (this.field) {
                this.field.removeEvent('blur', this.bound.validate);
                this.field.removeEvent('change', this.bound.validate);
                this.field.removeEvent('reset', this.bound.reset);
                this.field = null;
            }
            this.validators = null;
            this.bound.validate = null;
            this.bound.reset = null;
            this.bound.postRender = null;
            this.bound = null;
        },
    
        validate: function () {
            window.clearTimeout(this.timer);
            this.timer = this.validateField.delay(50, this);
        },
    
        validateField: function () {
            //loop through the validators
            this.valid = true;
            this.errors = [];
            this.options.validators.each(function (v) {
                var val = (typeOf(v) === 'string') ? Form.Validator.getValidator(v) : this.validators[v.validator.name];
                if (val) {
                    if (!val.test(this.field.field)) {
                        this.valid = false;
                        this.errors.push(val.getError(this.field.field));
                    }
                }
            }, this);
            if (!this.valid) {
                this.field.domObj.removeClass('jxFieldSuccess').addClass('jxFieldError');
                this.field.fireEvent('fieldValidationFailed', [this.field, this]);
            } else {
                this.field.domObj.removeClass('jxFieldError').addClass('jxFieldSuccess');
                this.field.fireEvent('fieldValidationPassed', [this.field, this]);
            }
            return this.valid;
        },
    
        isValid: function () {
            return this.validateField();
        },
    
        reset: function () {
            this.valid = null;
            this.errors = [];
            this.field.field.removeClass('jxFieldError').removeClass('jxFieldSuccess');
        },
        /**
         * APIMethod: getErrors
         * USe this method to retrieve all of the errors noted for this field.
         */
        getErrors: function () {
            return this.errors;
        }
    
    
    });

    if (base.global) {
        base.global.Plugin.Field.Validator = module.exports;
    }
});

/*
---

name: Jx.Field.Color

description: Represents an input field with a jx.button.color

license: MIT-style license.

requires:
 - Jx.Text
 - Jx.Button.Color
 - Jx.Form
 - Jx.Plugin.Field.Validator
 - Jx.ColorPalette

provides: [Jx.Field.Color]

...
 */
/**
 * Class: Jx.Field.Color
 *
 * Extends: <Jx.Field>
 *
 * This class provides a Jx.Field.Text in combination with a Jx.Button.Color
 * to have a Colorpicker with an input field.
 *
 * License:
 * Copyright (c) 2010, Paul Spener, Fred Warnock, Conrad Barthelmes
 *
 * This file is licensed under an MIT style license
 */
define("jx/field/color", function(require, exports, module){

    var base = require("../../base"),
        Field = require("../field"),
        ColorPalette = require("../colorpalette"),
        Flyout = require("../button/flyout"),
        Validator = require("../plugin/field/validator");
        
    var color = module.exports = new Class({
        Extends: Field,
        Family: "Jx.Field.Color",
        Binds: ['changed','hide','keyup','changeText'],
        type: 'Color',
        options: {
          buttonTemplate: '<a class="jxButtonContainer jxButton" href="javascript:void(0);"><img class="jxButtonIcon" src="'+base.aPixel.src+'"></a>',
          /**
           * Option: template
           * The template used to render this field
           */
          template: '<span class="jxInputContainer"><label class="jxInputLabel"></label><span class="jxInputWrapper"><input type="text" class="jxInputColor"  name="{name}"><img class="jxInputIcon" src="'+base.aPixel.src+'"><span class="jxInputRevealer"></span></span><span class="jxInputTag"></span></span>',
          /**
           * Option: showOnHover
           * {Boolean} show the color palette when hovering over the input, default 
           * is false
           */
          showOnHover: false,
          /**
           *  Option: showDelay
           *  set time in milliseconds when to show the color field on mouseenter
           */
          showDelay: 250,
          /**
           * Option: errorMsg
           * error message for the validator.
           */
          errorMsg: 'Invalid Web-Color',
          /**
           * Option: color
           * a color to initialize the field with, defaults to #000000
           * (black) if not specified.
           */
          color: '#000000'
    
        },
        button: null,
        validator: null,
        render: function() {
            this.classes = Object.merge(this.classes,{
              wrapper: 'jxInputWrapper',
              revealer: 'jxInputRevealer',
              icon: 'jxInputIcon'
            });
            this.parent();
    
            var self = this;
            if (!color.ColorPalette) {
                color.ColorPalette = new ColorPalette(this.options);
            }
            this.button = new Flyout({
                template: this.options.buttonTemplate,
                imageClass: 'jxInputRevealerIcon',
                positionElement: this.field,
                onBeforeOpen: function() {
                    if (color.ColorPalette.currentButton) {
                        color.ColorPalette.currentButton.hide();
                    }
                    color.ColorPalette.currentButton = this;
                    color.ColorPalette.addEvent('change', self.changed);
                    color.ColorPalette.addEvent('click', self.hide);
                    this.content.appendChild(color.ColorPalette.domObj);
                    color.ColorPalette.domObj.setStyle('display', 'block');
                },
                onOpen: function() {
                  /* setting these before causes an update problem when clicking on
                   * a second color button when another one is open - the color
                   * wasn't updating properly
                   */
                  color.ColorPalette.options.color = self.options.color;
                  color.ColorPalette.updateSelected();
                }
            }).addTo(this.revealer);
    
            this.validator = new Validator({
                validators: [{
                    validatorClass: 'colorHex',
                    validator: {
                        name: 'colorValidator',
                        options: {
                            validateOnChange: false,
                            errorMsg: self.options.errorMsg,
                            test: function(field,props) {
                                var c;
                                try {
                                    c = field.get('value').hexToRgb(true);
                                    if(c === null) return false;
                                    for(var i = 0; i < 3; i++) {
                                        if(c[i].toString() == 'NaN') {
                                            return false;
                                        }
                                    }
                                } catch (e) {
                                    return false;
                                }
                                c = c.rgbToHex().toUpperCase();
                                self.setColor(c);
                                return true;
                            }
                        }   
                    }
                }],
                validateOnBlur: true,
                validateOnChange: true
            });
            this.validator.attach(this);
            this.field.addEvent('keyup', this.onKeyUp.bind(this));
            if (this.options.showOnHover) {
                this.field.addEvent('mouseenter', function(ev) {
                    self.button.clicked.delay(self.options.showDelay, self.button);
                });
            }
            this.setValue(this.options.color);
            this.icon.setStyle('background-color', this.options.color);
            //this.addEvent('change', self.changed);
        },
        /*
         * Method: onKeyUp
         *
         * listens to the keyup event and validates the input for a hex color
         *
         */
        onKeyUp : function(ev) {
            var color = this.getValue();
            if (color.substring(0,1) == '#') {
                color = color.substring(1);
            }
            if (color.toLowerCase().match(/^[0-9a-f]{6}$/)) {
                this.options.color = '#' +color.toUpperCase();
                this.setColor(this.options.color);
            }
        },
        
        setColor: function(c) {
            this.options.color = c;
            this.setValue(c);
            this.icon.setStyle('background-color', c);
        },

        changed: function() {
            var c = color.ColorPalette.options.color;
            this.setColor(c);
            this.fireEvent('change', this);
        },

        hide: function() {
            this.button.setActive(false);
            color.ColorPalette.removeEvent('change', this.changed);
            color.ColorPalette.removeEvent('click', this.hide);
    
            this.button.hide();
            color.ColorPalette.currentButton = null;
        },
        
        changeText: function(lang) {
            this.parent();
        }
    });

    if (base.global) {
        base.global.Field.Color = module.exports;
    }
    
});

/*
---

name: Jx.Toolbar.Separator

description:  A helper class that represents a visual separator in a Jx.Toolbar.

license: MIT-style license.

requires:
 - Jx.Toolbar

provides: [Jx.Toolbar.Separator]

images:
 - toolbar_separator_h.png
 - toolbar_separator_v.png

...
 */
// $Id$
/**
 * Class: Jx.Toolbar.Separator
 *
 * Extends: <Jx.Object>
 *
 * A helper class that represents a visual separator in a <Jx.Toolbar>
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/toolbar/separator", function(require, exports, module){
    
    var base = require("../../base"),
        Widget = require("../widget");
        
    var separator = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Toolbar.Separator',
        /**
         * APIMethod: render
         * Create a new Jx.Toolbar.Separator
         */
        render: function() {
            this.domObj = new Element('li', {'class':'jxToolItem'});
            this.domSpan = new Element('span', {'class':'jxBarSeparator'});
            this.domObj.appendChild(this.domSpan);
        }
    });

    if (base.global) {
        base.global.Toolbar.Separator = module.exports;
    }
});

/*
---

name: Jx.Formatter.URI

description: Formats uris using the mootools-more URI extensions

license: MIT-style license.

requires:
 - More/String.Extras
 - Jx.Formatter
 - More/URI

provides: [Jx.Formatter.URI]

...
 */
// $Id$
/**
 * Class: Jx.Formatter.URI
 *
 * Extends: <Jx.Formatter>
 *
 * This class formats URIs using the mootools-more's
 * URI extensions. See the -more docs for details of
 * supported formats for parsing and formatting.
 * 
 * @url http://mootools.net/docs/more/Native/URI
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/uri", function(require, exports, module){
    
    var base = require("../../base"),
        Formatter = require("../formatter");
        
    var uri = module.exports = new Class({

        Extends: Formatter,
        Family: "Jx.Formatter.Uri",
    
        options: {
            /**
             * Option: format
             * The format to use. See the mootools-more URI options
             * to use within a {pattern}
             *   {string} will call the URI.toString() method
             */
            format: '<a href="{string}" target="_blank">{host}</a>'
        },
        /**
         * APIMethod: format
         * Does the work of formatting dates
         *
         * Parameters:
         * value - the text to format
         */
        format: function (value) {
          var u          = new URI(value),
              uriContent = {},
              pattern    = [],
              patternTmp = this.options.format.match(/\\?\{([^{}]+)\}/g);
    
          // remove bracktes
          patternTmp.each(function(e) {
            pattern.push(e.slice(1, e.length-1));
          });
    
          // build object that contains replacements
          for(var i = 0, j = pattern.length; i < j; i++) {
            switch(pattern[i]) {
              case 'string':
                uriContent[pattern[i]] = u.toString();
                break;
              default:
                uriContent[pattern[i]] = u.get(pattern[i]);
                break;
            }
          }
          return this.options.format.substitute(uriContent);
        }
    });
    
    if (base.global) {
        base.global.Formatter.URI = module.exports;
    }
    
});

/*
---

name: Jx.Formatter.Text

description: Formats strings by limiting to a max length

license: MIT-style license.

requires:
 - Jx.Formatter

provides: [Jx.Formatter.Text]

...
 */
// $Id: $
/**
 * Class: Jx.Formatter.Text
 *
 * Extends: <Jx.Formatter>
 *
 * This class formats strings by limiting them to a maximum length
 * and replacing the remainder with an ellipsis.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2010, Hughes Gauthier.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/text", function(require, exports, module){
    
    var base = require("../../base"),
        Formatter = require("../formatter");
        
    var text = module.exports = new Class({

    Extends: Formatter,
    Family: "Jx.Formatter.Text",
  
    options: {
      /**
       * Option: length
       * {Integer} default null, if set to an integer value greater than
       * 0 then the value will be truncated to length characters and
       * the remaining characters will be replaced by an ellipsis (...)
       */
      maxLength: null,
      /**
       * Option: ellipsis
       * {String} the text to use as the ellipsis when truncating a string
       * default is three periods (...)
       */
      ellipsis: '...'
    },
  
    format : function (value) {
      var text = '' + value,
          max = this.options.maxLength,
          ellipsis = this.options.ellipsis;
  
      if (max && text.length > max) {
        text = text.substr(0,max-ellipsis.length) + ellipsis;
      }
  
      return text;
    }
  });
    
    if (base.global) {
        base.global.Formatter.Text = module.exports;
    }
    
});

/*
---

name: Jx.Formatter.Phone

description: Formats phone numbers in US format including area code

license: MIT-style license.

requires:
 - Jx.Formatter


provides: [Jx.Formatter.Phone]

...
 */
// $Id$
/**
 * Class: Jx.Formatter.Phone
 *
 * Extends: <Jx.Formatter>
 *
 * Formats data as phone numbers. Currently only US-style phone numbers
 * are supported.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/phone", function(require, exports, module){
    
    var base = require("../../base"),
        Formatter = require("../formatter");
        
    var phone = module.exports = new Class({

        Extends: Formatter,
        family: "Jx.Formatter.Phone",
    
        options: {
            /**
             * Option: useParens
             * Whether to use parenthesis () around the area code.
             * Defaults to true
             */
            useParens: true,
            /**
             * Option: separator
             * The character to use as a separator in the phone number.
             * Defaults to a dash '-'.
             */
            separator: "-"
        },
        /**
         * APIMethod: format
         * Format the input as a phone number. This will strip all non-numeric
         * characters and apply the current default formatting
         *
         * Parameters:
         * value - the text to format
         */
        format : function (value) {
            //first strip any non-numeric characters
            var sep = this.options.separator;
            var v = '' + value;
            v = v.replace(/[^0-9]/g, '');
    
            //now check the length. For right now, we only do US phone numbers
            var ret = '';
            if (v.length === 11) {
                //do everything including the leading 1
                ret = v.charAt(0);
                v = v.substring(1);
            }
            if (v.length === 10) {
                //do the area code
                if (this.options.useParens) {
                    ret = ret + "(" + v.substring(0, 3) + ")";
                } else {
                    ret = ret + sep + v.substring(0, 3) + sep;
                }
                v = v.substring(3);
            }
            //do the rest of the number
            ret = ret + v.substring(0, 3) + sep + v.substring(3);
            return ret;
        }
    });
    
    if (base.global) {
        base.global.Formatter.Phone = module.exports;
    }
    
});

/*
---

name: Jx.Formatter.Number

description: Formats numbers including negative and floats

license: MIT-style license.

requires:
 - Jx.Formatter

provides: [Jx.Formatter.Number]

...
 */
// $Id$
/**
 * Class: Jx.Formatter.Number
 *
 * Extends: <Jx.Formatter>
 *
 * This class formats numbers. You can have it do the following
 *
 * o replace the decimal separator
 * o use/add a thousands separator
 * o change the precision (number of decimal places)
 * o format negative numbers with parenthesis
 *
 * Example:
 * (code)
 * (end)
 * 
 * Locale Keys:
 * - 'formatter.number'.decimalSeparator
 * - 'formatter.number'.thousandsSeparator
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/number", function(require, exports, module){
    
    var base = require("../../base"),
        Formatter = require("../formatter");
        
    var number = module.exports = new Class({

        Extends: Formatter,
        Family: "Jx.Formatter.Number",
    
        options: {
            /**
             * Option: precision
             * The number of decimal places to round to
             */
            precision: 2,
            /**
             * Option: useParens
             * Whether negative numbers should be done with parenthesis
             */
            useParens: true,
            /**
             * Option: useThousands
             * Whether to use the thousands separator
             */
            useThousands: true
        },
        /**
         * APIMethod: format
         * Formats the provided number
         *
         * Parameters:
         * value - the raw number to format
         */
        format : function (value) {
                //first set the decimal
            if (typeOf(value) === 'string') {
                    //remove commas from the string
                var p = value.split(',');
                value = p.join('');
                value = value.toFloat();
            }
            value = value.toFixed(this.options.precision);
    
            //split on the decimalSeparator
            var parts = value.split('.');
            var dec = true;
            if (parts.length === 1) {
                dec = false;
            }
            //check for negative
            var neg = false;
            var main;
            var ret = '';
            if (parts[0].contains('-')) {
                neg = true;
                main = parts[0].substring(1, parts[0].length);
            } else {
                main = parts[0];
            }
    
            if (this.options.useThousands) {
                var l = main.length,
                    left = l % 3,
                    j = 0,
                    ts = this.getText({set:'Jx',key:'formatter.number',value:'thousandsSeparator'});
                for (var i = 0; i < l; i++) {
                    ret = ret + main.charAt(i);
                    if (i === left - 1 && i !== l - 1) {
                        ret = ret + ts;
                    } else if (i >= left) {
                        j++;
                        if (j === 3 && i !== l - 1) {
                            ret = ret + ts;
                            j = 0;
                        }
                    }
    
                }
            } else {
                ret = parts[0];
            }
    
            if (dec) {
                ret = ret + this.getText({set:'Jx',key:'formatter.number',value:'decimalSeparator'}) + parts[1];
            }
            if (neg && this.options.useParens) {
                ret = "(" + ret + ")";
            } else if (neg && !this.options.useParens) {
                ret = "-" + ret;
            }
    
            return ret;
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         * 		translations changed.
         */
        changeText: function (lang) {
            this.parent();
        }
    });
    
    if (base.global) {
        base.global.Formatter.Number = module.exports;
    }
});

/*
---

name: Jx.Formatter.Currency

description: Formats input as currency. Currently only US currency is supported

license: MIT-style license.

requires:
 - Jx.Formatter.Number

provides: [Jx.Formatter.Currency]

...
 */
// $Id$
/**
 * Class: Jx.Formatter.Currency
 *
 * Extends: <Jx.Formatter.Number>
 *
 * This class formats numbers as US currency. It actually
 * runs the value through Jx.Formatter.Number first and then
 * updates the returned value as currency.
 *
 * Example:
 * (code)
 * (end)
 * 
 * Locale Keys:
 * - 'formatter.currency'.sign
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/currency", function(require, exports, module){
    
    var base = require("../../base"),
        NumberFormatter = require("./number");
            
    var currency = module.exports = new Class({

        Extends: NumberFormatter,
        Family: "Jx.Formatter.Currency",
    
        options: {},
        /**
         * APIMethod: format
         * Takes a number and formats it as currency.
         *
         * Parameters:
         * value - the number to format
         */
        format: function (value) {
    
            this.options.precision = 2;
    
            value = this.parent(value);
            //check for negative
            var neg = false;
            if (value.contains('(') || value.contains('-')) {
                neg = true;
            }
    
            var ret;
            if (neg && !this.options.useParens) {
                ret = "-" + this.getText({set:'Jx',key:'formatter.currency',value:'sign'}) + value.substring(1, value.length);
            } else {
                ret = this.getText({set:'Jx',key:'formatter.currency',value:'sign'}) + value;
            }
            return ret;
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         * 		translations changed.
         */
        changeText: function (lang) {
            this.parent();
        }
    });
    
    if (base.global) {
        base.global.Formatter.Currency = module.exports;
    }
    
});

/*
---

name: Jx.Formatter.Boolean

description: Formats boolean input

license: MIT-style license.

requires:
 - Jx.Formatter

provides: [Jx.Formatter.Boolean]
...
 */
// $Id$
/**
 * Class: Jx.Formatter.Boolean
 *
 * Extends: <Jx.Formatter>
 *
 * This class formats boolean values. You supply the
 * text values for true and false in the options.
 *
 * Example:
 * (code)
 * (end)
 *
 * Locale Keys:
 * - 'formatter.boolean'.true
 * - 'formatter.boolean'.false
 * 
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/formatter/boolean", function(require, exports, module){

    var base = require("../../base"),
        Formatter = require("../formatter");
        
    var Boolean = module.exports = new Class({

        Extends: Formatter,
        Family: "Jx.Formatter.Boolean",
    
        options: {},
        /**
         * APIMethod: format
         * Takes a value, determines boolean equivalent and
         * displays the appropriate text value.
         *
         * Parameters:
         * value - the text to format
         */
        format : function (value) {
            var b = false;
            var t = typeOf(value);
            switch (t) {
            case 'string':
                if (value === 'true') {
                    b = true;
                }
                break;
            case 'number':
                if (value !== 0) {
                    b = true;
                }
                break;
            case 'boolean':
                b = value;
                break;
            default:
                b = true;
            }
            return b ? this.getText({set:'Jx',key:'formatter.boolean',value:'true'}) : this.getText({set:'Jx',key:'formatter.boolean',value:'false'});
        },
        
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         * 
         * Parameters:
         * lang - the language being changed to or that had it's data set of 
         * 		translations changed.
         */
        changeText: function (lang) {
            this.parent();
        }
    
    });
    
    if (base.global) {
        base.global.Formatter.Boolean = module.exports;
    }
});

/*
---

name: Jx.Button.Multi

description: Multi buttons are used to contain multiple buttons in a drop down list where only one button is actually visible and clickable in the interface.

license: MIT-style license.

requires:
 - Jx.Button
 - Jx.Menu
 - Jx.Menu.Item
 - Jx.ButtonSet

provides: [Jx.Button.Multi]

images:
 - button_multi.png
 - button_multi_disclose.png

...
 */
// $Id$
/**
 * Class: Jx.Button.Multi
 *
 * Extends: <Jx.Button>
 *
 * Implements:
 *
 * Multi buttons are used to contain multiple buttons in a drop down list
 * where only one button is actually visible and clickable in the interface.
 *
 * When the user clicks the active button, it performs its normal action.
 * The user may also click a drop-down arrow to the right of the button and
 * access the full list of buttons.  Clicking a button in the list causes
 * that button to replace the active button in the toolbar and performs
 * the button's regular action.
 *
 * Other buttons can be added to the Multi button using the add method.
 *
 * This is not really a button, but rather a container for buttons.  The
 * button structure is a div containing two buttons, a normal button and
 * a flyout button.  The flyout contains a toolbar into which all the
 * added buttons are placed.  The main button content is cloned from the
 * last button clicked (or first button added).
 *
 * The Multi button does not trigger any events itself, only the contained
 * buttons trigger events.
 *
 * Example:
 * (code)
 * var b1 = new Jx.Button({
 *     label: 'b1',
 *     onClick: function(button) {
 *         console.log('b1 clicked');
 *     }
 * });
 * var b2 = new Jx.Button({
 *     label: 'b2',
 *     onClick: function(button) {
 *         console.log('b2 clicked');
 *     }
 * });
 * var b3 = new Jx.Button({
 *     label: 'b3',
 *     onClick: function(button) {
 *         console.log('b3 clicked');
 *     }
 * });
 * var multiButton = new Jx.Button.Multi();
 * multiButton.add(b1, b2, b3);
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/button/multi', function(require, exports, module){
    
    var base = require("../../base"),
        Button = require("../button"),
        Set = require("./set"),
        Menu = require("../menu"),
        Item = require("../menu/item");
    
    var multi = module.exports = new Class({
        Extends: Button,
        Family: 'Jx.Button.Multi',
    
        /**
         * Property: {<Jx.Button>} activeButton
         * the currently selected button
         */
        activeButton: null,
    
        /**
         * Property: buttons
         * {Array} the buttons added to this multi button
         */
        buttons: null,
    
        options: {
            /* Option: template
             * the button template for a multi button
             */
            template: '<span class="jxButtonContainer"><a class="jxButton jxButtonMulti jxDiscloser"><span class="jxButtonContent"><img src="'+base.aPixel.src+'" class="jxButtonIcon"><span class="jxButtonLabel"></span></span></a><a class="jxButtonDisclose" href="javascript:void(0)"><img src="'+Jx.aPixel.src+'"></a></span>',
            menuOptions: {}
        },
    
        /**
         * Property: classes
         * {<Hash>} a hash of object properties to CSS class names used to
         * automatically extract references to important DOM elements when
         * processing a widget template.  This allows developers to provide custom
         * HTML structures without affecting the functionality of widgets.
         */
        classes: {
            domObj: 'jxButtonContainer',
            domA: 'jxButton',
            domImg: 'jxButtonIcon',
            domLabel: 'jxButtonLabel',
            domDisclose: 'jxButtonDisclose'
        },
    
        /**
         * Method: render
         * construct a new instance of Jx.Button.Multi.
         */
        render: function() {
            this.parent();
            this.buttons = [];
    
            this.menu = new Menu({}, this.options.menuOptions);
            this.menu.button = this;
            this.buttonSet = new Set();
    
            this.bound.click = this.clicked.bind(this);
    
            if (this.domDisclose) {
                var button = this;
                var hasFocus;
    
                this.bound.disclose = {
                  click: function(e) {
                      if (this.list.count() === 0) {
                          return;
                      }
                      if (!button.options.enabled) {
                          return;
                      }
                      this.contentContainer.setStyle('visibility','hidden');
                      this.contentContainer.setStyle('display','block');
                      document.id(document.body).adopt(this.contentContainer);
                      /* we have to size the container for IE to render the chrome
                       * correctly but just in the menu/sub menu case - there is
                       * some horrible peekaboo bug in IE related to ULs that we
                       * just couldn't figure out
                       */
                      this.contentContainer.setContentBoxSize(this.subDomObj.getMarginBoxSize());
    
                      this.showChrome(this.contentContainer);
    
                      this.position(this.contentContainer, this.button.domObj, {
                          horizontal: ['right right'],
                          vertical: ['bottom top', 'top bottom'],
                          offsets: this.chromeOffsets
                      });
    
                      this.contentContainer.setStyle('visibility','');
    
                      document.addEvent('mousedown', this.bound.hide);
                      document.addEvent('keyup', this.bound.keypress);
    
                      this.fireEvent('show', this);
                  }.bind(this.menu),
                  mouseenter:function(){
                      document.id(this.domObj.firstChild).addClass('jxButtonHover');
                      if (hasFocus) {
                          this.domDisclose.addClass(this.options.pressedClass);
                      }
                  }.bind(this),
                  mouseleave:function(){
                      document.id(this.domObj.firstChild).removeClass('jxButtonHover');
                      this.domDisclose.removeClass(this.options.pressedClass);
                  }.bind(this),
                  mousedown: function(e) {
                      this.domDisclose.addClass(this.options.pressedClass);
                      hasFocus = true;
                      this.focus();
                  }.bind(this),
                  mouseup: function(e) {
                      this.domDisclose.removeClass(this.options.pressedClass);
                  }.bind(this),
                  keydown: function(e) {
                      if (e.key == 'enter') {
                          this.domDisclose.addClass(this.options.pressedClass);
                      }
                  }.bind(this),
                  keyup: function(e) {
                      if (e.key == 'enter') {
                          this.domDisclose.removeClass(this.options.pressedClass);
                      }
                  }.bind(this),
                  blur: function() { hasFocus = false; }
                };
    
                this.domDisclose.addEvents({
                  click: this.bound.disclose.click,
                  mouseenter: this.bound.disclose.mouseenter,
                  mouseleave: this.bound.disclose.mouseleave,
                  mousedown: this.bound.disclose.mousedown,
                  mouseup: this.bound.disclose.mouseup,
                  keydown: this.bound.disclose.keydown,
                  keyup: this.bound.disclose.keyup,
                  blur: this.bound.disclose.blur
                });
                if (typeof Drag != 'undefined') {
                    new Drag(this.domDisclose, {
                        onStart: function() {this.stop();}
                    });
                }
            }
            this.bound.show = function() {
                this.domA.addClass(this.options.activeClass);
            }.bind(this);
            this.bound.hide = function() {
                if (this.options.active) {
                    this.domA.addClass(this.options.activeClass);
                }
            }.bind(this);
    
            this.menu.addEvents({
                'show': this.bound.show,
                'hide': this.bound.hide
            });
            if (this.options.items) {
                this.add(this.options.items);
            }
        },
        cleanup: function() {
          var self = this,
              bound = this.bound;
          // clean up the discloser
          if (self.domDisclose) {
            self.domDisclose.removeEvents({
              click: bound.disclose.click,
              mouseenter: bound.disclose.mouseenter,
              mouseleave: bound.disclose.mouseleave,
              mousedown: bound.disclose.mousedown,
              mouseup: bound.disclose.mouseup,
              keydown: bound.disclose.keydown,
              keyup: bound.disclose.keyup,
              blur: bound.disclose.blur
            });
          }
    
          // clean up the button set
          self.buttonSet.destroy();
          self.buttonSet = null;
    
          // clean up the buttons array
          self.buttons.each(function(b){
            b.removeEvents();
            self.menu.remove(b.multiButton);
            b.multiButton.destroy();
            b.multiButton = null;
            b.destroy();
          });
          self.buttons.empty();
          self.buttons = null;
    
          // clean up the menu object
          self.menu.removeEvents({
            'show': bound.show,
            'hide': bound.hide
          });
          // unset the menu button because it references this object
          self.menu.button = null;
          self.menu.destroy();
          self.menu = null;
    
          // clean up binds and call parent to finish
          self.bound.show = null;
          self.bound.hide = null;
          self.bound.clicked = null;
          self.bound.disclose = null;
          self.activeButton = null;
          self.parent();
        },
        /**
         * APIMethod: add
         * adds one or more buttons to the Multi button.  The first button
         * added becomes the active button initialize.  This function
         * takes a variable number of arguments, each of which is expected
         * to be an instance of <Jx.Button>.
         *
         * Parameters:
         * button - {<Jx.Button>} a <Jx.Button> instance, may be repeated in the parameter list
         */
        add: function() {
            Array.from(arguments).flatten().each(function(theButton){
              var f,
                  opts,
                  button;
                if (!theButton instanceof Button) {
                    return;
                }
                theButton.domA.addClass('jxDiscloser');
                theButton.setLabel(theButton.options.label);
                this.buttons.push(theButton);
                f = this.setButton.bind(this, theButton);
                opts = {
                    image: theButton.options.image,
                    imageClass: theButton.options.imageClass,
                    label: theButton.options.label || '&nbsp;',
                    enabled: theButton.options.enabled,
                    tooltip: theButton.options.tooltip,
                    toggle: true,
                    onClick: f
                };
                if (!opts.image || opts.image.indexOf('a_pixel') != -1) {
                    delete opts.image;
                }
                button = new Item(opts);
                this.buttonSet.add(button);
                this.menu.add(button);
                theButton.multiButton = button;
                theButton.domA.addClass('jxButtonMulti');
                if (!this.activeButton) {
                    this.domA.dispose();
                    this.setActiveButton(theButton);
                }
            }, this);
        },
        /**
         * APIMethod: remove
         * remove a button from a multi button
         *
         * Parameters:
         * button - {<Jx.Button>} the button to remove
         */
        remove: function(button) {
            if (!button || !button.multiButton) {
                return;
            }
            // the toolbar will only remove the li.toolItem, which is
            // the parent node of the multiButton's domObj.
            if (this.menu.remove(button.multiButton)) {
                button.multiButton = null;
                if (this.activeButton == button) {
                    // if any buttons are left that are not this button
                    // then set the first one to be the active button
                    // otherwise set the active button to nothing
                    if (!this.buttons.some(function(b) {
                        if (b != button) {
                            this.setActiveButton(b);
                            return true;
                        } else {
                            return false;
                        }
                    }, this)) {
                        this.setActiveButton(null);
                    }
                }
                this.buttons.erase(button);
            }
        },
        /**
         * APIMethod: empty
         * remove all buttons from the multi button
         */
        empty: function() {
          this.buttons.each(function(b){this.remove(b);}, this);
        },
        /**
         * APIMethod: setActiveButton
         * update the menu item to be the requested button.
         *
         * Parameters:
         * button - {<Jx.Button>} a <Jx.Button> instance that was added to this multi button.
         */
        setActiveButton: function(button) {
            if (this.activeButton) {
                this.activeButton.domA.dispose();
                this.activeButton.domA.removeEvent('click', this.bound.click);
            }
            if (button && button.domA) {
                this.domObj.grab(button.domA, 'top');
                this.domA = button.domA;
                this.domA.addEvent('click', this.bound.click);
                if (this.options.toggle) {
                    this.options.active = false;
                    this.setActive(true);
                }
            }
            this.activeButton = button;
        },
        /**
         * Method: setButton
         * update the active button in the menu item, trigger the button's action
         * and hide the flyout that contains the buttons.
         *
         * Parameters:
         * button - {<Jx.Button>} The button to set as the active button
         */
        setButton: function(button) {
            this.setActiveButton(button);
            button.clicked();
        }
    });
    
    if (base.global) {
        base.global.Button.Multi = multi;
    }

});

/*
---

name: Jx.Menu.Context

description: A Jx.Menu that has no button but can be opened at a specific browser location to implement context menus (for instance).

license: MIT-style license.

requires:
 - Jx.Menu

provides: [Jx.Menu.Context]

css:
 - menu

...
 */
// $Id$
/**
 * Class: Jx.Menu.Context
 *
 * Extends: Jx.Menu
 *
 * A <Jx.Menu> that has no button but can be opened at a specific
 * browser location to implement context menus (for instance).
 *
 * Example:
 * (code)
 * (end)
 *
 * Events:
 * TODO - add open/close events?
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/menu/context', function(require, exports, module){
    
    var base = require("../../base"),
        Menu = require("../menu");
        
    var context = module.exports = new Class({
        Extends: Menu,
        Family: 'Jx.Menu.Context',
    
        parameters: ['id','options'],
    
        /**
         * APIMethod: render
         * create a new context menu
         */
        render: function() {
            this.id = document.id(this.options.id);
            if (this.id) {
                this.id.addEvent('contextmenu', this.show.bind(this));
            }
            this.parent();
        },
        /**
         * Method: show
         * Show the context menu at the location of the mouse click
         *
         * Parameters:
         * e - {Event} the mouse event
         */
        show : function(e) {
            if (this.list.count() ==0) {
                return;
            }
            
            this.target = e.target;
    
            this.contentContainer.setStyle('visibility','hidden');
            this.contentContainer.setStyle('display','block');
            document.id(document.body).adopt(this.contentContainer);
            /* we have to size the container for IE to render the chrome correctly
             * but just in the menu/sub menu case - there is some horrible peekaboo
             * bug in IE related to ULs that we just couldn't figure out
             */
             this.contentContainer.setStyles({
               width: null,
               height: null
             });
            this.contentContainer.setContentBoxSize(this.subDomObj.getMarginBoxSize());
    
            this.position(this.contentContainer, document.body, {
                horizontal: [e.page.x + ' left'],
                vertical: [e.page.y + ' top', e.page.y + ' bottom'],
                offsets: this.chromeOffsets
            });
    
            this.contentContainer.setStyle('visibility','');
            this.showChrome(this.contentContainer);
    
            document.addEvent('mousedown', this.bound.hide);
            document.addEvent('keyup', this.bound.keypress);
    
            e.stop();
        }
    });
    
    if (base.global) {
        base.global.Menu.Context = context;
    }

});

/*
---

name: Jx.Menu.Separator

description: Convenience class to create a visual separator in a menu.

license: MIT-style license.

requires:
 - Jx.Menu

provides: [Jx.Menu.Separator]

images:
 - toolbar_separator_v.png

...
 */
// $Id$
/**
 * Class: Jx.Menu.Separator
 *
 * Extends: <Jx.Object>
 *
 * A convenience class to create a visual separator in a menu.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/menu/separator', function(require, exports, module){

    var base = require("../../base"),
        Widget = require("../widget");
        
    var separator = module.exports = new Class({
        Extends: Widget,
        Family: 'Jx.Menu.Separator',
        /**
         * Property: domObj
         * {HTMLElement} the HTML element that the separator is contained
         * within
         */
        domObj: null,
        /**
         * Property: owner
         * {<Jx.Menu>, <Jx.Menu.SubMenu>} the menu that the separator is in.
         */
        owner: null,
        options: {
            template: "<li class='jxMenuItemContainer jxMenuItem'><span class='jxMenuSeparator'>&nbsp;</span></li>"
        },
        classes: {
            domObj: 'jxMenuItem'
        },
        /**
         * APIMethod: render
         * Create a new instance of a menu separator
         */
        render: function() {
            this.parent();
            this.domObj.store('jxMenuItem', this);
        },
        cleanup: function() {
          this.domObj.eliminate('jxMenuItem');
          this.owner = null;
          this.parent();
        },
        /**
         * Method: setOwner
         * Set the ownder of this menu item
         *
         * Parameters:
         * obj - {Object} the new owner
         */
        setOwner: function(obj) {
            this.owner = obj;
        },
        /**
         * Method: hide
         * Hide the menu item.
         */
        hide: function(){},
        /**
         * Method: show
         * Show the menu item
         */
        show: function(){}
    });
    
    if (base.global) {
        base.global.Menu.Separator = separator;
    }

});

/*
---

name: Jx.Menu.SubMenu

description: A sub menu contains menu items within a main menu or another sub menu.

license: MIT-style license.

requires:
 - Jx.Menu.Item
 - Jx.Menu

provides: [Jx.Menu.SubMenu]

...
 */
// $Id$
/**
 * Class: Jx.Menu.SubMenu
 *
 * Extends: <Jx.Menu.Item>
 *
 * Implements: <Jx.AutoPosition>, <Jx.Chrome>
 *
 * A sub menu contains menu items within a main menu or another
 * sub menu.
 *
 * The structure of a SubMenu is the same as a <Jx.Menu.Item> with
 * an additional unordered list element appended to the container.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define('jx/menu/submenu', function(require, exports, module){

    var base = require("../../base"),
        Menu = require("../menu"),
        Item = require("./item");
    
    var subMenu = module.exports = new Class({
        Extends: Item,
        Family: 'Jx.Menu.SubMenu',
        /**
         * Property: subDomObj
         * {HTMLElement} the HTML container for the sub menu.
         */
        subDomObj: null,
        /**
         * Property: owner
         * {<Jx.Menu> or <Jx.SubMenu>} the menu or sub menu that this sub menu
         * belongs
         */
        owner: null,
        /**
         * Property: visibleItem
         * {<Jx.MenuItem>} the visible item within the menu
         */
        visibleItem: null,
        /**
         * Property: list
         * {<Jx.List>} a list to manage menu items
         */
        list: null,
        options: {
            template: '<li class="jxMenuItemContainer"><a class="jxMenuItem jxButtonSubMenu"><span class="jxMenuItemContent"><img class="jxMenuItemIcon" src="'+base.aPixel.src+'"><span class="jxMenuItemLabel"></span></span></a></li>',
            position: {
                horizontal: ['right left', 'left right'],
                vertical: ['top top']
            }
        },
    
        /**
         * APIMethod: render
         * Create a new instance of Jx.SubMenu
         */
        render: function() {
            this.parent();
            this.open = false;
    
            this.menu = new Menu(null, {
                position: this.options.position
            });
            this.menu.domObj = this.domObj;
        },
        cleanup: function() {
          this.menu.domObj = null;
          this.menu.destroy();
          this.menu = null;
          this.parent();
        },
        /**
         * Method: setOwner
         * Set the owner of this sub menu
         *
         * Parameters:
         * obj - {Object} the owner
         */
        setOwner: function(obj) {
            this.owner = obj;
            this.menu.owner = obj;
        },
        /**
         * Method: show
         * Show the sub menu
         */
        show: function() {
            if (this.open || this.menu.list.count() == 0) {
                return;
            }
            this.menu.show();
            this.open = true;
            // this.setActive(true);
        },
    
        eventInMenu: function(e) {
            if (this.visibleItem &&
                this.visibleItem.eventInMenu &&
                this.visibleItem.eventInMenu(e)) {
                return true;
            }
            return document.id(e.target).descendantOf(this.domObj) ||
                   this.menu.eventInMenu(e);
        },
    
        /**
         * Method: hide
         * Hide the sub menu
         */
        hide: function() {
            if (!this.open) {
                return;
            }
            this.open = false;
            this.menu.hide();
            this.visibleItem = null;
        },
        /**
         * Method: add
         * Add menu items to the sub menu.
         *
         * Parameters:
         * item - {<Jx.MenuItem>} the menu item to add.  Multiple menu items
         * can be added by passing multiple arguments to this function.
         */
        add: function(item, position) {
            this.menu.add(item, position, this);
            return this;
        },
        /**
         * Method: remove
         * Remove a menu item from the menu
         *
         * Parameters:
         * item - {<Jx.MenuItem>} the menu item to remove
         */
        remove: function(item) {
            this.menu.remove(item);
            return this;
        },
        /**
         * Method: replace
         * Replace a menu item with another menu item
         *
         * Parameters:
         * what - {<Jx.MenuItem>} the menu item to replace
         * withWhat - {<Jx.MenuItem>} the menu item to replace it with
         */
        replace: function(item, withItem) {
            this.menu.replace(item, withItem);
            return this;
        },
        /**
         * APIMethod: empty
         * remove all items from the sub menu
         */
        empty: function() {
          this.menu.empty();
        },
        /**
         * Method: deactivate
         * Deactivate the sub menu
         *
         * Parameters:
         * e - {Event} the event that triggered the menu being
         * deactivated.
         */
        deactivate: function(e) {
            if (this.owner) {
                this.owner.deactivate(e);
            }
        },
        /**
         * Method: isActive
         * Indicate if this sub menu is active
         *
         * Returns:
         * {Boolean} true if the <Jx.Menu> that ultimately contains
         * this sub menu is active, false otherwise.
         */
        isActive: function() {
            if (this.owner) {
                return this.owner.isActive();
            } else {
                return false;
            }
        },
        /**
         * Method: setActive
         * Set the active state of the <Jx.Menu> that contains this sub menu
         *
         * Parameters:
         * isActive - {Boolean} the new active state
         */
        setActive: function(isActive) {
            if (this.owner && this.owner.setActive) {
                this.owner.setActive(isActive);
            }
        },
        /**
         * Method: setVisibleItem
         * Set a sub menu of this menu to be visible and hide the previously
         * visible one.
         *
         * Parameters:
         * obj - {<Jx.SubMenu>} the sub menu that should be visible
         */
        setVisibleItem: function(obj) {
            if (this.visibleItem != obj) {
                if (this.visibleItem && this.visibleItem.hide) {
                    this.visibleItem.hide();
                }
                this.visibleItem = obj;
                this.visibleItem.show();
            }
        }
    });
    
    if (base.global) {
        base.global.Menu.SubMenu = subMenu;
    }

});

/*
---

name: Jx.LayoutManager.Columns

description:

license: MIT-style license.

requires:
 - Jx.LayoutManager
 - More/Drag.Move
 
css:
 - layout.columns

provides: [Jx.LayoutManager.Columns]



...
 */
define("jx/layoutmanager/columns", function(require, exports, module){
    
    var base = require("../../base"),
        LayoutManager = require("../layoutmanager");
        
    var columns = module.exports = new Class({
	
        Extends: LayoutManager,
        Family: 'Jx.LayoutManager.Columns',
        
        options: {
            /**
             * Option: columns
             * an array of objects defining columns. Default is an array of
             * 3 columns in widths of 30%,*,25%
             */
            columns: [{
                cssClass: '',
                width: '30%',
                items: null
            },{
                cssClass: '',
                width: '*',
                items: null
            },{
                cssClass: '',
                width: '25%',
                items: null
            }],
            /**
             * Option: addDefaults
             * default options to use in adding objects to a column
             */
            addDefaults: {
                isDraggable: true,
                column: 1,
                position: 'top'
            },
            /**
             * Option: dragDefaults
             * Default options used when making an object draggable. These can be
             * overridden when the object is passed to add().
             */
            dragDefaults: {
                dropZoneClass: 'jxDropZone',
                handle: '',
                position: 'bottom',
                isDraggable: true
            }
        },
        
        columns: null,
        
        marker: null,
        
        init: function () {
            this.parent();
        
            this.bound.makeDraggable = this.makeDraggable.bind(this);
            this.bound.windowResize = this.windowResize.bind(this);
            
            this.marker = new Element('div', {
                'class': 'jxLayoutColumnMarker'
            }).setStyles({
                'opacity': 0.7, 
                'visibility': 'hidden'
            });
            
            this.columns = [];
            //create columns in the target
            this.options.columns.each(function(col, idx){
                var column = new Element('div', {
                    'class': 'jxLayoutColumn'
                });
                column.addClass(col.cssClass);
                column.addClass(this.options.dragDefaults.dropZoneClass);
                if (idx == this.options.columns.length - 1) {
                    column.addClass('jxLayoutColumnLast');
                }
                this.columns.push(column);
            },this);
            //listen for the window resize and adjust the columns accordingly
            window.addEvent('resize', this.bound.windowResize);
            window.addEvent('load', this.bound.windowResize);
                        
        },
        
        setContainer: function(domObj) {
            this.parent(domObj);
    
            this.domObj.addClass('jxLayoutColumns');
            this.marker.inject(this.domObj);
            this.columns.each(function(col, idx){
                col.inject(this.domObj);
                if (col.items !== undefined && col.items !== null) {
                    this.add(col.items, {
                        column: idx
                    });
                } else {
                    this.addPlaceholder(idx);
                }
            }, this);
        
            this.windowResize();
        
            this.container.addEvent('jxContainerWidgetAdded', this.bound.makeDraggable)
        },
        
        addPlaceholder: function (idx) {
            var p = new Element('div', {
                'class': 'jxLayoutPlaceholder'
            });
            this.add(p, { 
                column: idx,
                isDraggable: false
            });
            this.columns[idx].store('placeholder',p);
        },
        
        windowResize: function () {
            var tSize = this.domObj.getContentBoxSize();
            //the -10 here is to account for any possible scrollbar on the window.
            //tSize.width -= 50;
            var  w = 0;
            this.options.columns.each(function(col, idx){
                var column = this.columns[idx];
                if (col.width == '*') {
                    this.fluidCol = column;
                } else {
                    if (col.width.contains('%')) {
                        var percent = col.width.toInt();
                        var marginRight = column.getStyle('margin-right').toInt();
                        var marginLeft = column.getStyle('margin-left').toInt();
                        column.setStyle('width', (tSize.width * percent / 100) - marginRight - marginLeft);
                    } else {
                        column.setStyle('width', col.width);
                    }
                    var s = column.getMarginBoxSize();
                    w += s.width;
                }
            },this);
            if (this.fluidCol !== undefined && this.fluidCol !== null) {
                var marginRight = this.fluidCol.getStyle('margin-right').toInt();
                var marginLeft = this.fluidCol.getStyle('margin-left').toInt();
                this.fluidCol.setStyle('width',tSize.width - w - marginRight - marginLeft);
            }
            this.elsResize();
        },
        
        /**
         * APIMethod: add
         * Use this method to add an element to the layout
         * 
         * Parameters:
         * elem - the element to add. Either a Dom Element or a Jx.Widget instance
         * options - the options to use in adding this elem.
         * 
         * Options: 
         * column - the column to add to (zero-based)
         * position - where in the column to add (top | bottom | 0...n)
         * isDraggable - whether this elem should be draggable (doesn't keep other
         * 				 elements from being added before or after)
         * handle - the part of the element to use as the drag handle
         */
        add: function (elem, options) {
            options = Object.merge({},this.options.addDefaults,options);
                
            Array.from(elem).each(function(el){	
                el = document.id(el);
                var jx = base.getWidget(el),
                    col = document.id(this.columns[options.column]),
                    children = col.getChildren(),
                    after;
                children.each(function(child, idx){
                    if (idx + 1 == options.position) {
                        after = child;
                    }
                },this);
                        
                if (el.addTo) {
                    if (after === undefined || after === null) {
                        el.addTo(col, 'bottom');
                    } else {
                        el.addTo(after, 'after');
                    }
                } else {
                    if (after === undefined || after === null) {
                        el.inject(col, 'bottom');
                    } else {
                        el.inject(after, 'after');
                    }
                }
                if (!el.hasClass('jxLayoutPlaceholder')) {
                    col.getChildren('.jxLayoutPlaceholder').each(function(child){
                        child.dispose();
                    },this);
                }
                this.items.push(jx || el);
                
                if (el.resize) {
                    el.resize();
                } else if (jx !== null && jx !== undefined && jx.resize) {
                    jx.resize();
                }
                el.setStyle('position','relative');
                
                this.container.fireEvent('jxLayoutItemAdd', [el, this]);
            },this);
            
        },
        
        makeDraggable: function (jx, opts, container) {
            var dragOpts = Object.merge({},this.options.dragDefaults, opts.layoutOpts);
            if (dragOpts.isDraggable) {
                var d = document.id(jx).getParent();
                d.addClass('jxLayoutDraggable');
                d.makeDraggable({
                    droppables: document.getElements('.' + dragOpts.dropZoneClass), 
                    handle: d.getElement(dragOpts.handle), 
                    precalculate: false,
                    style: false,
                    onBeforeStart: function(el){
                        var coords = d.getCoordinates(d.getParent());
                        var col = d.getParent();
                        if (col.getChildren().length == 1) {
                            //add placeholder to bottom of column
                            col.retrieve('placeholder').inject(col,'bottom');
                        }
                        this.marker.setStyles({
                            'display': 'block', 
                            'visibility': 'visible',
                            'height': coords.height, 
                            'width': coords.width - 5
                        }).inject(d, 'after');
                        //get current mouse position
                        var mouse = el.retrieve('dragger').mouse;
                        
                        var offsets = {
                            x: mouse.start.x - coords.left,
                            y: mouse.start.y - coords.top
                        };
                        el.store('offsets', offsets);
                    
                        d.setStyles({
                            'position': 'absolute', 
                            'top': (coords.top - d.getStyle('margin-top').toFloat()), 
                            'left': (coords.left - d.getStyle('margin-left').toFloat()), 
                            'width': coords.width, 
                            'opacity': 0.7, 
                            'z-index': 3
                        });
                    }.bind(this),
                    onEnter: function(el, drop){
                        drop.adopt(this.marker.setStyles({
                            'display': 'block', 
                            'height': el.getCoordinates().height, 
                            'width': drop.getCoordinates().width - 5
                        }));
                        var p = drop.retrieve('placeholder');
                        if (drop.contains(p)) {
                            p.dispose();
                        }
                    }.bind(this), 
                    onLeave: function(el, drop){
                        this.marker.dispose();
                        var p = drop.retrieve('placeholder');
                        var children = drop.getChildren();
                        children = children.filter(function(child){ return child != p && child != el;},this);
                        if (children.length == 0 ) {
                            p.inject(drop,'top');
                        }       
                    }.bind(this),
                    onDrag: function(el){
                        target = null;
                        drop = this.marker.getParent();
                        var drag = el.retrieve('dragger');
                    
                        //get mouse coordinates and offset
                        var offsets = el.retrieve('offsets'),
                        topLeft = {
                            left: drag.mouse.now.x - offsets.x,
                            top: drag.mouse.now.y - offsets.y
                        };
                    
                        el.setStyles(topLeft);
                    
                        if (drop && drop.getChildren().length > 1){
                            //check for placeholder and remove it before adding the marker
                            var p = drop.retrieve('placeholder');
                            if (drop.contains(p)) {
                                p.dispose();
                            }
                            kids = drop.getChildren();
                            mouseY = drag.mouse.now.y;
                            kids.each(function(k){
                                if (mouseY > (k.getCoordinates().top + Math.round(k.getCoordinates().height / 2))) {
                                target = k;
                                }
                            });
                            if (target == null){
                                if (kids[0] != this.marker) {
                                    this.marker.inject(drop, 'top');
                                }
                            } else {
                                if ((target != this.marker) && (target != this.marker.getPrevious())) {
                                    this.marker.inject(target, 'after');
                                }
                            }
                        }
                        //console.log('drag');
                    }.bind(this),
                    onDrop: function(el, drop){
                        if (drop) {
                            el.setStyles({
                                'position': 'relative', 
                                'top': '0', 
                                'left': '0', 
                                'width': 'auto', 
                                    'opacity': 1, 
                                'z-index': 1
                            }).replaces(this.marker);
                            if (el.resize) {
                                el.resize({width: null});
                            } else if (jx.resize) {
                                jx.resize();
                            }
                            if (drop.contains(drop.retrieve('placeholder'))) {
                                document.id(drop.retrieve('placeholder')).dispose();
                            }
                        } else {
                            el.setStyles({
                                'position': 'relative', 
                                'top': '0', 
                                'left': '0', 
                                'opacity': 1, 
                                'z-index': 1
                            });
                            console.log('drop not in zone');
                        }
                    }.bind(this),
                    onComplete: function(el){
                        this.marker.dispose();
                        el.setStyle('position','relative');
                        this.container.fireEvent('jxLayoutMoveComplete', el);
                    }.bind(this),
                    onCancel: function(el){
                        this.marker.dispose();
                        el.setStyles({
                            'position': 'relative', 
                            'top': '0', 
                            'left': '0', 
                            'width': null, 
                            'opacity': 1, 
                            'z-index': 1
                        });
                    }.bind(this)
                });
            }
        },
    
        resize: function(){
            this.windowResize();
        },
    
        resizing: false,    
        
        elsResize: function () {
            if (!this.resizing){
                this.resizing = true;
                this.items.each(function(el){
                el = document.id(el);
                if (el.resize) {
                    el.resize();
                }
                },this);
                this.container.resize();
                this.resizing = false;
            }
        },
        /**
         * APIMethod: serialize
         * Returns an array of objects containing the following information for 
         * each object
         * 
         *  (code)
         *  {
         *  	id: <object's id>,
         *  	width: <object's width>,
         *   	height: <object's height>,
         *   	column: <column>,
         *   	position: <position in the column>
         *   }
         *   (end)
         *   
         *   The array can be saved and used to recreate the layout. This layout 
         *   cannot recreate itself however. The developer is tasked with taking 
         *   this info and supplying the appropriate objects.
         */
        serialize: function () {
            var result = [];
                
            //go through each column and construct the object
            this.columns.each(function(col, idx){
                col.getChildren().each(function(widget,i){
                    widget = document.id(widget);
                    if (!widget.hasClass('jxLayoutPlaceholder')) {
                        var size = widget.getBorderBoxSize();
                        result.push({
                            id: (widget.getChildren()[0]).get('id'),
                            width: size.width,
                            height: size.height,
                            column: idx,
                            position: i
                        });
                    }
                },this);
            },this);
                
            return result;
        }
        
    });
    
    if (base.global) {
        base.global.LayoutManager.Columns = module.exports;
    }
    
});

/*
---

name: Jx.LayoutManager.Anchored

description: Layout manager based on Jx.Layout

license: MIT-style license.

requires:
 - Jx.LayoutManager

provides: [Jx.LayoutManager.Anchored]

...
*/
// $Id$
/**
* Class: Jx.LayoutManager.Anchored
* 
*
* Extends:
* <Jx.Object>
*
* License:
* Copyright (c) 2011, Jonathan Bomgardner 
*
* This file is licensed under an MIT style license
*/
define("jx/layoutmanager/anchored", function(require, exports, module){
    
    var base = require("../../base"),
        LayoutManager = require("../layoutmanager");
        
    var anchored = module.exports = new Class({
        Extends: LayoutManager,
        Family: 'Jx.LayoutManager.Anchored',
    
        resizing: false,
        
        add: function(obj, options) {
            this.parent(obj);
            this.size(obj, options);
        },
    
        resize: function(options) {
            if (!this.resizing) {
                this.resizing = true;
                //grab each child and size it again
                Array.from(this.domObj.childNodes).each(function(child){
                    if (child.getStyle('display') != 'none') {
                        this.size(child,options);
                    }
                }, this);
                this.container.resize();
                this.resizing = false;
            }
        }
    });
    
    if (base.global) {
        base.global.LayoutManager.Anchored = module.exports;
    }
    
});

/*
---

name: Jx.LayoutManager.Split

description: Layout manager based on Jx.Splitter

license: MIT-style license.

requires:
 - Jx.LayoutManager

provides: [Jx.LayoutManager.Split]

...
*/
// $Id$
/**
* Class: Jx.LayoutManager.Split
* 
*
* Extends:
* <Jx.LayoutManager>
*
* License:
* Copyright (c) 2011, Jonathan Bomgardner 
*
* This file is licensed under an MIT style license
*/
define("jx/layoutmanager/split", function(require, exports, module){
    
    var base = require("../../base"),
        LayoutManager = require("../layoutmanager"),
        Splitter = require("../splitter"),
        Layout = require("../layout");
        
    var split = module.exports = new Class({
        Extends: LayoutManager,
        Family: 'Jx.LayoutManager.Split',
    
        resizing: false,
    
        setContainer: function(domObj) {
            this.parent(domObj);
            
            //create the splitter
            this.splitter = new Splitter(this.domObj, this.options);
            this.splitter.addEvents({
                //'drag': this.resize.bind(this),
                'complete': this.resize.bind(this)
            });
        },
        
        add: function(obj, options) {
            if (this.items === undefined || this.items === null) {
                this.items = [];
            }
            
            this.items.push(base.getWidget(obj) || obj);
            
            obj = document.id(obj);
            obj.inject(this.splitter.elements[options.split]);
            new Layout(obj,options);
            
            
        },
    
        resize: function(options) {
            if (!this.resizing) {
                this.resizing = true;
                this.domObj.resize();        
                this.splitter.resize();
                this.items.each(function(item){
                    if (item.resize) {
                        item.resize();
                    } else if (base.getWidget(item).resize) {
                        base.getWidget(item).resize();
                    }
                },this);
                this.container.resize();
                this.resizing = false;
            }
            
        }
    });
    
    if (base.global) {
        base.global.LayoutManager.Split = module.exports;
    }
    
});

/*
---

name: Jx.Data.Response

description: The object used to return response information to strategies.

license: MIT-style license.

requires:
 - Jx.Data

provides: [Jx.Data.Response]

...
 */
// $Id$
/**
 * Class: Jx.Data.Response
 * 
 * Extends: <Jx.Object>
 * 
 * This class is used by the protocol to send information back to the calling 
 * strategy (or other caller).
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */
define("jx/data/response", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object");
        
    var response = module.exports = new Class({

        Extends: jxObject,
        Family: 'Jx.Store.Response',
    
        /**
         * Property: code
         * This is the success/failure code
         */
        code: null,
        /**
         * Property: data
         * The data passed received by the protocol.
         */
        data: null,
        /**
         * Property: meta
         * The metadata received by the protocol
         */
        meta: null,
        /**
         * Property: requestType
         * one of 'read', 'insert', 'delete', or 'update'
         */
        requestType: null,
        /**
         * Property: requestParams
         * The parameters passed to the method that created this response
         */
        requestParams: null,
        /**
         * Property: request
         * the mootools Request object used in this operation (if one is actually
         * used)
         */
        request: null,
        /**
         * Property: error
         * the error data received from the called page if any.
         */
        error: null,
        /**
         * APIMethod: success
         * determines if this response represents a successful response
         */
        success: function () {
            return this.code > 0;
        }
    });
    
    response.WAITING = 2;
    response.SUCCESS = 1;
    response.FAILURE = 0;

    if (base.global) {
        base.global.Data.Response = module.exports;
    }
    
});

/*
---

name: Jx.Data.Parser

description: Base class for all data parsers. Parsers are used by protocols to get data received or sent in the proper formats.

license: MIT-style license.

requires:
 - Jx.Data

provides: [Jx.Data.Parser]

...
 */
// $Id$
/**
 * Class: Jx.Data.Parser
 * 
 * Extends: <Jx.Object>
 * 
 * Base class for all parsers
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */

define("jx/data/parser", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object");
        
    var parser = module.exports = new Class({
    
        Extends: jxObject,
        Family: 'Jx.Store.Parser',
        
        /**
         * APIMethod: parse
         * Reads data passed to it by a protocol and parses it into a specific
         * format needed by the store/record.
         * 
         * Parameters:
         * data - string of data to parse
         */
        parse: function(){},
        /**
         * APIMethod: encode
         * Takes an Jx.Record object and encodes it into a format that can be transmitted 
         * by a protocol.
         * 
         * Parameters:
         * object - an object to encode
         */
        encode: function(){}
    });
    
    if (base.global) {
        base.global.Data.Parser = module.exports;
    }
    
});

/*
---

name: Jx.Store.Protocol

description: Base class for all store protocols.

license: MIT-style license.

requires:
 - Jx.Data
 - Jx.Data.Response

provides: [Jx.Data.Protocol]

...
 */
// $Id$
/**
 * Class: Jx.Data.Protocol
 *
 * Extends: <Jx.Object>
 *
 * Base class for all protocols. Protocols are used for communication, primarily,
 * in Jx.Store. It may be possible to adapt them to be used in other places but
 * that is not their intended function.
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/data/protocol", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object");
        
    var protocol = module.exports = new Class({

        Extends: jxObject,
        Family: 'Jx.Store.Protocol',
    
        parser: null,
    
        options: {
          combine: {
            insert: false,
            update: false,
            'delete': false
          }
        },
    
        init: function () {
            this.parent();
    
            if (this.options.parser !== undefined && this.options.parser !== null) {
                this.parser = this.options.parser;
            }
        },
    
        cleanup: function () {
            this.parser = null;
            this.parent();
        },
    
        /**
         * APIMethod: read
         * Supports reading data from a location. Abstract method that subclasses
         * should implement.
         *
         * Parameters:
         * options - optional options for configuring the request
         */
        read: function(){},
        /**
         * APIMethod: insert
         * Supports inserting data from a location. Abstract method that subclasses
         * should implement.
         *
         * Parameters:
         * data - the data to use in creating the record in the form of one or more
         *        Jx.Store.Record instances
         * options - optional options for configuring the request
         */
        insert: function(){},
        /**
         * APIMethod: update
         * Supports updating data at a location. Abstract method that subclasses
         * should implement.
         *
         * Parameters:
         * data - the data to update (one or more Jx.Store.Record objects)
         * options - optional options for configuring the request
         */
        update: function(){},
        /**
         * APIMethod: delete
         * Supports deleting data from a location. Abstract method that subclasses
         * should implement.
         *
         * Parameters:
         * data - the data to update (one or more Jx.Store.Record objects)
         * options - optional options for configuring the request
         */
        "delete": function(){},
        /**
         * APIMethod: abort
         * used to abort any of the above methods (where practical). Abstract method
         * that subclasses should implement.
         */
        abort: function(){},
        /**
         * APIMethod: combineRequests
         * tests whether the protocol supports combining multiple records for a given operation
         * 
         * Parameter:
         * operation - {String} the operation to test for multiple record support
         * 
         * Returns {Boolean} true if the operation supports it, false otherwise
         */
        combineRequests: function(op) {
          return (this.options.combine[op] !== undefined && 
                  this.options.combine[op] !== null) ? this.options.combine[op] : false;
        }
    });
    
    if (base.global) {
        base.global.Data.Protocol = module.exports;
    }
    
});

/*
---

name: Jx.Notice.Error

description: Represents a single item used in a notifier.

license: MIT-style license.

requires:
 - Jx.Notice

provides: [Jx.Notice.Error]

images:
 - notice_error.png
...
 */
define("jx/notice/error", function(require, exports, module){
    
    var base = require("../../base"),
        Notice = require("../notice");
        
    /**
     * Class: Jx.Notice.Error
     * A <Jx.Notice> subclass useful for displaying error messages
     */
    var error = module.exports = new Class({
        Extends: Notice,
        options: {
            template: '<li class="jxNoticeItemContainer"><div class="jxNoticeItem"><img class="jxNoticeIcon" src="'+base.aPixel.src+'" title="Error"><span class="jxNotice"></span><a class="jxNoticeClose" href="javascript:void(0);" title="' + Locale.get('Jx','notice').closeTip + '"></a></div></li>',
            klass: 'jxNoticeError'
        }
    });
    
    if (base.global) {
        base.global.Notice.Error = module.exports;
    }

});

/*
---

name: Jx.Notice.Warning

description: Represents a single item used in a notifier.

license: MIT-style license.

requires:
 - Jx.Notice

provides: [Jx.Notice.Warning]

images:
 - notice_warning.png
...
 */
define("jx/notice/warning", function(require, exports, module){
    
    var base = require("../../base"),
        Notice = require("../notice");
        
    /**
     * Class: Jx.Notice.Success
     * A <Jx.Notice> subclass useful for displaying success messages
     */
    /**
     * Class: Jx.Notice.Success
     * A <Jx.Notice> subclass useful for displaying warning messages
     */
    var warning = module.exports = new Class({
        Extends: Notice,
        options: {
            template: '<li class="jxNoticeItemContainer"><div class="jxNoticeItem"><img class="jxNoticeIcon" src="'+base.aPixel.src+'" title="Warning"><span class="jxNotice"></span><a class="jxNoticeClose" href="javascript:void(0);" title="' + Locale.get('Jx','notice').closeTip + '"></a></div></li>',
            klass: 'jxNoticeWarning'
        }
    });
    
    
    if (base.global) {
        base.global.Notice.Warning = module.exports;
    }

});

/*
---

name: Jx.Notice.Success

description: Represents a single item used in a notifier.

license: MIT-style license.

requires:
 - Jx.Notice

provides: [Jx.Notice.Success]

images:
 - notice_success.png
...
 */
define("jx/notice/success", function(require, exports, module){
    
    var base = require("../../base"),
        Notice = require("../notice");
        
    /**
     * Class: Jx.Notice.Success
     * A <Jx.Notice> subclass useful for displaying success messages
     */
    var success = module.exports = new Class({
        Extends: Notice,
        options: {
            template: '<li class="jxNoticeItemContainer"><div class="jxNoticeItem"><img class="jxNoticeIcon" src="'+base.aPixel.src+'" title="Success"><span class="jxNotice"></span><a class="jxNoticeClose" href="javascript:void(0);" title="' + Locale.get('Jx','notice').closeTip + '"></a></div></li>',
            klass: 'jxNoticeSuccess'
        }
    });
    
    if (base.global) {
        base.global.Notice.Success = module.exports;
    }

});

/*
---

name: Jx.Notice.Information

description: Represents a single item used in a notifier.

license: MIT-style license.

requires:
 - Jx.Notice

provides: [Jx.Notice.Information]

images:
 - notice.png
...
 */
define("jx/notice/success", function(require, exports, module){
    
    var base = require("../../base"),
        Notice = require("../notice");
        
    /**
     * Class: Jx.Notice.Information
     * A <Jx.Notice> subclass useful for displaying informational messages
     */
    var information = module.exports = new Class({
        Extends: Notice,
        options: {
            template: '<li class="jxNoticeItemContainer"><div class="jxNoticeItem"><img class="jxNoticeIcon" src="'+base.aPixel.src+'" title="Success"><span class="jxNotice"></span><a class="jxNoticeClose" href="javascript:void(0);" title="' + Locale.get('Jx','notice').closeTip + '"></a></div></li>',
            klass: 'jxNoticeInformation'
        }
    });
    
    if (base.global) {
        base.global.Notice.Information = module.exports;
    }

});

/*
---

name: Jx.Adaptor.Combo

description: Namespace for all Jx.Combo adaptors.

license: MIT-style license.

requires:
 - Jx.Adaptor

provides: [Jx.Adaptor.Combo]

...
*/
/**
 * Class: Jx.Adaptor.Combo
 * The namespace for all combo adaptors
 */

define("jx/adaptor/combo", function(require){
    
    var base = require("../../base");
    
    //This just needs to set the namespace in the global object
    if (base.global) {
        base.global.Adaptor.Combo = {};
    }
});


/*
---

name: Jx.Panel.FileUpload

description: A panel subclass that is designed to be a multiple file upload panel with a queue listing.

license: MIT-style license.

requires:
 - Jx.Panel
 - Jx.ListView
 - Jx.Field.File
 - Jx.Progressbar
 - Jx.Button
 - Jx.Toolbar.Item
 - Jx.Tooltip

provides: [Jx.Panel.FileUpload]

css:
 - upload

images:
 - icons.png
...
 */
// $Id$
/**
 * Class: Jx.Panel.FileUpload
 *
 * Extends: <Jx.Panel>
 *
 * This class extends Jx.Panel to provide a consistent interface for uploading
 * files in an application.
 * 
 * Locale Keys:
 * - upload.buttonText
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/panel/fileupload", function(require, exports, module){
    
    var base = require("../../base"),
        Panel = require("../panel"),
        FileField = require("../field/file"),
        ListView = require("../listview"),
        Button = require("../button"),
        Toolbar = require("../toolbar"),
        ListItem = require("../listitem"),
        ProgressBar = require("../progressbar"),
        Tooltip = require("../tooltip");
        
    var fileUpload = module.exports = new Class({

        Extends: Panel,
        Family: 'Jx.Panel.FileUpload',
        Binds: ['moveToQueue','fileUploadBegin', 'fileUploadComplete','allUploadsComplete', 'fileUploadProgressError,', 'fileUploadError', 'fileUploadProgress'],
    
        options: {
            /**
             * Option: file
             * An object containing the options for Jx.Field.File
             */
            file: {
                autoUpload: false,
                progress: false,
                progressIDUrl: '',
                handlerUrl: '',
                progressUrl: ''
            },
    
            progressOptions: {
                template: "<li class='jxListItemContainer jxProgressBar-container' id='{id}'><div class='jxProgressBar'><div class='jxProgressBar-outline'></div><div class='jxProgressBar-fill'></div><div class='jxProgressBar-text'></div></div></li>",
                containerClass: 'progress-container',
                messageText: null,
                messageClass: 'progress-message',
                progressText: 'Uploading {filename}',
                progressClass: 'progress-bar'
            },
            /**
             * Option: onFileComplete
             * An event handler that is called when a file has been uploaded
             */
            onFileComplete: function(){},
            /**
             * Option: onComplete
             * An event handler that is called when all files have been uploaded
             */
            onComplete: function(){},
            /**
             * Option: prompt
             * The prompt to display at the top of the panel - before the
             * file input
             */
            prompt: null,
            /**
             * Option: removeOnComplete
             * Determines whether a file is removed from the queue after uploading
             */
            removeOnComplete: false
        },
        /**
         * Property: domObjA
         * An HTML Element used to hold the interface while it is being
         * constructed.
         */
        domObjA: null,
        /**
         * Property: fileQueue
         * An array holding Jx.Field.File elements that are to be uploaded
         */
        fileQueue: [],
    
        listTemplate: "<li class='jxListItemContainer' id='{id}'><a class='jxListItem' href='javascript:void(0);'><span class='itemLabel jxUploadFileName'>{name}</span><span class='jxUploadFileDelete' title='Remove this file from the queue.'></span></a></li>",
        /**
         * Method: render
         * Sets up the upload panel.
         */
        render: function () {
            //first create panel content
            this.domObjA = new Element('div', {'class' : 'jxFileUploadPanel'});
    
    
            if (this.options.prompt != undefined && this.options.prompt != null) {
                var desc;
                if (typeOf(this.options.prompt === 'string')) {
                    desc = new Element('p', {
                        html: this.options.prompt
                    });
                } else {
                    desc = this.options.prompt;
                }
                desc.inject(this.domObjA);
            }
    
            //add the file field
            this.fileOpt = this.options.file;
            this.fileOpt.template = '<div class="jxInputContainer jxFileInputs"><input class="jxInputFile" type="file" name={name} /></div>';
    
            this.file = new FileField(this.fileOpt);
            this.file.addEvent('fileSelected', this.moveToQueue);
            this.file.addTo(this.domObjA);
    
            this.listView = new ListView({
                template: '<ul class="jxListView jxList jxUploadQueue"></ul>'
                
            }).addTo(this.domObjA);
    
            if (!this.options.file.autoUpload) {
                //this is the upload button at the bottom of the panel.
                this.uploadBtn = new Button({
                    label : this.getText({set:'Jx',key:'upload',value:'buttonText'}),
                    onClick: this.upload.bind(this)
                });
                var tlb = new Toolbar({position: 'bottom', scroll: false}).add(this.uploadBtn);
                this.uploadBtn.setEnabled(false);
                this.options.toolbars = [tlb];
            }
            //then pass it on to the Panel constructor
            this.options.content = this.domObjA;
            this.parent(this.options);
        },
        /**
         * Method: moveToQueue
         * Called by Jx.Field.File's fileSelected event. Moves the selected file
         * into the upload queue.
         */
        moveToQueue: function (filename) {
            var theTemplate = new String(this.listTemplate).substitute({
                name: filename,
                id: filename
            });
            var item = new ListItem({template:theTemplate, enabled: true});
    
            document.id(item).getElement('.jxUploadFileDelete').addEvent('click', function(){
                this.listView.remove(item);
                this.file.remove(filename);
                if (this.listView.list.count() == 0) {
                    this.uploadBtn.setEnabled(false);
                }
            }.bind(this));
            this.listView.add(item);
    
            if (!this.uploadBtn.isEnabled()) {
                this.uploadBtn.setEnabled(true);
            }
    
        },
        /**
         * Method: upload
         * Called when the user clicks the upload button. Runs the upload process.
         */
        upload: function () {
    
            this.file.addEvents({
                'fileUploadBegin': this.fileUploadBegin ,
                'fileUploadComplete': this.fileUploadComplete,
                'allUploadsComplete': this.allUploadsComplete,
                'fileUploadError': this.fileUploadError,
                'fileUploadProgress': this.fileUploadProgress,
                'fileUploadProgressError': this.fileUploadError
            });
    
    
            this.file.upload();
        },
    
        fileUploadBegin: function (filename) {
            if (this.options.file.progress) {
                //progressbar
                //setup options
                // TODO: should (at least some of) these options be available to
                // the developer?
                var options = Object.merge({},this.options.progressOptions);
                options.progressText = options.progressText.substitute({filename: filename});
                options.template = options.template.substitute({id: filename});
                this.pb = new Progressbar(options);
                var item = document.id(filename);
                this.oldContents = item;
                this.listView.replace(item,$(this.pb));
            } else {
                var icon = document.id(filename).getElement('.jxUploadFileDelete')
                icon.addClass('jxUploadFileProgress').set('title','File Uploading...');
            }
        },
    
        /**
         * Method: fileUploadComplete
         * Called when a single file is uploaded completely .
         *
         * Parameters:
         * data - the data returned from the event
         * filename - the filename of the file we're tracking
         */
        fileUploadComplete: function (data, file) {
            if (data.success != undefined && data.success != null && data.success ){
                this.removeUploadedFile(file);
            } else {
                this.fileUploadError(data, file);
            }
        },
        /**
         * Method: fileUploadError
         * Called when there is an error uploading a file.
         *
         * Parameters:
         * data - the data passed back from the server, if any.
         * file - the file we're tracking
         */
        fileUploadError: function (data, filename) {
    
            if (this.options.file.progress) {
                //show this old contents...
                this.listView.replace(document.id(filename),this.oldContents);
            }
            var icon = document.id(filename).getElement('.jxUploadFileDelete');
            icon.erase('title');
            if (icon.hasClass('jxUploadFileProgress')) {
                icon.removeClass('jxUploadFileProgress').addClass('jxUploadFileError');
            } else {
                icon.addClass('jxUploadFileError');
            }
            if (data.error !== undefined && data.error !== null && data.error.message !== undefined && data.error.message !== null) {
                var tt = new Tooltip(icon, data.error.message, {
                    cssClass : 'jxUploadFileErrorTip'
                });
            }
        },
        /**
         * Method: removeUploadedFile
         * Removes the passed file from the upload queue upon it's completion.
         *
         * Parameters:
         * file - the file we're tracking
         */
        removeUploadedFile: function (filename) {
    
            if (this.options.removeOnComplete) {
               this.listView.remove(document.id(filename));
            } else {
                if (this.options.file.progress) {
                    this.listView.replace(document.id(filename),this.oldContents);
                }
                var l = document.id(filename).getElement('.jxUploadFileDelete');
                if (l.hasClass('jxUploadFileDelete')) {
                    l.addClass('jxUploadFileComplete');
                } else if (l.hasClass('jxUploadFileProgress')) {
                    l.removeClass('jxUploadFileProgress').addClass('jxUploadFileComplete');
                }
            }
    
            this.fireEvent('fileUploadComplete', filename);
        },
        /**
         * Method: fileUploadProgress
         * Function to pass progress information to the progressbar instance
         * in the file. Only used if we're tracking progress.
         */
        fileUploadProgress: function (data, file) {
            if (this.options.progress) {
                this.pb.update(data.total, data.current);
            }
        },
        /**
         * Method: allUploadCompleted
         * Called when the Jx.Field.File completes uploading
         * all files. Sets upload button to disabled and fires the allUploadCompleted
         * event.
         */
        allUploadsComplete: function () {
            this.uploadBtn.setEnabled(false);
            this.fireEvent('allUploadsCompleted',this);
        },
        /**
         * Method: createText
         * handle change in language
         */
        changeText: function (lang) {
          this.parent();
          if (this.uploadBtn != undefined && this.uploadBtn != null) {
            this.uploadBtn.setLabel({set:'Jx',key:'upload',value:'buttonText'});
          }
        }
    });
    
    if (base.global) {
        base.global.Panel.FileUpload = module.exports;
    }
    
});


/*
---

name: Jx.Panel.DataView

description: A panel used for displaying records from a store in a list-style interface rather than a grid.

license: MIT-style license.

requires:
 - Jx.Panel
 - Jx.Store
 - Jx.List

provides: [Jx.Panel.DataView]

...
 */
// $Id$
/**
 * Class: Jx.Panel.DataView
 *
 * Extends: <Jx.Panel>
 *
 * This panel extension takes a standard Jx.Store (or subclass) and displays
 * each record as an item using a provided template. It sorts the store as requested
 * before doing so. The class only creates the HTML and has no default CSS display. All
 * styling must be done by the developer using the control.
 *
 *
 * Events:
 * renderDone - fires when the panel completes creating all of the items.
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/panel/dataview", function(require, exports, module){
    
    var base = require("../../base"),
        Panel = require("../panel"),
        List = require("../list");
        
    var dataView = module.exports = new Class({

        Extends: Panel,
        Family: "Jx.Panel.DataView",
    
        options: {
            /**
             * Option: data
             * The store containing the data
             */
            data: null,
            /**
             * Option: sortColumns
             * An array of columns to sort the store by.
             */
            sortColumns: null,
            /**
             * Option: itemTemplate
             * The template to use in rendering records
             */
            itemTemplate: null,
            /**
             * Option: emptyTemplate
             * the template that is displayed when there are no records in the
             * store.
             */
            emptyTemplate: null,
            /**
             * Option: containerClass
             * The class added to the container. It can be used to target the items
             * in the panel.
             */
            containerClass: null,
            /**
             * Option: itemClass
             * The class to add to each item. Used for styling purposes
             */
            itemClass: null,
            /**
             * Option: itemOptions
             * Options to pass to the list object
             */
            listOptions: {
                select: true,
                hover: true
            }
        },
    
        init: function () {
            this.domA = new Element('div');
            this.list = this.createList(this.domA, this.options.listOptions);
            this.parent();
        },
        /**
         * APIMethod: render
         * Renders the dataview. If the store already has data loaded it will be rendered
         * at the end of the method.
         */
        render: function () {
            if (this.options.data === undefined || this.options.data === null) {
                //we can't do anything without data
                return;
            }
    
            this.options.content = this.domA;
    
            //pass to parent
            this.parent();
    
            this.domA.addClass(this.options.containerClass);
    
            //parse templates so we know what values are needed in each
            this.itemCols = this.parseTemplate(this.options.itemTemplate);
    
            this.bound.update = this.update.bind(this);
            //listen for data updates
            this.options.data.addEvent('storeDataLoaded', this.bound.update);
            this.options.data.addEvent('storeSortFinished', this.bound.update);
            this.options.data.addEvent('storeDataLoadFailed', this.bound.update);
    
            if (this.options.data.loaded) {
                this.update();
            }
    
        },
    
        /**
         * Method: draw
         * begins the process of creating the items
         */
        draw: function () {
            var n = this.options.data.count();
            if (n != undefined && n != null && n > 0) {
                for (var i = 0; i < n; i++) {
                    this.options.data.moveTo(i);
    
                    var item = this.createItem();
                    this.list.add(item);
                }
            } else {
                var empty = new Element('div', {html: this.options.emptyTemplate});
                this.list.add(item);
            }
            this.fireEvent('renderDone', this);
        },
        /**
         * Method: createItem
         * Actually does the work of getting the data from the store
         * and creating a single item based on the provided template
         */
        createItem: function () {
            //create the item
            var itemObj = {};
            this.itemCols.each(function (col) {
                itemObj[col] = this.options.data.get(col);
            }, this);
            var itemTemp = this.options.itemTemplate.substitute(itemObj);
            var item = new Element('div', {
                'class': this.options.itemClass,
                html: itemTemp
            });
            return item;
        },
        /**
         * APIMethod: update
         * This method begins the process of creating the items. It is called when
         * the store is loaded or can be called to manually recreate the view.
         */
        update: function () {
            if (!this.updating) {
                this.updating = true;
                this.list.empty();
                this.options.data.sort(this.options.sortColumns);
                this.draw();
                this.updating = false;
            }
        },
        /**
         * Method: parseTemplate
         * parses the provided template to determine which store fields are
         * required to complete it.
         *
         * Parameters:
         * template - the template to parse
         */
        parseTemplate: function (template) {
            //we parse the template based on the fields in the data store looking
            //for the pattern {column-name}. If it's in there we add it to the
            //array of ones to look for
            var columns = this.options.data.getFields();
            var arr = [];
            columns.each(function (col) {
                var s = '{' + col.name + '}';
                if (template.contains(s)) {
                    arr.push(col.name);
                }
            }, this);
            return arr;
        },
        /**
         * Method: enterItem
         * Fires mouseenter event
         *
         * Parameters:
         * item - the item that is the target of the event
         * list - the list this item is in.
         */
        enterItem: function(item, list){
            this.fireEvent('mouseenter', item, list);
        },
        /**
         * Method: leaveItem
         * Fires mouseleave event
         *
         * Parameters:
         * item - the item that is the target of the event
         * list - the list this item is in.
         */
        leaveItem: function(item, list){
            this.fireEvent('mouseleave', item, list);
        },
        /**
         * Method: selectItem
         * Fires select event
         *
         * Parameters:
         * item - the item that is the target of the event
         * list - the list this item is in.
         */
        selectItem: function(item, list){
            this.fireEvent('select', item, list);
        },
        /**
         * Method: unselectItem
         * Fires unselect event
         *
         * Parameters:
         * item - the item that is the target of the event
         * list - the list this item is in.
         */
        unselectItem: function(item, list){
            this.fireEvent('unselect', item, list);
        },
        /**
         * Method: addItem
         * Fires add event
         *
         * Parameters:
         * item - the item that is the target of the event
         * list - the list this item is in.
         */
        addItem: function(item, list) {
            this.fireEvent('add', item, list);
        },
        /**
         * Method: removeItem
         * Fires remove event
         *
         * Parameters:
         * item - the item that is the target of the event
         * list - the list this item is in.
         */
        removeItem: function(item, list) {
            this.fireEvent('remove', item, list);
        },
        /**
         * Method: createList
         * Creates the list object
         *
         * Parameters:
         * container - the container to use in the list
         * options - the options for the list
         */
        createList: function(container, options){
            return new List(container, Object.append({
                onMouseenter: this.enterItem.bind(this),
                onMouseleave: this.leaveItem.bind(this),
                onSelect:  this.selectItem.bind(this),
                onAdd: this.addItem.bind(this),
                onRemove: this.removeItem.bind(this),
                onUnselect: this.unselectItem.bind(this)
            }, options));
        }
    });
    
    if (base.global) {
        base.global.Panel.DataView = module.exports;
    }
    
});


/*
---

name: Jx.Sort.Heapsort

description: An implementation of the heap sort algorithm

license: MIT-style license.

requires:
 - Jx.Sort

provides: [Jx.Sort.Heapsort]

...
 */
// $Id$
/**
 * Class: Jx.Sort.Heapsort
 *
 * Extends: <Jx.Sort>
 *
 * Implementation of a heapsort algorithm designed to
 * work on <Jx.Store> data.
 *
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/sort/heapsort", function(require, exports, module){
    
    var base = require("../../base"),
        Sort = require("../sort");
        
    var heapsort = module.exports = new Class({
        Extends : Sort,
        Family: 'Jx.Sort.Heapsort',
    
        name : 'heapsort',
    
        /**
         * APIMethod: sort
         * Actually runs the sort on the data
         *
         * Returns: the sorted data
         */
        sort : function () {
            this.fireEvent('start');
    
            var count = this.data.length,
                end;
    
            if (count === 1) {
                return this.data;
            }
    
            if (count > 2) {
                this.heapify(count);
    
                end = count - 1;
                while (end > 1) {
                    this.data.swap(end, 0);
                    end = end - 1;
                    this.siftDown(0, end);
                }
            } else {
                // check then order the two we have
                if ((this.comparator((this.data[0]).get(this.col), (this.data[1])
                        .get(this.col)) > 0)) {
                    this.data.swap(0, 1);
                }
            }
    
            this.fireEvent('stop');
            return this.data;
        },
    
        /**
         * Method: heapify
         * Puts the data in Max-heap order
         *
         * Parameters: count - the number of records we're sorting
         */
        heapify : function (count) {
            var start = Math.round((count - 2) / 2);
    
            while (start >= 0) {
                this.siftDown(start, count - 1);
                start = start - 1;
            }
        },
    
        /**
         * Method: siftDown
         *
         * Parameters: start - the beginning of the sort range end - the end of the
         * sort range
         */
        siftDown : function (start, end) {
            var root = start,
                child;
    
            while (root * 2 <= end) {
                child = root * 2;
                if ((child + 1 < end) && (this.comparator((this.data[child]).get(this.col),
                                (this.data[child + 1]).get(this.col)) < 0)) {
                    child = child + 1;
                }
                if ((this.comparator((this.data[root]).get(this.col),
                        (this.data[child]).get(this.col)) < 0)) {
                    this.data.swap(root, child);
                    root = child;
                } else {
                    return;
                }
            }
        }
    
    });

    if (base.global) {
        base.global.Sort.Heapsort = module.exports;
    }
    
});

/*
---

name: Jx.Sort.Nativesort

description: An implementation of the Javascript native sorting with the Jx.Sort interface

license: MIT-style license.

requires:
 - Jx.Sort

provides: [Jx.Sort.Nativesort]

...
 */
// $Id$
/**
 * Class: Jx.Sort.Nativesort
 *
 * Extends: <Jx.Sort>
 *
 * Implementation of a native sort algorithm designed to work on <Jx.Store> data.
 *
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/sort/nativesort", function(require, exports, module){
    
    var base = require("../../base"),
        Sort = require("../sort");
        
    var nativesort = module.exports = new Class({
        Extends : Sort,
        Family: 'Jx.Sort.Nativesort',
    
        name : 'nativesort',
    
        /**
         * Method: sort
         * Actually runs the sort on the data
         *
         * Returns:
         * the sorted data
         */
        sort : function () {
            this.fireEvent('start');
    
            var compare = function (a, b) {
                return this.comparator((this.data[a]).get(this.col), (this.data[b])
                        .get(this.col));
            };
    
            this.data.sort(compare);
            this.fireEvent('stop');
            return this.data;
        }
    
    });

    if (base.global) {
        base.global.Sort.Nativesort = module.exports;
    }
    
});

/*
---

name: Jx.Sort.Mergesort

description: An implementation of the merge sort algorithm

license: MIT-style license.

requires:
 - Jx.Sort

provides: [Jx.Sort.Mergesort]

...
 */
// $Id$
/**
 * class: Jx.Sort.Mergesort
 *
 * Extends: <Jx.Sort>
 *
 * Implementation of a mergesort algorithm designed to
 * work on <Jx.Store> data.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/sort/mergesort", function(require, exports, module){
    
    var base = require("../../base"),
        Sort = require("../sort");
        
    var mergesort = module.exports = new Class({
        Extends : Sort,
        Family: 'Jx.Sort.Mergesort',
    
        name : 'mergesort',
    
        /**
         * APIMethod: sort
         * Actually runs the sort on the data
         *
         * returns: the sorted data
         */
        sort : function () {
            this.fireEvent('start');
            var d = this.mergeSort(this.data);
            this.fireEvent('stop');
            return d;
    
        },
    
        /**
         * Method: mergeSort
         * Does the physical sorting. Called
         * recursively.
         *
         * Parameters:
         * arr - the array to sort
         *
         * returns: the sorted array
         */
        mergeSort : function (arr) {
            if (arr.length <= 1) {
                return arr;
            }
    
            var middle = (arr.length) / 2,
                left = arr.slice(0, middle),
                right = arr.slice(middle),
                result;
            left = this.mergeSort(left);
            right = this.mergeSort(right);
            result = this.merge(left, right);
            return result;
        },
    
        /**
         * Method: merge
         * Does the work of merging to arrays in order.
         *
         * parameters:
         * left - the left hand array
         * right - the right hand array
         *
         * returns: the merged array
         */
        merge : function (left, right) {
            var result = [];
    
            while (left.length > 0 && right.length > 0) {
                if (this.comparator((left[0]).get(this.col), (right[0])
                        .get(this.col)) <= 0) {
                    result.push(left[0]);
                    left = left.slice(1);
                } else {
                    result.push(right[0]);
                    right = right.slice(1);
                }
            }
            while (left.length > 0) {
                result.push(left[0]);
                left = left.slice(1);
            }
            while (right.length > 0) {
                result.push(right[0]);
                right = right.slice(1);
            }
            return result;
        }
    
    });

    if (base.global) {
        base.global.Sort.Mergesort = module.exports;
    }
    
});

/*
---

name: Jx.Sort.Quicksort

description: An implementation of the quick sort algorithm.

license: MIT-style license.

requires:
 - Jx.Sort

provides: [Jx.Sort.Quicksort]

...
 */
// $Id$
/**
 * Class: Jx.Sort.Quicksort
 *
 * Extends: <Jx.Sort>
 *
 * Implementation of a quicksort algorithm designed to
 * work on <Jx.Store> data.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/sort/quicksort", function(require, exports, module){
    
    var base = require("../../base"),
        Sort = require("../sort");
        
    var quicksort = module.exports = new Class({
        Extends : Sort,
        Family: 'Jx.Sort.Quicksort',
    
        name : 'quicksort',
    
        /**
         * APIMethod: sort
         * Actually runs the sort on the data
         *
         * returns: the sorted data
         */
        sort : function (left, right) {
            this.fireEvent('start');
    
            if (left === undefined || left === null) {
                left = 0;
            }
            if (right === undefined && right === null) {
                right = this.data.length - 1;
            }
    
            this.quicksort(left, right);
    
            this.fireEvent('stop');
    
            return this.data;
    
        },
    
        /**
         * Method: quicksort
         * Initiates the sorting. Is
         * called recursively
         *
         * Parameters:
         * left - the left hand, or lower, bound of the sort
         * right - the right hand, or upper, bound of the sort
         */
        quicksort : function (left, right) {
            if (left >= right) {
                return;
            }
    
            var index = this.partition(left, right);
            this.quicksort(left, index - 1);
            this.quicksort(index + 1, right);
        },
    
        /**
         * Method: partition
         *
         * Parameters:
         * left - the left hand, or lower, bound of the sort
         * right - the right hand, or upper, bound of the sort
         */
        partition : function (left, right) {
            this.findMedianOfMedians(left, right);
            var pivotIndex = left,
                pivotValue = (this.data[pivotIndex]).get(this.col),
                index = left,
                i;
    
            this.data.swap(pivotIndex, right);
            for (i = left; i < right; i++) {
                if (this.comparator((this.data[i]).get(this.col),
                        pivotValue) < 0) {
                    this.data.swap(i, index);
                    index = index + 1;
                }
            }
            this.data.swap(right, index);
    
            return index;
    
        },
    
        /**
         * Method: findMedianOfMedians
         *
         * Parameters: l
         * eft - the left hand, or lower, bound of the sort
         * right - the right hand, or upper, bound of the sort
         */
        findMedianOfMedians : function (left, right) {
            if (left === right) {
                return this.data[left];
            }
    
            var i,
                shift = 1,
                endIndex,
                medianIndex;
            while (shift <= (right - left)) {
                for (i = left; i <= right; i += shift * 5) {
                    endIndex = (i + shift * 5 - 1 < right) ? i + shift * 5 - 1 : right;
                    medianIndex = this.findMedianIndex(i, endIndex,
                            shift);
    
                    this.data.swap(i, medianIndex);
                }
                shift *= 5;
            }
    
            return this.data[left];
        },
    
        /**
         * Method: findMedianIndex
         *
         * Parameters:
         * left - the left hand, or lower, bound of the sort
         * right - the right hand, or upper, bound of the sort
         */
        findMedianIndex : function (left, right, shift) {
            var groups = Math.round((right - left) / shift + 1),
                k = Math.round(left + groups / 2 * shift),
                i,
                minIndex,
                v,
                minValue,
                j;
            if (k > this.data.length - 1) {
                k = this.data.length - 1;
            }
            for (i = left; i < k; i += shift) {
                minIndex = i;
                v = this.data[minIndex];
                minValue = v.get(this.col);
    
                for (j = i; j <= right; j += shift) {
                    if (this.comparator((this.data[j]).get(this.col),
                            minValue) < 0) {
                        minIndex = j;
                        minValue = (this.data[minIndex]).get(this.col);
                    }
                }
                this.data.swap(i, minIndex);
            }
    
            return k;
        }
    });

    if (base.global) {
        base.global.Sort.Quicksort = module.exports;
    }
    
});

/*
---

name: Jx.Dialog.Message

description: A subclass of jx.Dialog for displaying messages w/a single OK button.

license: MIT-style license.

requires:
 - Jx.Dialog
 - Jx.Button
 - Jx.Toolbar.Item

provides: [Jx.Dialog.Message]

css:
 - message

...
 */
// $Id$
/**
 * Class: Jx.Dialog.Message
 *
 * Extends: <Jx.Dialog>
 *
 * Jx.Dialog.Message is an extension of Jx.Dialog that allows the developer
 * to display a message to the user. It only presents an OK button.
 * 
 * Locale Keys:
 * - message.okButton
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner
 *
 * This file is licensed under an MIT style license
 */
define("jx/dialog/message", function(require, exports, module){
    
    var base = require("../../base"),
        Dialog = require("../dialog"),
        Toolbar = require("../toolbar"),
        Button = require("../button");
        
    var message = module.exports = new Class({
        Extends: Dialog,
        Family: 'Jx.Dialog.Message',
        Binds: ['onOk'],
        options: {
            /**
             * Option: message
             * The message to display to the user
             */
            message: '',
            /**
             * Option: width
             * default width of message dialogs is 300px
             */
            width: 300,
            /**
             * Option: height
             * default height of message dialogs is 150px
             */
            height: 150,
            /**
             * Option: close
             * by default, message dialogs are closable
             */
            close: true,
            /**
             * Option: resize
             * by default, message dialogs are resizable
             */
            resize: true,
            /**
             * Option: collapse
             * by default, message dialogs are not collapsible
             */
            collapse: false,
            useKeyboard : true,
            keys : {
              'enter' : 'ok'
            },
            toolbarOptions: {
                align: "center",
                position: 'bottom',
                scroll: false
            }
        },
        /**
         * Method: render
         * constructs the dialog.
         */
        render: function () {
            //create content to be added
            this.buttons = new Toolbar(this.options.toolbarOptions);
            this.ok = new Button({
                label: this.getText({set:'Jx',key:'message',value:'okButton'}),
                onClick: this.onOk
            });
            this.buttons.add(this.ok);
            this.options.toolbars = [this.buttons];
            var type = typeOf(this.options.message);
            if (type === 'string' || type == 'object' || type == 'element') {
                this.question = new Element('div', {
                    'class': 'jxMessage'
                });
                switch(type) {
                  case 'string':
                  case 'object':
                    this.question.set('html', this.getText(this.options.message));
                  break;
                  case 'element':
                    this.options.message.inject(this.question);
                    break;
                }
            } else {
                this.question = this.options.question;
                document.id(this.question).addClass('jxMessage');
            }
            this.options.content = this.question;
            if(this.options.useKeyboard) {
              var self = this;
              this.options.keyboardMethods.ok = function(ev) { ev.preventDefault(); self.close(); }
            }
            this.parent();
            if(this.options.useKeyboard) {
              this.keyboard.addEvents(this.getKeyboardEvents());
            }
        },
        /**
         * Method: onOk
         * Called when the OK button is clicked. Closes the dialog.
         */
        onOk: function () {
            this.close();
        },
        
        /**
         * APIMethod: setMessage
         * set the message of the dialog, useful for responding to language
         * changes on the fly.
         *
         * Parameters
         * message - {String} the new message
         */
        setMessage: function(message) {
          this.options.message = message;
          if (this.question != undefined && this.question != null) {
            this.question.set('html',this.getText(message));
          }
        },
        
        /**
         * Method: createText
         * handle change in language
         */
        changeText: function (lang) {
          this.parent();
          if (this.ok != undefined && this.ok != null) {
            this.ok.setLabel({set:'Jx',key:'message',value:'okButton'});
          }
          if(typeOf(this.options.message) === 'object') {
            this.question.set('html', this.getText(this.options.message))
          }
        }
    });
    
    if (base.global) {
        base.global.Dialog.Message = module.exports;
    }
    
});


/*
---

name: Jx.Dialog.Confirm

description: A subclass of Jx.dialog for asking a yes/no type question of the user.

license: MIT-style license.

requires:
 - Jx.Dialog
 - Jx.Button
 - Jx.Toolbar.Item

provides: [Jx.Dialog.Confirm]

css:
 - confirm

...
 */
// $Id$
/**
 * Class: Jx.Dialog.Confirm
 *
 * Extends: <Jx.Dialog>
 *
 * Jx.Dialog.Confirm is an extension of Jx.Dialog that allows the developer
 * to prompt their user with e yes/no question.
 * 
 * Locale Keys:
 * - confirm.affirmitiveLabel
 * - confirm.negativeLabel
 * 
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner
 *
 * This file is licensed under an MIT style license
 */
define("jx/dialog/confirm", function(require, exports, module){
    
    var base = require("../../base"),
        Dialog = require("../dialog"),
        Toolbar = require("../toolbar"),
        Button = require("../button");
        
    var confirm = module.exports = new Class({

        Extends: Dialog,
        Family: "Jx.Dialog.Confirm",
    
        options: {
            /**
             * Option: question
             * The question to ask the user
             */
            question: '',
            /**
             * Jx.Dialog option defaults
             */
            useKeyboard : true,
            keys : {
              'esc'   : 'cancel',
              'enter' : 'ok'
            },
            width: 300,
            height: 150,
            close: false,
            resize: true,
            collapse: false,
            toolbarOptions: {
                align: "center",
                position: 'bottom',
                scroll: false
            }
        },
        /**
         * Reference to MooTools keyboards Class for handling keypress events like Enter or ESC
         */
        keyboard : null,
        /**
         * APIMethod: render
         * creates the dialog
         */
        render: function () {
            //create content to be added
            //turn scrolling off as confirm only has 2 buttons.
            this.buttons = new Toolbar(this.options.toolbarOptions);
    
            // COMMENT: returning boolean would be more what people expect instead of a localized label of a button?
            this.ok = new Button({
                label: this.getText({set:'Jx',key:'confirm',value:'affirmativeLabel'}),
                onClick: this.onClick.bind(this, true)
            }),
            this.cancel = new Button({
                label: this.getText({set:'Jx',key:'confirm',value:'negativeLabel'}),
                onClick: this.onClick.bind(this, false)
            })
            this.buttons.add(this.ok, this.cancel);
            this.options.toolbars = [this.buttons];
            var type = typeOf(this.options.question);
            if (type === 'string' || type === 'object' || type == 'element'){
                this.question = new Element('div', {
                    'class': 'jxConfirmQuestion'
                });
                switch(type) {
                  case 'string':
                  case 'object':
                    this.question.set('html', this.getText(this.options.question));
                  break;
                  case 'element':
                    this.options.question.inject(this.question);
                    break;
                }
            } else {
                this.question = this.options.question;
                document.id(this.question).addClass('jxConfirmQuestion');
            }
            this.options.content = this.question;
    
            // add default key functions
            if(this.options.useKeyboard) {
              var self = this;
              this.options.keyboardMethods.ok     = function(ev) { ev.preventDefault(); self.onClick(true); }
              this.options.keyboardMethods.cancel = function(ev) { ev.preventDefault(); self.onClick(false); }
            }
            this.parent();
            // add new ones
            if(this.options.useKeyboard) {
              this.keyboard.addEvents(this.getKeyboardEvents());
            }
        },
        /**
         * Method: onClick
         * called when any button is clicked. It hides the dialog and fires
         * the close event passing it the value of the button that was pressed.
         */
        onClick: function (value) {
            this.isOpening = false;
            this.hide();
            this.fireEvent('close', [this, value]);
        },
        
        changeText: function (lang) {
            this.parent();
            if (this.ok != undefined && this.ok != null) {
                this.ok.setLabel({set:'Jx',key:'confirm',value:'affirmativeLabel'});
            }
            if (this.cancel != undefined && this.cancel != null) {
                this.cancel.setLabel({set:'Jx',key:'confirm',value:'negativeLabel'});
            }
          if(typeOf(this.options.question) === 'object') {
            this.question.set('html', this.getText(this.options.question))
          }
        }
    
    });
    
    if (base.global) {
        base.global.Dialog.Confirm = module.exports;
    }
});

/*
---

name: Jx.Dialog.Prompt

description: A subclass of Jx.dialog for prompting the user for text input.

license: MIT-style license.

requires:
 - Jx.Dialog
 - Jx.Button
 - Jx.Toolbar.Item
 - Jx.Field.Text

provides: [Jx.Dialog.Prompt]

...
 */
// $Id$
/**
 * Class: Jx.Dialog.Prompt
 *
 * Extends: <Jx.Dialog>
 *
 * Jx.Dialog.Prompt is an extension of Jx.Dialog that allows the developer
 * to display a message to the user and ask for a text response. 
 * 
 * Locale Keys:
 * - prompt.okButton
 * - prompt.cancelButton
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner
 *
 * This file is licensed under an MIT style license
 */
define("jx/dialog/prompt", function(require, exports, module){
    
    var base = require("../../base"),
        Dialog = require("../dialog"),
        Toolbar = require("../toolbar"),
        Button = require("../button"),
        TextField = require("../field/text"),
        FieldValidator = require("../plugin/field/validator");
        
    var prompt = module.exports = new Class({

        Extends: Dialog,
        Family: "Jx.Dialog.Prompt",
    
        options: {
            /**
             * Option: prompt
             * The message to display to the user
             */
            prompt: '',
            /**
             * Option: startingValue
             * The startingvalue to place in the input field
             */
            startingValue: '',
            /**
             * Option: fieldOptions,
             * Object with various
             */
            fieldOptions: {
              type : 'Text',
              options: {},
              validate : true,
              validatorOptions: {
                validators: ['required'],
                validateOnBlur: true,
                validateOnChange : false
              },
              showErrorMsg : true
            },
            /**
             * Jx.Dialog option defaults
             */
            width: 400,
            height: 200,
            close: true,
            resize: true,
            collapse: false,
            useKeyboard : true,
            keys : {
              'esc'   : 'cancel',
              'enter' : 'ok'
            }
        },
        /**
         * APIMethod: render
         * constructs the dialog.
         */
        render: function () {
            //create content to be added
            this.buttons = new Toolbar({position: 'bottom',scroll:false});
            this.ok = new Button({
                    label: this.getText({set:'Jx',key:'prompt',value:'okButton'}),
                    onClick: this.onClick.bind(this, true)
                });
            this.cancel = new Button({
                    label: this.getText({set:'Jx',key:'prompt',value:'cancelButton'}),
                    onClick: this.onClick.bind(this, false)
                });
            this.buttons.add(this.ok, this.cancel);
            this.options.toolbars = [this.buttons];
    
            var fOpts = this.options.fieldOptions;
                fOpts.options.label = this.getText(this.options.prompt);
                fOpts.options.value = this.options.startingValue;
                fOpts.options.containerClass = 'jxPrompt';
            
            var t = typeOf(fOpts.type);
            if(t === 'string') {
                var f = require("jx/field/"+fOpts.type);
                if (f) {
                    this.field = new f(fOpts.options);
                }
            }else if(t === 'Jx.Object'){
              this.field = fOpts.type;
            }else{
              // warning and fallback?
              window.console ? console.warn("Field type does not exist %o, using Jx.Field.Text", fOpts.type) : false;
              this.field = new TextField(fOpts.options);
            }
    
            if(this.options.fieldOptions.validate) {
              this.validator = new FieldValidator(this.options.fieldOptions.validatorOptions);
              this.validator.attach(this.field);
            }
    
            this.options.content = document.id(this.field);
            
            if(this.options.useKeyboard) {
              var self = this;
              this.options.keyboardMethods.ok     = function(ev) { ev.preventDefault(); self.onClick(true); }
              this.options.keyboardMethods.cancel = function(ev) { ev.preventDefault(); self.onClick(false); }
            }
            this.parent();
            if(this.options.useKeyboard) {
              this.keyboard.addEvents(this.getKeyboardEvents());
            }
        },
        /**
         * Method: onClick
         * Called when the OK button is clicked. Closes the dialog.
         */
        onClick: function (value) {
            if(value && this.validator != undefined && this.validator != null) {
              if(this.validator.isValid()) {
                this.isOpening = false;
                this.hide();
                this.fireEvent('close', [this, value, this.field.getValue()]);
              }else{
                //this.options.content.adopt(this.validator.getError());
                this.field.field.focus.delay(50, this.field.field);
                //todo: show error messages ?
              }
            }else{
              this.isOpening = false;
              this.hide();
              this.fireEvent('close', [this, value, this.field.getValue()]);
            }
        },
        
        changeText: function (lang) {
            this.parent();
            if (this.ok != undefined && this.ok != null) {
                this.ok.setLabel({set:'Jx',key:'prompt',value:'okButton'});
            }
            if (this.cancel != undefined && this.cancel != null) {
                this.cancel.setLabel({set:'Jx',key:'prompt',value:'cancelButton'});
            }
          this.field.label.set('html', this.getText(this.options.prompt));
        }
    });
    
    if (base.global) {
        base.global.Dialog.Prompt = module.exports;
    }
    
});


/*
---

name: Locale.Spanish.ES

description: Default translations of text strings used in JX for Spanish (Spain) (es-ES)

license: MIT-style license.

requires:
 - More/Locale

provides: [Locale.Spanish.ES]
...
 */
/**
 * Author: Ing. Axel Mendoza Pupo.
 * 
 * License:
 * Copyright (c) 2011, Ing. Axel Mendoza Pupo.
 *
 * This file is licensed under an MIT style license
 *
 */

define('jx/locale/spanish', function(require){
    
    Locale.define('es-ES', 'Jx', {
        
        'widget': {
            busyMessage: 'Procesando ...'
        },
        'colorpalette': {
            alphaLabel: 'alpha (%)'
        },
        notice: {
            closeTip: 'Cierre esta notificación'
        },
        progressbar: {
            messageText: 'Cargando...',
            progressText: '{progress} de {total}'
        },
        field: {
            requiredText: '*'
        },
        file: {
            browseLabel: 'Navegar...'
        },
        'formatter': {
            'boolean': {
                'true': 'Si',
                'false': 'No'
            },
            'currency': {
                sign: '€'
            },
            'number': {
                decimalSeparator: ',',
                thousandsSeparator: '.'
            }
        },
        splitter: {
            barToolTip: 'Arrastre esta barra para redimensionar'
        },
            panelset: {
                barToolTip: 'Arrastre esta barra para redimensionar'
            },
        panel: {
            collapseTooltip: 'Colapsar/Expandir el Panel',
                collapseLabel: 'Colapsar',
                expandLabel: 'Expandir',
                maximizeTooltip: 'Maximizar Panel',
                maximizeLabel: 'Maximizar',
                restoreTooltip: 'Restaurar Panel',
                restoreLabel: 'Restaurar',
                closeTooltip: 'Cerrar Panel',
                closeLabel: 'Cerrar'
        },
        confirm: {
            affirmativeLabel: 'Si',
                negativeLabel: 'No'
        },
        dialog: {
            resizeToolTip: 'Redimensionar Dialogo'
        },
        message: {
            okButton: 'Ok'
        },
        prompt: {
            okButton: 'Ok',
            cancelButton: 'Cancelar'
        },
        upload: {
            buttonText: 'Subir Archivos'
        },
        'plugin': {
                'resize': {
                    tooltip: 'Arrastre para redimensionar, Doble click para ajustar.'
                },
                'editor': {
                    submitButton: 'Guardar',
                    cancelButton: 'Cancelar'
                }
        }
    });
    
});

/*
---

name: Locale.Russian

description: Default translations of text strings used in JX for Russia (Russia) (ru-RU)

license: MIT-style license.

requires:
 - More/Locale

provides: [Locale.Russian]

...
 */

define('jx/locale/russian', function(require){
    
    Locale.define('ru-RU-unicode', 'Jx', {
        
        'widget': {
            busyMessage: 'Обработка...'
        },
        'colorpalette': {
            alphaLabel: 'alpha (%)'
        },
        notice: {
            closeTip: 'закрыть это сообщение'
        },
        progressbar: {
            messageText: 'Загрузка...',
            progressText: '{progress} из {total}'
        },
        field: {
            requiredText: '*'
        },
        file: {
            browseLabel: 'Выбрать...'
        },
        'formatter' : {
            'boolean': {
                'true': 'Да',
                'false': 'Нет'
            },
            'currency': {
                sign: 'р.'
            },
            'number': {
                decimalSeparator: ',',
                thousandsSeparator: ' '
            }
        },
        splitter: {
            barToolTip: 'потяни, чтобы изменить размер'
        },
        panelset: {
            barToolTip: 'потяни, чтобы изменить размер'
        },
        panel: {
            collapseTooltip: 'Свернуть/Развернуть Панель',
            collapseLabel: 'Свернуть',
            expandLabel: 'Развернуть',
            maximizeTooltip: 'Увеличить Панель',
            maximizeLabel: 'Увеличить',
            restoreTooltip: 'Восстановить Панель',
            restoreLabel: 'Восстановить',
            closeTooltip: 'Закрыть Панель',
            closeLabel: 'Закрыть'
        },
        confirm: {
            affirmativeLabel: 'Да',
        negativeLabel: 'Нет'
        },
        dialog: {
            resizeToolTip: 'Изменить размер'
        },
        message: {
            okButton: 'Ок'
        },
        prompt: {
            okButton: 'Ок',
            cancelButton: 'Отмена'
        },
        upload: {
            buttonText: 'Загрузка файла'
        },
        'plugin': {
            'resize': {
                tooltip: 'Потяни, чтобы изменить, двойной щелчок для авто размера.'
            },
            'editor': {
                submitButton: 'Сохранить',
                cancelButton: 'Отмена'
            }
        }
    });
    
});

/*
---
name: Locale.German

description: Default translations of text strings used in JX for German (Germany) (de-DE)

license: MIT-style license.

requires:
 - More/Locale

provides: [Locale.German]

...
 */

define('jx/locale/german', function(require, exports, module){

    Locale.define('de-DE', 'Date', {
      // need to overwrite 'M&auml;rz' to 'März' for jx.select fields
      months: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
    });
    
    Locale.define('de-DE', 'Jx', {
    
        'widget': {
            busyMessage: 'Arbeite ...'
        },
        'colorpalette': {
            alphaLabel: 'alpha (%)'
        },
        notice: {
            closeTip: 'Notiz schließen'
        },
        progressbar: {
            messageText: 'Lade...',
            progressText: '{progress} von {total}'
        },
        field: {
            requiredText: '*'
        },
        file: {
            browseLabel: 'Durchsuchen...'
        },
        'formatter' : {
            'boolean': {
                'true': 'Ja',
                'false': 'Nein'
            },
            'currency': {
                sign: '€'
            },
            'number': {
                decimalSeparator: ',',
                thousandsSeparator: '.'
            }
        },
        splitter: {
            barToolTip: 'Ziehen Sie diese Leiste um die Größe zu verändern'
        },
        panelset: {
            barToolTip: 'Ziehen Sie diese Leiste um die Größe zu verändern'
        },
        panel: {
            collapseTooltip: 'Panel ein-/ausklappen', //colB
            collapseLabel: 'Einklappen',  //colM
            expandLabel: 'Ausklappen', //colM
            maximizeTooltip: 'Panel maximieren',
            maximizeLabel: 'maximieren',
            restoreTooltip: 'Panel wieder herstellen', //maxB
            restoreLabel: 'wieder herstellen', //maxM
            closeTooltip: 'Panel schließen', //closeB
            closeLabel: 'Schließen' //closeM
        },
        confirm: {
            affirmativeLabel: 'Ja',
        negativeLabel: 'Nein'
        },
        dialog: {
            label: 'Neues Fenster'
        },
        message: {
            okButton: 'Ok'
        },
        prompt: {
            okButton: 'Ok',
            cancelButton: 'Abbrechen'
        },
        upload: {
            buttonText: 'Dateien hochladen'
        },
        'plugin': {
            'resize': {
                tooltip: 'Klicken um Größe zu verändern. Doppelklick für automatische Anpassung.'
            },
            'editor': {
                submitButton: 'Speichern',
                cancelButton: 'Abbrechen'
            }
        }
    });
    
});


/*
---

name: Jx.Splitter.Snap

description: A helper class to create an element that can snap a split panel open or closed.

license: MIT-style license.

requires:
 - Jx.Splitter

provides: [Jx.Splitter.Snap]

...
 */
// $Id$
/**
 * Class: Jx.Splitter.Snap
 *
 * Extends: <Jx.Object>
 *
 * A helper class to create an element that can snap a split panel open or
 * closed.
 *
 * Example:
 * (code)
 * (end)
 *
 * License:
 * Copyright (c) 2008, DM Solutions Group Inc.
 *
 * This file is licensed under an MIT style license
 */
define("jx/splitter/snap", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object");
        
    var snap = module.exports = new Class({
        Extends: jxObject,
        Family: 'Jx.Splitter.Snap',
        /**
         * Property: snap
         * {HTMLElement} the DOM element of the snap (the thing that gets
         * clicked).
         */
        snap: null,
        /**
         * Property: element
         * {HTMLElement} An element of the <Jx.Splitter> that gets controlled
         * by this snap
         */
        element: null,
        /**
         * Property: splitter
         * {<Jx.Splitter>} the splitter that this snap is associated with.
         */
        splitter: null,
        /**
         * Property: layout
         * {String} track the layout of the splitter for convenience.
         */
        layout: 'vertical',
        /**
         * Parameters:
         * snap - {HTMLElement} the clickable thing that snaps the element
         *           open and closed
         * element - {HTMLElement} the element that gets controlled by the snap
         * splitter - {<Jx.Splitter>} the splitter that this all happens inside of.
         */
        parameters: ['snap','element','splitter','events'],
    
        /**
         * APIMethod: init
         * Create a new Jx.Splitter.Snap
         */
        init: function() {
            this.snap = this.options.snap;
            this.element = this.options.element;
            this.splitter = this.options.splitter;
            this.events = this.options.events;
            var jxl = this.element.retrieve('jxLayout');
            jxl.addEvent('sizeChange', this.sizeChange.bind(this));
            this.layout = this.splitter.options.layout;
            var jxo = jxl.options;
            var size = this.element.getContentBoxSize();
            if (this.layout == 'vertical') {
                this.originalSize = size.height;
                this.minimumSize = jxo.minHeight ? jxo.minHeight : 0;
            } else {
                this.originalSize = size.width;
                this.minimumSize = jxo.minWidth ? jxo.minWidth : 0;
            }
            this.events.each(function(eventName) {
                this.snap.addEvent(eventName, this.toggleElement.bind(this));
            }, this);
        },
    
        /**
         * Method: toggleElement
         * Snap the element open or closed.
         */
        toggleElement: function() {
            var size = this.element.getContentBoxSize();
            var newSize = {};
            if (this.layout == 'vertical') {
                if (size.height == this.minimumSize) {
                    newSize.height = this.originalSize;
                } else {
                    this.originalSize = size.height;
                    newSize.height = this.minimumSize;
                }
            } else {
                if (size.width == this.minimumSize) {
                    newSize.width = this.originalSize;
                } else {
                    this.originalSize = size.width;
                    newSize.width = this.minimumSize;
                }
            }
            this.element.resize(newSize);
            this.splitter.sizeChanged();
        },
    
        /**
         * Method: sizeChanged
         * Handle the size of the element changing to see if the
         * toggle state has changed.
         */
        sizeChange: function() {
            var size = this.element.getContentBoxSize();
            if (this.layout == 'vertical') {
                if (size.height == this.minimumSize) {
                    this.snap.addClass('jxSnapClosed');
                    this.snap.removeClass('jxSnapOpened');
                } else {
                    this.snap.addClass('jxSnapOpened');
                    this.snap.removeClass('jxSnapClosed');
                }
            } else {
                if (size.width == this.minimumSize) {
                    this.snap.addClass('jxSnapClosed');
                    this.snap.removeClass('jxSnapOpened');
                } else {
                    this.snap.addClass('jxSnapOpened');
                    this.snap.removeClass('jxSnapClosed');
                }
            }
        }
    });
    
    if (base.global) {
        base.global.Splitter.Snap = module.exports;
    }
});

/*
---

name: Jx.Plugin.Tree

description: Namespace for Jx.Tree plugins

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.Tree]

...
 */
/**
 * Class: Jx.Plugin.Tree
 * Jx.Tree plugin namespace
 *
 *
 * License:
 * Copyright (c) 2011, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/tree", function(require){
    
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.Tree = {};
    }
});

/*
---

name: Jx.Plugin.ToolbarContainer

description: Namespace for Jx.Toolbar.Container

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.ToolbarContainer]

...
 */
/**
 * Class: Jx.Plugin.Toolbar
 * Toolbar plugin namespace
 *
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/toolbarcontainer", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.ToolbarContainer = {};
    }
});

/*
---

name: Jx.Plugin.Form

description: Namespace for Jx.Form plugins

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.Form]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Form
 * Form plugin namespace
 *
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/form", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.Form = {};
    }
});

/*
---

name: Jx.Plugin.Editor

description: Editor plugins namespace. 

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.Editor]

...
 */
define("jx/plugin/editor", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.Editor = {};
    }
});

/*
---

name: Jx.Plugin.DataView

description: Namespace for DataView plugins

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.DataView]
...
 */
/**
 * Namespace: Jx.Plugin.DataView
 * The namespace for all dataview plugins
 */
define("jx/plugin/dataview", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.DataView = {};
    }
});

/*
---

name: Jx.Plugin.Panel

description: Namespace for Jx.Panel.Form plugins

license: MIT-style license.

requires:
 - Jx.Plugin

provides: [Jx.Plugin.Panel]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Panel
 * Jx.Panel.Form plugin namespace
 *
 *
 * License:
 * Copyright (c) 2011, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/panel", function(require){
    var base = require("../../base");
    if (base.global) {
        base.global.Plugin.Panel = {};
    }
});

/*
---

name: Jx.Editor.Selection

description: Selection object for use in the editor.

license: MIT-style license.

requires:
 - Jx.Editor

provides: [Jx.Editor.Selection]

...
 */
/**
 * Class: Jx.Editor.Selection
 * 
 * This class provides a selection object for working with textual 
 * selections in an IFrame (specifically the one for <Jx.Editor>).
 *
 * Copyright (c) 2011 by Jonathan Bomgardner
 * Licensed under an mit-style license
 */
define("jx/editor/selection", function(require, exports, module){
    
    var base = require("../../base"),
        jxObject = require("../object");
        
    var selection = module.exports = new Class({
    
        Extends: jxObject,
        Family: 'Jx.Editor.Selection',
        
        parameters: ["win", "options"],
        
        options: {},
        
        init: function () {
            this.parent();
            this.win = this.options.win;
        },
        
        getSelection: function(){
            this.win.focus();
            return (this.win.getSelection) ? this.win.getSelection() : this.win.document.selection;
        },
    
        getRange: function(){
            var s = this.getSelection();
    
            if (!s) return null;
    
            try {
                return s.rangeCount > 0 ? s.getRangeAt(0) : (s.createRange ? s.createRange() : null);
            } catch(e) {
                // IE bug when used in frameset
                return this.doc.body.createTextRange();
            }
        },
    
        setRange: function(range){
            if (range.select){
                Function.attempt(function(){
                    range.select();
                });
            } else {
                var s = this.getSelection();
                if (s.addRange){
                    s.removeAllRanges();
                    s.addRange(range);
                }
            }
        },
    
        selectNode: function(node, collapse){
            var r = this.getRange();
            var s = this.getSelection();
    
            if (r.moveToElementText){
                Function.attempt(function(){
                    r.moveToElementText(node);
                    r.select();
                });
            } else if (s.addRange){
                collapse ? r.selectNodeContents(node) : r.selectNode(node);
                s.removeAllRanges();
                s.addRange(r);
            } else {
                s.setBaseAndExtent(node, 0, node, 1);
            }
    
            return node;
        },
    
        isCollapsed: function(){
            var r = this.getRange();
            if (r.item) return false;
            return r.boundingWidth == 0 || this.getSelection().isCollapsed;
        },
    
        collapse: function(toStart){
            var r = this.getRange();
            var s = this.getSelection();
    
            if (r.select){
                r.collapse(toStart);
                r.select();
            } else {
                toStart ? s.collapseToStart() : s.collapseToEnd();
            }
        },
    
        getContent: function(){
            var r = this.getRange();
            var body = new Element('body');
    
            if (this.isCollapsed()) return '';
    
            if (r.cloneContents){
                body.appendChild(r.cloneContents());
            } else if ((r.item !== undefined && r.item !== null) || 
                        (r.htmlText !== undefined && r.htmlText !== null)){
                body.set('html', r.item ? r.item(0).outerHTML : r.htmlText);
            } else {
                body.set('html', r.toString());
            }
    
            var content = body.get('html');
            return content;
        },
    
        getText : function(){
            var r = this.getRange();
            var s = this.getSelection();
            return this.isCollapsed() ? '' : r.text || (s.toString ? s.toString() : '');
        },
    
        getNode: function(){
            var r = this.getRange();
    
            if (!Browser.ie){
                var el = null;
    
                if (r){
                    el = r.commonAncestorContainer;
    
                    // Handle selection a image or other control like element such as anchors
                    if (!r.collapsed)
                        if (r.startContainer == r.endContainer)
                            if (r.startOffset - r.endOffset < 2)
                                if (r.startContainer.hasChildNodes())
                                    el = r.startContainer.childNodes[r.startOffset];
    
                    while (typeOf(el) != 'element') el = el.parentNode;
                }
    
                return document.id(el);
            }
    
            return document.id(r.item ? r.item(0) : r.parentElement());
        },
    
        insertContent: function (content) {
            if (Browser.ie){
                var r = this.getRange();
                r.pasteHTML(content);
                r.collapse(false);
                r.select();
            } else {
                this.win.document.execCommand('insertHTML', false, content);
            }
        }
    });
    
    if (base.global) {
        base.global.Editor.Selection = module.exports;
    }
    
});

/*
---

name: Jx.Notifier.Float

description: A notification area that floats in a container above other content.

license: MIT-style license.

requires:
 - Jx.Notifier

provides: [Jx.Notifier.Float]

...
 */
// $Id$
/**
 * Class: Jx.Notifier.Float
 * A floating notice area for displaying notices, notices get chrome if
 * the notifier has chrome
 *
 * Extends: <Jx.Notifier>
 *
 * Events:
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group.
 *
 * This file is licensed under an MIT style license
 */
define("jx/notifier/float", function(require, exports, module){
    
    var base = require("../../base"),
        Notifier = require("../notifier"),
        Notice = require("../notice");
        
    var float = module.exports = new Class({
    
        Extends: Notifier,
        Family: 'Jx.Notifier.Float',
        
        options: {
            /**
             * Option: chrome
             * {Boolean} should the notifier have chrome - default true
             */
            chrome: true,
            /**
             * Option: fx
             * {String} the effect to use when showing and hiding the notifier,
             * default is null
             */
            fx: null,
            /**
             * Option: width
             * {Integer} the width in pixels of the notifier, default is 250
             */
            width: 250,
            /**
             * Option: position
             * {Object} position options to use with <Jx.Widget::position>
             * for positioning the Notifier
             */
            position: {
                horizontal: 'center center',
                vertical: 'top top'
            }
        },
    
        /**
         * Method: render
         * render the widget
         */
        render: function () {
            this.parent();
            this.domObj.setStyle('position','absolute');
            if (this.options.width !== undefined && this.options.width !== null) {
                this.domObj.setStyle('width',this.options.width);
            }
            this.position(this.domObj, 
                          this.options.parent,
                          this.options.position);
        },
        
        /**
         * APIMethod: add
         * Add a new notice to the notifier
         *
         * Parameters:
         * notice - {<Jx.Notice>} the notice to add
         */
        add: function(notice) {
            if (!(notice instanceof Notice)) {
                notice = new Notice({content: notice});
            }
            notice.options.chrome = this.options.chrome;
            this.parent(notice);
        }
    });
    
    if (base.global) {
        base.global.Notifier.Float = module.exports;
    }
    
});

/*
---

name: Jx.Grid.Renderer.Checkbox

description: Renders a checkbox in a column. Can be connected to a store column or as a standalone check column.

license: MIT-style license.

requires:
 - Jx.Grid.Renderer
 - Jx.Field.Checkbox

provides: [Jx.Grid.Renderer.Checkbox]

...
 */
/**
 * Class: Jx.Grid.Renderer.CheckBox
 * Renders a checkbox into the cell. Allows options for connecting the cell
 * to a model field and propogating changes back to the store.
 * 
 * Extends: <Jx.Grid.Renderer>
 * 
 */
define("jx/grid/renderer/checkbox", function(require, exports, module){
    
    var base = require("../../../base"),
        Renderer = require("../renderer"),
        CheckboxField = require("../../field/checkbox");
        
    var checkbox = module.exports = new Class({
  
        Extends: Renderer,
        Family: 'Jx.Grid.Renderer.Checkbox',
        
        Binds: ['onBlur','onChange'],
        
        options: {
            useStore: false,
            field: null,
            updateStore: false,
            checkboxOptions: {
                template : '<input class="jxInputContainer jxInputCheck" type="checkbox" name="{name}"/>',
                name: ''
            }
        },
        
        domInsert: true,
        
        init: function () {
            this.parent();
        },
        
        render: function () {
            this.parent();
            var checkbox = new CheckboxField(this.options.checkboxOptions);
            this.domObj.adopt(document.id(checkbox));
          
            if (this.options.useStore) {
                //set initial state
                checkbox.setValue(this.store.get(this.options.field));
            }
          
            //hook up change and blur events to change store field
            checkbox.addEvents({
                'blur': this.onBlur,
                'change': this.onChange
            });
        },
        
        setColumn: function (column) {
            this.column = column;
          
            if (this.options.useStore) {
                this.store = this.column.grid.getStore();
                this.attached = true;
            }
        },
        
        onBlur: function (field) {
            if (this.options.updateStore) {
                this.updateStore(field);
            }
            this.column.grid.fireEvent('checkBlur',[this.column, field]);
        },
        
        onChange: function (field) {
            if (this.options.updateStore) {
                this.updateStore(field);
            }
            this.fireEvent('change',[this.column, field]);
        },
        
        updateStore: function (field) {
            var newValue = field.getValue();
          
            var data = document.id(field).getParent().retrieve('jxCellData');
            var row = data.row;
          
            if (this.store.get(this.options.field, row) !== newValue) {
                this.store.set(this.options.field, newValue, row);
            }
        }
        
        
    });
        
    if (base.global) {
        base.global.Grid.Renderer.Checkbox = module.exports;
    }
    
});

/*
---

name: Jx.Grid.Renderer.Button

description: Renders one or more buttons in a single column.

license: MIT-style license.

requires:
 - Jx.Grid.Renderer
 - Jx.Button


provides: [Jx.Grid.Renderer.Button]

...
 */
/**
 * Class: Jx.Grid.Renderer.Button
 * Renders a <Jx.Button> into the cell. You can add s many buttons as you'd like per column by passing button configs
 * in as an array option to options.buttonOptions
 *
 * Extends: <Jx.Grid.Renderer>
 *
 */
define("jx/grid/renderer/button", function(require, exports, module){
    
    var base = require("../../../base"),
        Renderer = require("../renderer"),
        Button = require("../../button");
        
    var buttonRenderer = module.exports = new Class({

        Extends: Renderer,
        Family: 'Jx.Grid.Renderer.Button',
    
        Binds: [],
    
        options: {
            template: '<span class="buttons"></span>',
            /**
             * Option: buttonOptions
             * an array of option configurations for <Jx.Button>
             */
            buttonOptions: null
        },
        
        domInsert: true,
    
        classes:  {
            domObj: 'buttons'
        },
    
        init: function () {
            this.parent();
        },
    
        render: function () {
            this.parent();
    
            Array.from(this.options.buttonOptions).each(function(opts){
                var button = new Button(opts);
                this.domObj.grab(document.id(button));
            },this);
    
        }
    });
    
    if (base.global) {
        base.global.Grid.Renderer.Button = module.exports;
    }
    
});

/*
---

name: Jx.Grid.Renderer.Text

description: Renders data as straight text.

license: MIT-style license.

requires:
 - Jx.Grid.Renderer

provides: [Jx.Grid.Renderer.Text]

...
 */
/**
 * Class: Jx.Grid.Renderer.Text
 * This is the default renderer for grid cells. It works the same as the
 * original column implementation. It needs a store, a field name, and an
 * optional formatter as well as other options.
 *
 * Extends: <Jx.Grid.Renderer>
 *
 */
define("jx/grid/renderer/text", function(require, exports, module){
    
    var base = require("../../../base"),
        Renderer = require("../renderer"),
        Formatter = require("../../formatter");
        
    var text = module.exports = new Class({

        Extends: Renderer,
        Family: 'Jx.Grid.Renderer.Text',
  
        options: {
            /**
             * Option: formatter
             * an instance of <Jx.Formatter> or one of its subclasses which
             * will be used to format the data in this column. It can also be
             * an object containing the name (This should be the part after
             * Jx.Formatter in the class name. For instance, to get a currency
             * formatter, specify 'Currency' as the name.) and options for the
             * needed formatter (see individual formatters for options).
             * (code)
             * {
             *    name: 'formatter name',
             *    options: {}
             * }
             * (end)
             */
            formatter: null,
            /**
             * Option: textTemplate
             * Will be used for creating the text that goes iside the template. Use
             * placeholders for indicating the field(s). You can add as much text
             * as you want. for example, if you wanted to display someone's full
             * name that is brokem up in the model with first and last names you
             * can write a template like '{lastName}, {firstName}' and as long as
             * the text between { and } are field names in the store they will be
             * substituted properly.
             */
            textTemplate: null,
            /**
             * Option: css
             * A string or function to use in adding classes to the text
             */
            css: null
        },
  
        store: null,
      
        columnsNeeded: null,
      
        init: function () {
            this.parent();
            var options = this.options,
                t;
            //check the formatter
            if (options.formatter !== undefined &&
                options.formatter !== null &&
                !instanceOf(options.formatter, Formatter)) {
                t = typeOf(options.formatter);
                if (t === 'object') {
                    // allow users to leave the options object blank
                    if(options.formatter.options !== undefined && 
                       options.formatter.options !== null) {
                        options.formatter.options = {};
                    }
                    var formatter = require("../../formatter/" + options.formatter.name.toLowerCase());
                    options.formatter = new formatter(options.formatter.options);
                }
            }
        },
  
        setColumn: function (column) {
            this.parent();
    
            this.store = column.grid.getStore();
            this.attached = true;
  
            if (this.options.textTemplate !== undefined && this.options.textTemplate !== null) {
                this.columnsNeeded = this.store.parseTemplate(this.options.textTemplate);
            }
        },
  
        render: function () {
            this.parent();
        
            var text = '';
            if (this.options.textTemplate !== undefined && this.options.textTemplate !== null) {
                if ((this.columnsNeeded === undefined && this.columnsNeeded === null) || 
                    (typeOf(this.columnsNeeded) === 'array' && this.columnsNeeded.length === 0)) {
                    this.columnsNeeded = this.store.parseTemplate(this.options.textTemplate);
                }
                text = this.store.fillTemplate(null,this.options.textTemplate,this.columnsNeeded);
            }
            if (this.options.formatter !== undefined && this.options.formatter !== null) {
                text = this.options.formatter.format(text);
            }
        
            this.domObj.set('html',text);
        
            if (this.options.css !== undefined && this.options.css !== null && typeOf(this.options.css) === 'function') {
                this.domObj.addClass(this.options.css.apply(this, Array.from(text)));
            } else if (this.options.css !== undefined && this.options.css !== null && 
                        typeOf(this.options.css) === 'string'){
                this.domObj.addClass(this.options.css);
            }
      
        }
      
    });
    
    if (base.global) {
        base.global.Grid.Renderer.Text = module.exports;
    }
    
});

/*
---

name: Jx.Store.Strategy.Sort

description: Strategy used for sorting results in a store after they are loaded.

license: MIT-style license.

requires:
 - Jx.Store.Strategy
 - Jx.Sort.Mergesort
 - Jx.Compare

provides: [Jx.Store.Strategy.Sort]
...
 */
// $Id$
/**
 * Class: Jx.Store.Strategy.Sort
 * 
 * Extends: <Jx.Store.Strategy>
 * 
 * Strategy used for sorting stores. It can either be called manually or it
 * can listen for specific events from the store.
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */

define("jx/store/strategy/sort", function(require, exports, module){
    
    var base = require("../../../base"),
        Strategy = require("../strategy"),
        Compare = require("../../compare");
        
    var sort = module.exports = new Class({
    
        Extends: Strategy,
        Family: "Jx.Store.Strategy.Sort",
        
        name: 'sort',
        
        options: {
            /**
             * Option: sortOnStoreEvents
             * an array of events this strategy should listen for on the store and
             * sort when it sees them.
             */
            sortOnStoreEvents: ['storeColumnChanged','storeDataLoaded'],
            /**
             * Option: defaultSort
             * The default sorting type, currently set to merge but can be any of
             * the sorters available
             */
            defaultSort : 'merge',
            /**
             * Option: separator
             * The separator to pass to the comparator
             * constructor (<Jx.Compare>) - defaults to '.'
             */
            separator : '.',
            /**
             * Option: sortCols
             * An array of columns to sort by arranged in the order you want 
             * them sorted.
             */
            sortCols : []
        },
        
        /**
         * Property: sorters
         * an object listing the different sorters available
         */
        sorters : {
            quick : "Quicksort",
            merge : "Mergesort",
            heap : "Heapsort",
            'native' : "Nativesort"
        },
        
        /**
         * Method: init
         * initialize this strategy
         */
        init: function () {
            this.parent();
            this.bound.sort = this.sort.bind(this);
        },
        
        /**
         * APIMethod: activate
         * activates the strategy if it isn't already active.
         */
        activate: function () {
            if (this.options.sortOnStoreEvents !== undefined && this.options.sortOnStoreEvents !== null) {
                this.options.sortOnStoreEvents.each(function (ev) {
                    this.store.addEvent(ev, this.bound.sort);
                },this);
            }
        },
        
        /**
         * APIMethod: deactivate
         * deactivates the strategy if it is already active.
         */
        deactivate: function () {
            if (this.options.sortOnStoreEvents !== undefined && this.options.sortOnStoreEvents !== null) {
                this.options.sortOnStoreEvents.each(function (ev) {
                    this.store.removeEvent(ev, this.bound.sort);
                },this);
            }
        },
        
        /**
         * APIMethod: sort 
         * Runs the sorting and grouping
         * 
         * Parameters: 
         * cols - Optional. An array of columns to sort/group by 
         * sort - the sort type (quick,heap,merge,native),defaults to
         *     options.defaultSort
         * dir - the direction to sort. Set to "desc" for descending,
         * anything else implies ascending (even null). 
         */
        sort : function (cols, sort, dir) {
            if (this.store.count()) {
                this.store.fireEvent('sortStart', this);
                var c;
                if (cols !== undefined && cols !== null && typeOf(cols) === 'array') {
                    c = this.options.sortCols = cols;
                } else if (cols !== undefined && cols !== null && typeOf(cols) === 'string') {
                    this.options.sortCols = [];
                    this.options.sortCols.push(cols);
                    c = this.options.sortCols;
                } else if (this.options.sortCols !== undefined && this.options.sortCols !== null) {
                    c = this.options.sortCols;
                } else {
                    return null;
                }
                
                this.sortType = sort;
                // first sort on the first array item
                this.store.data = this.doSort(c[0], sort, this.store.data, true);
            
                if (c.length > 1) {
                    this.store.data = this.subSort(this.store.data, 0, 1);
                }
            
                if (dir !== undefined && dir !== null && dir === 'desc') {
                    this.store.data.reverse();
                }
            
                this.store.fireEvent('storeSortFinished', this);
            }
        },
        
        /**
         * Method: subSort 
         * Does the actual group sorting.
         * 
         * Parameters: 
         * data - what to sort 
         * groupByCol - the column that determines the groups 
         * sortCol - the column to sort by
         * 
         * returns: the result of the grouping/sorting
         */
        subSort : function (data, groupByCol, sortByCol) {
            
            if (sortByCol >= this.options.sortCols.length) {
                return data;
            }
            /**
             *  loop through the data array and create another array with just the
             *  items for each group. Sort that sub-array and then concat it 
             *  to the result.
             */
            var result = [];
            var sub = [];
            
            var groupCol = this.options.sortCols[groupByCol];
            var sortCol = this.options.sortCols[sortByCol];
        
            var group = data[0].get(groupCol);
            this.sorter.setColumn(sortCol);
            for (var i = 0; i < data.length; i++) {
                if (group === (data[i]).get(groupCol)) {
                    sub.push(data[i]);
                } else {
                    // sort
        
                    if (sub.length > 1) {
                        result = result.concat(this.subSort(this.doSort(sortCol, this.sortType, sub, true), groupByCol + 1, sortByCol + 1));
                    } else {
                        result = result.concat(sub);
                    }
                
                    // change group
                    group = (data[i]).get(groupCol);
                    // clear sub
                    sub.empty();
                    // add to sub
                    sub.push(data[i]);
                }
            }
            
            if (sub.length > 1) {
                this.sorter.setData(sub);
                result = result.concat(this.subSort(this.doSort(sortCol, this.sortType, sub, true), groupByCol + 1, sortByCol + 1));
            } else {
                result = result.concat(sub);
            }
            
            //this.data = result;
            
            return result;
        },
        
        /**
         * Method: doSort 
         * Called to change the sorting of the data
         * 
         * Parameters: 
         * col - the column to sort by 
         * sort - the kind of sort to use (see list above) 
         * data - the data to sort (leave blank or pass null to sort data
         * existing in the store) 
         * ret - flag that tells the function whether to pass
         * back the sorted data or store it in the store 
         * options - any options needed to pass to the sorter upon creation
         * 
         * returns: nothing or the data depending on the value of ret parameter.
         */
        doSort : function (col, sort, data, ret, options) {
            options = {} || options;
            
            sort = (sort) ? this.sorters[sort] : this.sorters[this.options.defaultSort];
            data = data ? data : this.data;
            ret = ret ? true : false;
            
            if (this.comparator === undefined || this.comparator === null) {
                this.comparator = new Compare({
                    separator : this.options.separator
                });
            }
            
            this.col = col = this.resolveCol(col);
            
            var fn = this.comparator[col.type].bind(this.comparator);
            if (this.sorter === undefined || this.sorter === null) {
                var Sorter = require("../../sort/" + sort.toLowerCase());
                this.sorter = new Sorter(data, fn, col.name, options);
            } else {
                this.sorter.setComparator(fn);
                this.sorter.setColumn(col.name);
                this.sorter.setData(data);
            }
            var d = this.sorter.sort();
            
            if (ret) {
                return d;
            } else {
                this.data = d;
            }
        },
        /**
         * Method: resolveCol
         * resolves the given column identifier and resolves it to the 
         * actual column object in the store.
         * 
         * Parameters:
         * col - the name or index of the required column.
         */
        resolveCol: function (col) {
            var t = typeOf(col);
            if (t === 'number') {
                col = this.store.options.fields[col];
            } else if (t === 'string') {
                this.store.options.fields.each(function (column) {
                    if (column.name === col) {
                        col = column;
                    }
                }, this);
            }
            return col;   
        }
    });
    
    if (base.global) {
        base.global.Store.Strategy.Sort = module.exports;
    }
    
});

/*
---

name: Jx.Store.Strategy.Full

description: Strategy for loading the full data set from a source.

license: MIT-style license.

requires:
 - Jx.Store.Strategy

provides: [Jx.Store.Strategy.Full]

...
 */
// $Id$
/**
 * Class: Jx.Store.Strategy.Full
 * 
 * Extends: <Jx.Store.Strategy>
 * 
 * This is a strategy for loading all of the data from a source at one time.
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */
define("jx/store/strategy/full", function(require, exports, module){
    
    var base = require("../../../base"),
        Strategy = require("../strategy");
        
    var full = module.exports = new Class({
    
        Extends: Strategy,
        Family: "Jx.Store.Strategy.Full",
        
        name: 'full',
        
        options:{},
        /**
         * Method: init
         * initialize this strategy
         */
        init: function () {
            this.parent();
            this.bound.load = this.load.bind(this);
            this.bound.loadStore = this.loadStore.bind(this);
        },
        
        /**
         * APIMethod: activate
         * activates the strategy if it isn't already active.
         */
        activate: function () {
            this.parent();
            this.store.addEvent('storeLoad', this.bound.load);
            
        },
        
        /**
         * APIMethod: deactivate
         * deactivates the strategy if it is already active.
         */
        deactivate: function () {
            this.parent();
            this.store.removeEvent('storeLoad', this.bound.load);
            
        },
        /**
         * APIMethod: load
         * Called as the eventhandler for the store load method. Can also
         * be called independently to load data into the current store.
         * 
         * Parameters:
         * params - a hash of parameters to use in loading the data.
         */
        load: function (params) {
            this.store.fireEvent('storeBeginDataLoad', this.store);
            this.store.protocol.addEvent('dataLoaded', this.bound.loadStore);
            var opts = {};
            if (params !== undefined && params !== null) {
                opts.data = params;
            } else {
                opts.data = {};
            }
            opts.data.page = 0;
            opts.data.itemsPerPage = -1;
            this.store.protocol.read(opts);
        },
        
        /**
         * Method: loadStore
         * Called as the event handler for the protocol's dataLoaded event. Checks
         * the response for success and loads the data into the store if needed.
         * 
         * Parameters:
         * resp - the response from the protocol
         */
        loadStore: function (resp) {
            this.store.protocol.removeEvent('dataLoaded', this.bound.loadStore);
            if (resp.success()) {
                this.store.empty();
                if (resp.meta !== undefined && resp.meta !== null) {
                    this.parseMetaData(resp.meta);
                }
                this.store.addRecords(resp.data);
                this.store.loaded = true;
                this.store.fireEvent('storeDataLoaded',this.store);
            } else {
                this.store.loaded = false;
                this.store.fireEvent('storeDataLoadFailed', [this.store, resp]);
            }
        },
        /**
         * Method: parseMetaData
         * Takes the meta property of the response object and puts the data 
         * where it belongs.
         * 
         * Parameters:
         * meta - the meta data object from the response.
         */
        parseMetaData: function (meta) {
            if (meta.columns !== undefined && meta.columns !== null) {
                this.store.options.fields = meta.columns;
            }
            if (meta.primaryKey !== undefined && meta.primaryKey !== null) {
                this.store.options.recordOptions.primaryKey = meta.primaryKey;
            }
        }
    });
    
    if (base.global) {
        base.global.Store.Strategy.Full = module.exports;
    }
    
});

/*
---

name: Jx.Store.Strategy.Save

description: Strategy used for saving data back to a source. Can be called manually or setup to automatically save on every change.

license: MIT-style license.

requires:
 - Jx.Store.Strategy

provides: [Jx.Store.Strategy.Save]

...
 */
// $Id$
/**
 * Class: Jx.Store.Strategy.Save 
 * 
 * Extends: <Jx.Store.Strategy>
 * 
 * A Store strategy class for saving data via protocols
 *
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * 
 * This file is licensed under an MIT style license
 */

define("jx/store/strategy/save", function(require, exports, module){
    
    var base = require("../../../base"),
        Strategy = require("../strategy"),
        Record = require("../../record");
        
    var save = module.exports = new Class({
    
        Extends: Strategy,
        Family: 'Jx.Store.Strategy.Save',
        
        name: 'save',
        
        options: {
            /**
             * Option: autoSave
             * Whether the strategy should be watching the store to save changes
             * automatically. Set to True to watch events, set it to a number of 
             * milliseconds to have the strategy save every so many seconds
             */
            autoSave: false
        },
        /**
         * Property: failedChanges
         * an array holding all failed requests
         */
        failedChanges: [],
        /**
         * Property: successfulChanges
         * an array holding all successful requests
         */
        successfulChanges: [],
        /**
         * Property: totalChanges
         * The total number of changes being processed. Used to determine
         * when to fire off the storeChangesCompleted event on the store
         */
        totalChanges: 0,
        
        /**
         * Method: init
         * initialize this strategy
         */
        init: function () {
            this.bound.save = this.saveRecord.bind(this);
            this.bound.update = this.updateRecord.bind(this);
            this.bound.completed = this.onComplete.bind(this);
            this.parent();
        },
        
        /**
         * APIMethod: activate
         * activates the strategy if it isn't already active.
         */
        activate: function () {
            this.parent();
            if (typeOf(this.options.autoSave) === 'number') {
                this.periodicalId = this.save.periodical(this.options.autoSave, this);
            } else if (this.options.autoSave) {
                this.store.addEvent('storeRecordAdded', this.bound.save);
                this.store.addEvent('storeColumnChanged', this.bound.update);
                this.store.addEvent('storeRecordDeleted', this.bound.save);
            }
            
        },
        
        /**
         * APIMethod: deactivate
         * deactivates the strategy if it is already active.
         */
        deactivate: function () {
            this.parent();
            if (this.periodicalId !== undefined && this.periodicalId !== null) {
                window.clearInterval(this.periodicalId);
            } else if (this.options.autoSave) {
                this.store.removeEvent('storeRecordAdded', this.bound.save);
                this.store.removeEvent('storeColumnChanged', this.bound.update);
                this.store.removeEvent('storeRecordDeleted', this.bound.save);
            }
            
        },
        
        /**
         * APIMethod: updateRecord
         * called by event handlers when store data is updated
         *
         * Parameters:
         * index - {Integer} the row that was affected
         * column - {String} the column that was affected
         * oldValue - {Mixed} the previous value
         * newValue - {Mixed} the new value
         */
        updateRecord: function(index, column, oldValue, newValue) {
          var resp = this.saveRecord(this.store, this.store.getRecord(index));
          // no response if updating or record state not set
          if (resp) {
            resp.index = index;
          }
        },
        /**
         * APIMethod: saveRecord
         * Called by event handlers when a store record is added, or deleted. 
         * If deleted, the record will be removed from the deleted array.
         * 
         * Parameters:
         * record - The Jx.Record instance that was changed
         * store - The instance of the store
         */
        saveRecord: function (store, record) {
            //determine the status and route based on that
            if (!this.updating && record.state  !== undefined && record.state  !== null) {
                if (this.totalChanges === 0) {
                    store.protocol.addEvent('dataLoaded', this.bound.completed);
                }
                this.totalChanges++;
                var ret;
                switch (record.state) {
                    case Record.UPDATE:
                        ret = store.protocol.update(record);
                        break;
                    case Record.DELETE:
                        ret = store.protocol['delete'](record);
                        break;
                    case Record.INSERT:
                        ret = store.protocol.insert(record);
                        break;
                    default:
                      break;
                }
                return ret;
            }
        },
        /**
         * APIMethod: save
         * Called manually when the developer wants to save all data changes 
         * in one shot. It will empty the deleted array and reset all other status 
         * flags
         * 
         * Parameters:
         * options - options to adjust the request. Will be passed to all methods.
         */
        save: function (options) {
            //go through all of the data and figure out what needs to be acted on
            if (this.store.loaded) {
                var records = [];
                records[Record.UPDATE] = [];
                records[Record.INSERT] = [];
                
                this.store.data.each(function (record) {
                    if (record !== undefined && 
                        record !== null && 
                        record.state !== undefined && 
                        record.state !== null) {
                        records[record.state].push(record);
                    }
                }, this);
                records[Record.DELETE] = this.store.deleted;
                
                if (!this.updating) {
                  if (this.totalChanges === 0) {
                      this.store.protocol.addEvent('dataLoaded', this.bound.completed);
                  }
                  this.totalChanges += records[Record.UPDATE].length + 
                                       records[Record.INSERT].length +
                                       records[Record.DELETE].length;
                  if (records[Record.UPDATE].length) {
                    this.store.protocol.update(records[Record.UPDATE],options);
                  }
                  if (records[Record.INSERT].length) {
                    this.store.protocol.insert(records[Record.INSERT],options);
                  }
                  if (records[Record.DELETE].length) {
                    this.store.protocol['delete'](records[Record.DELETE],options);
                  }
                }
                
            }
            
        },
        /**
         * Method: onComplete
         * Handles processing of the response(s) from the protocol. Each 
         * update/insert/delete will have an individual response. If any responses 
         * come back failed we will hold that response and send it to the caller
         * via the fired event. This method is responsible for updating the status
         * of each record as it returns and on inserts, it updates the primary key
         * of the record. If it was a delete it will remove it permanently from
         * the store's deleted array (provided it returns successful - based on
         * the success attribute of the meta object). When all changes have been 
         * accounted for the method fires a finished event and passes all of the 
         * failed responses to the caller so they can be handled appropriately.
         * 
         * Parameters:
         * response - the response returned from the protocol
         */
        onComplete: function (response) {
            if (!response.success() || 
                (response.meta !== undefined && response.meta !== null && 
                 !response.meta.success)) {
                this.failedChanges.push(response);
            } else {
                //process the response
                var records = [response.requestParams[0]].flatten(),
                    responseData = (response.data !== undefined && response.data !== null) ? [response.data].flatten() : null;
                records.each(function(record, index) {
                  if (response.requestType === 'delete') {
                      this.store.deleted.erase(record);
                  } else { 
                      if (response.requestType === 'insert' || response.requestType == 'update') {
                          if (responseData && responseData[index] !== undefined && responseData[index] !== null) {
                              this.updating = true;
                              Object.each(responseData[index], function (val, key) {
                                  var d = record.set(key, val);
                                  if (d[1] != val) {
                                    d.unshift(index);
                                    record.store.fireEvent('storeColumnChanged', d);
                                  }
                              });
                              this.updating = false;
                          }
                      }
                      record.state = null;
                  } 
                  this.totalChanges--;
              }, this);
              this.successfulChanges.push(response);
            }
            if (this.totalChanges === 0) {
                this.store.protocol.removeEvent('dataLoaded', this.bound.completed);
                this.store.fireEvent('storeChangesCompleted', {
                    successful: this.successfulChanges,
                    failed: this.failedChanges
                });
                this.successfulChanges = [];
                this.failedChanges = [];
            }
        }
    });
    
    if (base.global) {
        base.global.Store.Strategy.Save = module.exports;
    }
    
});

/*
---

name: Jx.Data.Protocol.Ajax

description: Protocol used to load data from a remote data source via Ajax.

license: MIT-style license.

requires:
 - Jx.Data.Protocol
 - more/Request.Queue

provides: [Jx.Data.Protocol.Ajax]

...
 */
// $Id$
/**
 * Class: Jx.Data.Protocol.Ajax
 *
 * Extends: <Jx.Data.Protocol>
 *
 * This protocol is used to send and receive data via AJAX. It also has the
 * capability to use a REST-style API.
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/data/protocol/ajax", function(require, exports, module){
    
    var base = require("../../../base"),
        Protocol = require("../protocol"),
        Response = require("../response");
        
    var ajax = module.exports = new Class({

        Extends: Protocol,
        Family: "Jx.Data.Protocol.Ajax",
    
        options: {
            /**
             * Option: requestOptions
             * Options to pass to the mootools Request class
             */
            requestOptions: {
                method: 'get'
            },
            /**
             * Option: rest
             * Flag indicating whether this protocol is operating against a RESTful
             * web service
             */
            rest: false,
            /**
             * Option: urls
             * This is a hash of the urls to use for each method. If the rest
             * option is set to true the only one needed will be the urls.rest.
             * These can be overridden if needed by passing an options object into
             * the various methods with the appropriate urls.
             */
            urls: {
                rest: null,
                insert: null,
                read: null,
                update: null,
                'delete': null
            },
            /**
             * Option: queue
             * an object containing options suitable for <Request.Queue>.
             * By default, autoAdvance is set to true and concurrent is set to 1.
             */
            queue: {
              autoAdvance: true,
              concurrent: 1
            },
            /**
             * Option: dataProperty
             * an string that represent the name of the property in the response that holds the data.
             * By default, the value is set to 'data'.
             */
            dataProperty: 'data'
        },
        
        queue: null,
    
        init: function() {
            if (ajax.UniqueId === undefined ||
                ajax.UniqueId === null) {
              ajax.UniqueId = 1;
            }
          
            this.queue = new Request.Queue({
              autoAdvance: this.options.queue.autoAdvance,
              concurrent: this.options.queue.concurrent
            });
            this.parent();
        },
        /**
         * APIMethod: read
         * Send a read request via AJAX
         *
         * Parameters:
         * options - the options to pass to the request.
         */
        read: function (options) {
            var resp = new Response(),
                temp = {},
                opts,
                req,
                uniqueId = ajax.UniqueId();
            resp.requestType = 'read';
            resp.requestParams = arguments;
    
    
            // set up options
            if (this.options.rest) {
                temp.url = this.options.urls.rest;
            } else {
                temp.url = this.options.urls.read;
            }
    
            opts = Object.merge({},this.options.requestOptions, temp, options);
            opts.onSuccess = this.handleResponse.bind(this,resp);
    
            req = new Request(opts);
            resp.request = req;
            
            this.queue.addRequest(uniqueId, req);
            req.send();
    
            resp.code = Response.WAITING;
    
            return resp;
    
        },
        /**
         * Method: handleResponse
         * Called as an event handler for a returning request. Parses the request's
         * response into the actual response object.
         *
         * Parameters:
         * response - the response related to teh returning request.
         */
        handleResponse: function (response) {
            var req = response.request,
                str = req.xhr.responseText,
                data = this.parser.parse(str);
            if (data !== undefined && data !== null) {
                if (data.success !== undefined && data.success !== null && data.success) {
                    if (data[this.options.dataProperty] !== undefined && data[this.options.dataProperty] !== null) {
                        response.data = data[this.options.dataProperty];
                    }
                    if (data.meta !== undefined && data.meta !== null) {
                        response.meta = data.meta;
                        
                    } else {
                        response.meta = {};
                    }
                    
                    response.meta.success = data.success;
                    response.code = Response.SUCCESS;
                } else {
                    response.code = Response.FAILURE;
                    response.error = (data.error !== undefined && data.error !== null) ? data.error : null;
                }
            } else {
                response.code = Response.FAILURE;
            }
            this.fireEvent('dataLoaded', response);
        },
        /**
         * APIMethod: insert
         * Takes a Jx.Record instance and saves it
         *
         * Parameters:
         * record - a Jx.Store.Record or array of them
         * options - options to pass to the request
         */
        insert: function (record, options) {
            if (this.options.rest) {
                options = Object.merge({},{url: this.options.urls.rest},options);
            } else {
                options = Object.merge({},{url: this.options.urls.insert},options);
            }
            this.options.requestOptions.method = 'POST';
            return this.run(record, options, "insert");
        },
        /**
         * APIMethod: update
         * Takes a Jx.Record and updates it via AJAX
         *
         * Parameters:
         * record - a Jx.Record instance
         * options - Options to pass to the request
         */
        update: function (record, options) {
            if (this.options.rest) {
                options = Object.merge({},{url: this.options.urls.rest},options);
                this.options.requestOptions.method = 'PUT';
            } else {
                options = Object.merge({},{url: this.options.urls.update},options);
                this.options.requestOptions.method = 'POST';
            }
            return this.run(record, options, "update");
        },
        /**
         * APIMethod: delete
         * Takes a Jx.Record and deletes it via AJAX
         *
         * Parameters:
         * record - a Jx.Record instance
         * options - Options to pass to the request
         */
        "delete": function (record, options) {
            if (this.options.rest) {
                options = Object.merge({},{url: this.options.urls.rest},options);
                this.options.requestOptions.method = 'DELETE';
            } else {
                options = Object.merge({},{url: this.options.urls['delete']},options);
                this.options.requestOptions.method = 'POST';
            }
            return this.run(record, options, "delete");
        },
        /**
         * APIMethod: abort
         * aborts the request related to the passed in response.
         *
         * Parameters:
         * response - the response with the request to abort
         */
        abort: function (response) {
            response.request.cancel();
    
        },
        /**
         * Method: run
         * called by update, delete, and insert methods that actually does the work
         * of kicking off the request.
         *
         * Parameters:
         * record - The Jx.Record to work with
         * options - Options to pass to the request
         * method - The name of the method calling this function
         */
        run: function (record, options, method) {
            var resp = new Response(),
                opts,
                req,
                data,
                uniqueId = ajax.UniqueId();
            
            if (typeOf(record) == 'array') {
              if (!this.combineRequests(method)) {
                record.each(function(r) {
                  this.run(r, options, method);
                }, this);
                return; //since everything should be processed now.
              } else {
                data = [];
                record.each(function(r) {
                  data.push(this.parser.encode(r));
                }, this);
              }
            } else {
              data = this.parser.encode(record);
            }
    
            this.options.requestOptions.data = Object.merge({},this.options.requestOptions.data, {
              data: data
            });
    
            resp.requestType = method;
            resp.requestParams = [record, options, method];
    
            //set up options
            opts = Object.merge({},this.options.requestOptions, options);
            opts.onSuccess = this.handleResponse.bind(this,resp);
            req = new Request(opts);
            resp.request = req;
            this.queue.addRequest(uniqueId, req);
            req.send();
    
            resp.code = Response.WAITING;
    
            return resp;
        }
        
    });
    /**
     * Method: uniqueId
     * returns a unique identifier to be used with queued requests
     */
    ajax.UniqueId = (function() {
      var uniqueId = 1;
      return function() {
        return 'req-'+(uniqueId++);
      };
    })();

    if (base.global) {
        base.global.Data.Protocol.Ajax = module.exports;
    }
    
});

/*
---

name: Jx.Data.Protocol.Local

description: Store protocol used to load data that is already present in a page as an object.

license: MIT-style license.

requires:
 - Jx.Data.Protocol

provides: [Jx.Data.Protocol.Local]

...
 */
// $Id$
/**
 * Class: Jx.Data.Protocol.Local
 * 
 * Extends: Jx.Data.Protocol
 * 
 * Based on the Protocol base class, the local protocol uses data that it is
 * handed upon instantiation to process requests.
 * 
 * Constructor Parameters:
 * data - The data to use 
 * options - any options for the base protocol class
 * 
 * License: 
 * Copyright (c) 2009, Jon Bomgardner.
 * inspired by the openlayers.org implementation of a similar system
 * 
 * This file is licensed under an MIT style license
 */
define("jx/data/protocol/local", function(require, exports, module){
    
    var base = require("../../../base"),
        Protocol = require("../protocol"),
        Response  = require("../response");
        
    var local = module.exports = new Class({
    
        Extends: Protocol,
        Family: "Jx.Data.Protocol.Local",
        
        parameters: ['data', 'options'],
        /**
         * Property: data
         * The data passed to the protocol
         */
        data: null,
        
        init: function () {
            this.parent();
            
            if (this.options.data !== undefined && this.options.data !== null) {
                this.data = this.parser.parse(this.options.data);
            }
        },
        /**
         * APIMethod: read
         * process requests for data and sends the appropriate response via the
         * dataLoaded event.
         * 
         * Parameters: 
         * options - options to use in processing the request.
         */
        read: function (options) {
            var resp = new Response(),
                page = options.data.page,
                itemsPerPage = options.data.itemsPerPage,
                start,
                end,
                data = this.data;
    
            resp.requestType = 'read';
            resp.requestParams = arguments;
            
            
            if (data !== undefined && data !== null) {
                if (page <= 1 && itemsPerPage === -1) {
                    //send them all
                    resp.data = data;
                    resp.meta = { count: data.length };
                } else {
                    start = (page - 1) * itemsPerPage;
                    end = start + itemsPerPage;
                    resp.data = data.slice(start, end);
                    resp.meta = { 
                        page: page, 
                        itemsPerPage: itemsPerPage,
                        totalItems: data.length,
                        totalPages: Math.ceil(data.length/itemsPerPage)
                    };
                }
                resp.code = Response.SUCCESS;
                this.fireEvent('dataLoaded', resp);
            } else {
                resp.code = Response.SUCCESS;
                this.fireEvent('dataLoaded', resp);
            }                        
        }
        
        /**
         * The following methods are not implemented as they make no sense for a
         * local protocol:
         * - create
         * - update 
         * - delete
         * - commit
         * - abort
         */
    });
    
    if (base.global) {
        base.global.Data.Protocol.Local = module.exports;
    }
    
});

/*
---

name: Jx.Data.Parser.JSON

description: Parser for reading and writting JSON formatted data.

license: MIT-style license.

requires:
 - Jx.Data.Parser
 - Core/JSON

provides: [Jx.Data.Parser.JSON]

...
 */
// $Id$
/**
 * Class: Jx.Data.Parser.JSON
 *
 * Extends: <Jx.Data.Parser>
 *
 * A Parser that handles encoding and decoding JSON strings
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/data/parser/json", function(require, exports, module){
    
    var base = require("../../../base"),
        Parser = require("../parser"),
        Record = require("../../record");
        
    var json = module.exports = new Class({

        Extends: Parser,
        Family: "Jx.data.Parser.JSON",
    
        options: {
            /**
             * Option: secure
             * Whether to use secure decoding. When using secure decoding the
             * parser will return null if any invalid JSON characters are in the
             * passed in string. Defaults to false.
             */
            secure: false
        },
        /**
         * APIMethod: parse
         * Turns a string into a JSON object if possible.
         *
         * Parameters:
         * data - the string representation of the data we're parsing
         */
        parse: function (data) {
            var type = typeOf(data);
    
            if (type === 'string') {
                return JSON.decode(data, this.options.secure);
            }
            //otherwise just return the data object
            return data;
        },
    
        /**
         * APIMethod: encode
         * Takes an object and turns it into JSON.
         *
         * Parameters:
         * object - the object to encode
         */
        encode: function (object) {
            var data;
            if (object instanceof Record) {
                data = object.asObject();
            } else {
                data = object;
            }
    
            return JSON.encode(data);
        }
    });
    
    if (base.global) {
        base.global.Data.Parser.JSON = module.exports;
    }
    
});

/*
---

name: Jx.Adaptor.Tree.Parent

description: Fills a Jx.Tree instance from a standard parent/child/folder style data table.

license: MIT-style license.

requires:
 - Jx.Adaptor.Tree

provides: [Jx.Adaptor.Tree.Parent]


...
 */
/**
 * Class: Jx.Adapter.Tree.Parent
 * This class adapts a table adhering to the classic Parent-style "tree table".
 * 
 * Basically, the store needs to have a column that will indicate the
 * parent of each row. The root(s) of the tree should be indicated by a "-1" 
 * in this column. The name of the "parent" column is configurable in the 
 * options.
 * 
 * if the monitorFolders option is set to true then this adapter will send
 * an Ajax request to the server, through the store's strategy (should be
 * Jx.Store.Strategy.Progressive) to request additional nodes. Also, a column
 * indicating whether this is a folder needs to be set as there is no way to
 * tell if a node has children without it.
 *
 * Copyright 2010 by Jonathan Bomgardner
 * License: mit-style
 */

define('jx/adaptor/tree/parent',function(require, exports, module){

    var base = require("../../../base"),
        treeAdaptor = require("../tree");
        
    var parent = module.exports = new Class({
    

        Extends: treeAdaptor,
        Family: 'Jx.Adaptor.Tree.Parent',
        
        options: {
            parentColumn: 'parent',
            folderColumn: 'folder' 
        },
            
        /**
         * APIMethod: hasChildren
         * 
         * Parameters: 
         * index - {integer} the array index of the row in the store (not the 
         *          primary key).
         */
        hasChildren: function (index) {
            return this.store.get(this.options.folderColumn, index);
        },
        
        /**
         * APIMethod: hasParent
         * 
         * Parameters: 
         * index - {integer} the array index of the row in the store (not the 
         *          primary key).
         */
        hasParent: function (index) {
            if (this.store.get(this.options.parentColumn, index).toInt() !== -1) {
                return true;
            } 
            return false;
        },
        
        /**
         * APIMethod: getParentIndex
         * 
         * Parameters: 
         * index - {integer} the array index of the row in the store (not the 
         *          primary key).
         */
        getParentIndex: function (index) {
            //get the parent based on the index
            var pk = this.store.get(this.options.parentColumn, index);
            return this.store.findByColumn('primaryKey', pk);
        }
    });
 
    if (base.global) {
        base.global.Adaptor.Tree.Parent = module.exports;
    }
    
});

/*
---

name: Jx.Adaptor.Tree.Mptt

description: Fills a Jx.Tree instance from a remote table that represents an MPTT (Modified Preorder Table Traversal) data source.

license: MIT-style license.

requires:
 - Jx.Adaptor.Tree

provides: [Jx.Adaptor.Tree.Mptt]

...
 */
/**
 * Class: Jx.Adaptor.Tree.Mptt
 * This class adapts a table adhering to the MPTT-style "tree table".
 *
 * This class requires an MPTT (Modified Preorder Tree Traversal) table. The MPTT
 * has a 'left' and a 'right' column that indicates the order of nesting. For
 * more details see the sitepoint.com article at
 * http://articles.sitepoint.com/article/hierarchical-data-database
 *
 * Copyright 2010 by Jonathan Bomgardner
 * License: mit-style
 */

define("jx/adaptor/tree/mptt",function(require, exports, module){
    
    var base = require("../../../base");
        treeAdaptor = require("../tree");
    
    var mptt = module.exports = new Class({
    
        Extends: treeAdaptor,
        Family: 'Jx.Adaptor.Tree.Mptt',
    
        name: 'tree.mptt',
    
        options: {
            left: 'left',
            right: 'right'
        },
    
        /**
         * APIMethod: hasChildren
         *
         * Parameters:
         * index - {integer} the array index of the row in the store (not the
         *          primary key).
         */
        hasChildren: function (index) {
            var l = this.store.get(this.options.left, index).toInt(),
                r = this.store.get(this.options.right, index).toInt();
            return (l + 1 !== r);
        },
    
        /**
         * APIMethod: hasParent
         *
         * Parameters:
         * index - {integer} the array index of the row in the store (not the
         *          primary key).
         */
        hasParent: function (index) {
            var i = this.getParentIndex(index),
                result = false;
            if (i !== undefined && i !== null) {
                result = true;
            }
            return result;
        },
    
        /**
         * APIMethod: getParentIndex
         *
         * Parameters:
         * index - {integer} the array index of the row in the store (not the
         *          primary key).
         */
        getParentIndex: function (index) {
            var store = this.store,
                options = this.options,
                l,
                r,
                i,
                pl,
                pr;
            l = store.get(options.left, index).toInt();
            r = store.get(options.right, index).toInt();
            for (i = index-1; i >= 0; i--) {
                pl = store.get(options.left, i).toInt();
                pr = store.get(options.right, i).toInt();
                if (pl < l && pr > r) {
                    return i;
                }
            }
            return null;
        }
    });
    
    if (base.global) {
        base.global.Adaptor.Tree.Mptt = module.exports;
    }
    
});

/*
---

name: Jx.Adaptor.Combo.Fill

description: Loads data into a Jx.Combo instance from designated column(s) of a data source.

license: MIT-style license.

requires:
 - Jx.Adaptor.Combo

provides: [Jx.Adaptor.Combo.Fill]

...
 */

define('jx/adaptor/combo/fill', function(require, exports, module){
    
    var base = require("../../../base"),
        Adaptor = require("../../adaptor")
        
    var fill = module.exports = new Class({

        Extends: Adaptor,
        Family: 'Jx.Adaptor.Combo.Fill',
        name: 'combo.fill',
        Binds: ['fill'],
    
        /**
         * Note: option.template is used for constructing the text for the label
         */
        options: {
            /**
             * Option: imagePathColumn
             * points to a store column that holds the image information
             * for the combo items.
             */
            imagePathColumn: null,
            /**
             * Option: imageClassColumn
             * Points to a store column that holds the image class
             * information for the combo items
             */
            imageClassColumn: null,
            /**
             * Option: selectedFn
             * This should be a function that could be run to determine if
             * an item should be selected. It will get passed the current store
             * record as the only parameter. It should return either true or false.
             */
            selectedFn: null,
            /**
             * Option: noRepeats
             * This option allows you to use any store even if it has duplicate
             * values in it. With this option set to true the adaptor will keep
             * track of all of teh labels it adds and will not add anything that's
             * a duplicate.
             */
            noRepeats: false
        },
    
        labels: null,
    
        init: function () {
            this.parent();
    
            if (this.options.noRepeat) {
                this.labels = [];
            }
        },
    
        attach: function (combo) {
            this.parent(combo);
    
            this.store.addEvent('storeDataLoaded', this.fill);
            if (this.store.loaded) {
                this.fill();
            }
        },
    
        detach: function () {
            this.parent();
    
            this.store.removeEvent('storeDataLoaded', this.fill);
        },
    
        fill: function () {
            var template,
                items=[],
                selected,
                obj,
                options = this.options,
                noRepeat = this.options.noRepeat;
            //empty the combo
            this.widget.empty();
            //reset the store and cycle through creating the objects
            //to pass to combo.add()
            this.store.first();
            items = [];
            this.store.each(function(record){
                template = this.store.fillTemplate(record,options.template,this.columnsNeeded);
                if (!noRepeat || (noRepeat && !this.labels.contains(template))) {
                    selected = false;
                    if (Jx.type(options.selectedFn) == 'function') {
                        selected = options.selectedFn.apply(ths,Array.from(record));
                    }
                    obj = {
                        label: template,
                        image: record.get(options.imagePathColumn),
                        imageClass: record.get(options.imageClassColumn),
                        selected: selected
                    };
                    items.push(obj);
    
                    if (noRepeat) {
                        this.labels.push(template);
                    }
                }
    
            },this);
            //pass all of the objects at once
            this.widget.add(items);
        }
    });
    
    if (base.global) {
        base.global.Adaptor.Combo.Fill = module.exports;
    }
    
});

/*
---

name: Jx.Panel.DataView.Group

description: A subclass of Dataview that can display records in groups.

license: MIT-style license.

requires:
 - Jx.Panel.DataView
 - Jx.Selection

provides: [Jx.Panel.DataView.Group]

...
 */
// $Id$
/**
 * Class: Jx.Panel.DataView.Group
 *
 * Extends: <Jx.Panel.DataView>
 *
 * This extension of Jx.Panel.DataView that provides for grouping the items
 * by a particular column.
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/panel/dataview/group", function(require, exports, module){
    
    var base = require("../../../base"),
        DataView = require("../dataview"),
        List = require("../../list"),
        Selection = require("../../selection");
        
    var group = module.exports = new Class({

        Extends: DataView,
        Family: "Jx.Panel.DataView.Group",
    
        options: {
            /**
             * Option: groupTemplate
             * The template used to render the group heading
             */
            groupTemplate: null,
            /**
             * Option: groupContainerClass
             * The class added to the group container. All of the items and header
             * for a single grouping is contained by a div that has this class added.
             */
            groupContainerClass: null,
            /**
             * Option: groupHeaderClass
             * The class added to the heading. Used for styling.
             */
            groupHeaderClass: null,
            /**
             * Option: listOption
             * Options to pass to the main list
             */
            listOptions: {
                select: false,
                hover: false
            },
            /**
             * Option: itemOption
             * Options to pass to the item lists
             */
            itemOptions: {
                select: true,
                hover: true,
                hoverClass: 'jxItemHover',
                selectClass: 'jxItemSelect'
            }
        },
    
        init: function() {
            this.groupCols = this.parseTemplate(this.options.groupTemplate);
            this.itemManager = new Selection({
                eventToFire: {
                    select: 'itemselect',
                    unselect: 'itemunselect'
                },
                selectClass: 'jxItemSelected'
            });
            this.groupManager = new Selection({
                eventToFire: {
                    select: 'groupselect',
                    unselect: 'groupunselect'
                },
                selectClass: 'jxGroupSelected'
            });
            this.parent();
    
        },
        /**
         * APIMethod: render
         * sets up the list container and calls the parent class' render function.
         */
        render: function () {
            this.list = this.createList(this.domA, this.listOptions, this.groupManager);
            this.parent();
    
        },
        /**
         * Method: draw
         * actually does the work of creating the view
         */
        draw: function () {
            var d = this.options.data;
            var n = d.count();
    
            if (n != undefined && n != null && n > 0) {
                var currentGroup = '';
                var itemList = null;
    
                for (var i = 0; i < n; i++) {
                    d.moveTo(i);
                    var group = d.get(this.options.sortColumns[0]);
    
                    if (group !== currentGroup) {
                        //we have a new grouping
    
                        //group container
                        var container =  new Element('div', {
                            'class': this.options.groupContainerClass
                        });
                        var l = this.createList(container,{
                            select: false,
                            hover: false
                        });
                        this.list.add(l.container);
    
                        //group header
                        currentGroup = group;
                        var obj = {};
                        this.groupCols.each(function (col) {
                            obj[col] = d.get(col);
                        }, this);
                        var temp = this.options.groupTemplate.substitute(obj);
                        var g = new Element('div', {
                            'class': this.options.groupHeaderClass,
                            'html': temp,
                            id: 'group-' + group.replace(" ","-","g")
                        });
                        l.add(g);
    
                        //items container
                        var currentItemContainer = new Element('div', {
                            'class': this.options.containerClass
                        });
                        itemList = this.createList(currentItemContainer, this.options.itemOptions, this.itemManager);
                        l.add(itemList.container);
                    }
    
                    var item = this.createItem();
                    itemList.add(item);
                }
            } else {
                var empty = new Element('div', {html: this.options.emptyTemplate});
                this.list.add(empty);
            }
            this.fireEvent('renderDone', this);
        },
    
        /**
         * Method: createList
         * Creates the list object
         *
         * Parameters:
         * container - the container to use in the list
         * options - the options for the list
         * manager - <Jx.Selection> which selection obj to connect to this list
         */
        createList: function(container, options, manager){
            return new List(container, Object.append({
                onMouseenter: this.enterItem.bind(this),
                onMouseleave: this.leaveItem.bind(this),
                onAdd: this.addItem.bind(this),
                onRemove: this.removeItem.bind(this)
            }, options), manager);
        }
    
    });
    
    if (base.global) {
        base.global.Panel.DataView.Group = module.exports;
    }
    
});


/*
---

name: Jx.Plugin.Grid.Resize

description: Enables column resizing in grids

license: MIT-style license.

requires:
 - Jx.Plugin.Grid

provides: [Jx.Plugin.Grid.Resize]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Grid.Resize
 *
 * Extends: <Jx.Plugin>
 *
 * Grid plugin to enable dynamic resizing of column width and row height
 *
 *
 * License:
 * Copyright (c) 2009, DM Solutions Group.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/grid/resize", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Grid = require("../../grid")
        
    var resize = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Grid.Resize",
        
        name: 'Resize',
        
        Binds: ['createHandles','removeHandles'],
        options: {
            /**
             * Option: column
             * set to true to make column widths resizeable
             */
            column: false,
            /**
             * Option: row
             * set to true to make row heights resizeable
             */
            row: false,
            /**
             * Option: tooltip
             * the tooltip to display for the draggable portion of the
             * cell header, localized with Locale.get('Jx','plugin.resize').tooltip for default
             */
            tooltip: ''
        },
        /**
         * Property: els
         * the DOM elements by which the rows/columns are resized.
         */
        els: {
          column: [],
          row: []
        },
    
        /**
         * Property: drags
         * the Drag instances
         */
        drags: {
          column: [],
          row: []
        },
    
        /**
         * APIMethod: attach
         * Sets up the plugin and connects it to the grid
         */
        attach: function (grid) {
          if (grid === undefined || grid === null || !instanceOf(grid, Grid)) {
              return;
          }
          this.parent(grid);
          this.grid = grid;
          if (grid.columnModel.useHeaders()) {
            grid.addEvent('doneCreateGrid', this.createHandles);
            grid.addEvent('beginCreateGrid', this.removeHandles);
            grid.addEvent('postRender', this.createHandles);
          }
        },
        /**
         * APIMethod: detach
         */
        detach: function() {
          this.parent();
          if (this.grid) {
              this.grid.removeEvent('doneCreateGrid', this.createHandles);
              this.grid.removeEvent('beginCreateGrid', this.removeHandles);
          }
          this.grid = null;
        },
    
        /**
         * APIMethod: activate
         */
        activate: function(option) {
            if (this.options[option] !== undefined && this.options[option] !== null) {
              this.options[option] = true;
            }
            if (this.grid.columnModel.useHeaders()) {
              this.createHandles();
            }
        },
    
        /**
         * APIMethod: deactivate
         */
        deactivate: function(option) {
            if (this.options[option] !== undefined && this.options[option] !== null) {
              this.options[option] = false;
            }
            this.createHandles();
        },
        /**
         * Method: removeHandles
         * clean up any handles we created
         */
        removeHandles: function() {
            ['column','row'].each(function(option) {
              this.els[option].each(function(el) { el.dispose(); } );
              this.els[option] = [];
              this.drags[option].each(function(drag){ drag.detach(); });
              this.drags[option] = [];
            }, this);
        },
        /**
         * Method: createHandles
         * create handles that let the user drag to resize columns and rows
         */
        createHandles: function() {
          var grid = this.grid,
              store = grid.store;
          this.removeHandles();
          if (this.options.column && grid.columnModel.useHeaders()) {
            grid.columnModel.columns.each(function(col, idx) {
              var rhc = (grid.rowModel.getRowHeaderColumn() == col.name);
              if (col.isResizable() && !col.isHidden() && !rhc) {
                var colEl = grid.colObj.getElement('.jxGridCol'+idx+ ' .jxGridCellContent');
                var el = new Element('div', {
                  'class':'jxGridColumnResize',
                  title: this.options.tooltip == '' ? this.getText({set:'Jx',key:'plugin.resize',value:'tooltip'}) : this.getText(this.options.tooltip),
                  events: {
                    dblclick: function() {
                      // size to fit?
                    }
                  }
                }).inject(colEl);
                this.els.column.push(el);
                this.drags.column.push(new Drag(el, {
                    limit: {y:[0,0]},
                    snap: 2,
                    onBeforeStart: function(el) {
                      var l = el.getPosition(el.parentNode).x.toInt();
                      el.setStyles({
                        left: l,
                        right: null
                      });
    
                    },
                    onStart: function(el) {
                      var l = el.getPosition(el.parentNode).x.toInt();
                      el.setStyles({
                        left: l,
                        right: null
                      });
                    },
                    onDrag: function(el) {
                        var w = el.getPosition(el.parentNode).x.toInt();
                        col.setWidth(w);
                    },
                    onComplete: function(el) {
                      el.setStyle('left', null);
                    }
                }));
              }
            }, this);
          }
          //if (this.options.row && this.grid.row.useHeaders()) {}
        },
        /**
         * Method: changeText
         * respond to a language change by updating the tooltip
         */
        changeText: function (lang) {
          this.parent();
          var txt = this.options.tooltip == '' ? this.getText({set:'Jx',key:'plugin.resize',value:'tooltip'}) : this.getText(this.options.tooltip);
          ['column','row'].each(function(option) {
            this.els[option].each(function(el) { el.set('title',txt); } );
          }, this);
        }
    });
    
    if (base.global) {
        base.global.Plugin.Grid.Resize = module.exports;
    }
    
});

/*
---

name: Jx.Plugin.Grid.Selector

description: Allows selecting rows, columns, and cells in grids

license: MIT-style license.

requires:
 - Jx.Plugin.Grid

provides: [Jx.Plugin.Grid.Selector]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Grid.Selector
 *
 * Extends: <Jx.Plugin>
 *
 * Grid plugin to select rows, columns, and/or cells.
 *
 * Original selection code from Jx.Grid's original class
 *
 * License:
 * Original Copyright (c) 2008, DM Solutions Group Inc.
 * This version Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/grid/selector", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Grid = require("../../grid"),
        Column = require("../../grid/column");
        
    var selector = module.exports = new Class({

        Extends : Plugin,
        Family: 'Jx.Plugin.Grid.Selector',
        
        name: 'Selector',
    
        Binds: ['select','checkSelection','checkAll','afterGridRender',
                'onCellClick', 'sort', 'updateCheckColumn', 'updateSelectedRows', 'onPostRender'],
    
        options : {
            /**
             * Option: cell
             * determines if cells are selectable
             */
            cell : false,
            /**
             * Option: row
             * determines if rows are selectable
             */
            row : false,
            /**
             * Option: column
             * determines if columns are selectable
             */
            column : false,
            /**
             * Option: multiple
             * Allow multiple selections
             */
            multiple: false,
            /**
             * Option: useCheckColumn
             * Whether to use a check box column as the row header or as the
             * first column in the grid and use it for manipulating selections.
             */
            useCheckColumn: false,
            /**
             * Option: checkAsHeader
             * Determines if the check column is the header of the rows
             */
            checkAsHeader: false,
            /**
             * Option: sortableColumn
             * Determines if the check column is sortable
             */
            sortableColumn: false
        },
        
        domInsert: true,
        
        /**
         * Property: selected
         * Holds arrays of selected rows and/or columns and their headers
         */
        selected: null,
    
        /**
         * APIMethod: init
         * construct a new instance of the plugin.  The plugin must be attached
         * to a Jx.Grid instance to be useful though.
         */
        init: function() {
            this.parent();
            this.selected = {
                cells: [],
                columns: [],
                rows: [],
                rowHeads: [],
                columnHeads: []
            };
        },
        /**
         * APIMethod: attach
         * Sets up the plugin and attaches the plugin to the grid events it
         * will be monitoring
         *
         * Parameters:
         * grid - The instance of Jx.Grid to attach to
         */
        attach: function (grid) {
            if (grid === undefined || grid === null || !instanceOf(grid, Grid)) {
                return;
            }
            this.parent(grid);
            var options = this.options,
                template;
            this.grid = grid;
            
            grid.addEvent('gridSortFinished', this.updateSelectedRows);
            if (grid.ready) {
                this.onPostRender();
            } else {
                grid.addEvent('postRender', this.onPostRender);
            }
        },
        
        onPostRender: function() {
            var grid = this.grid,
                options = this.options;
            //setup check column if needed
            if (options.useCheckColumn) {
                grid.addEvent('gridDrawRow', this.updateCheckColumn);
                template = '<span class="jxGridCellContent">';
                if (options.multiple) {
                    template += '<span class="jxInputContainer jxInputContainerCheck"><input class="jxInputCheck" type="checkbox" name="checkAll" id="checkAll"/></span>';
                } else {
                    template += '</span>';
                }
    
                template += "</span>";
    
                this.checkColumn = new Column({
                    template: template,
                    renderMode: 'fixed',
                    width: 20,
                    renderer: null,
                    name: 'selection',
                    isSortable: options.sortableColumn || false,
                    sort: options.sortableColumn ? this.sort : null
                }, grid);
                this.checkColumn.options.renderer = this;
                grid.columnModel.columns.reverse();
                grid.columnModel.columns.push(this.checkColumn);
                grid.columnModel.columns.reverse();
        
                if (options.checkAsHeader) {
                    this.oldHeaderColumn = grid.rowModel.options.headerColumn;
                    grid.rowModel.options.useHeaders = true;
                    grid.rowModel.options.headerColumn = 'selection';
        
                    if (options.multiple) {
                        grid.addEvent('doneCreateGrid', this.afterGridRender);
                    }
                }
                //attach event to header
                if (options.multiple) {
                    document.id(this.checkColumn).getElement('input').addEvents({
                        'change': this.checkAll
                    });
                }
            } else {
                grid.wantEvent('gridCellClick');
                grid.addEvent('gridCellClick', this.onCellClick);
            }
        },
        
        /**
         * Method: render
         * required for the renderer interface
         */
        render: function() {
            this.domObj = new Element('span', {
                'class': 'jxGridCellContent'
            });
            new Element('input', {
                'class': 'jxGridSelector',
                type: 'checkbox',
                events: {
                    change: this.checkSelection
                }
            }).inject(this.domObj);
        },
        
        /**
         * Method: toElement
         * required for the Renderer interface
         */
        toElement: function() {
            return this.domObj;
        },
        
        /**
         * Method: updateCheckColumn
         * check to see if a row needs to have its checkbox updated after its been drawn
         *
         * Parameters:
         * index - {Integer} the row that was just rendered
         * record - {<Jx.Record>} the record that was rendered into that row
         */
        updateCheckColumn: function(index, record) {
            var state = this.selected.rows.contains(index),
                r = this.grid.gridTableBody.rows,
                tr = document.id((index >= 0 && index < r.length) ? r[index] : null);
          
            if (tr) {
                tr.store('jxRowData', {row: index});
                if (state) {
                    tr.addClass('jxGridRowSelected');
                } else {
                    tr.removeClass('jxGridRowSelected');
                }
                this.setCheckField(index, state);
            }
        },
    
        /**
         * Method: afterGridRender
         */
        afterGridRender: function () {
            if (this.options.checkAsHeader) {
                var chkCol = document.id(this.checkColumn).clone();
                chkCol.getElement('input').addEvent('change',this.checkAll);
                this.grid.rowColContainer.adopt(chkCol);
            }
            this.grid.removeEvent('doneCreateGrid',this.afterGridRender);
        },
        /**
         * APIMethod: detach
         */
        detach: function() {
            var grid = this.grid,
                options = this.options,
                col;
            if (grid) {
                grid.gridTableBody.removeEvents({
                    click: this.onCellClick
                });
                if (this.checkColumn) {
                    grid.columnModel.columns.erase(this.checkColumn);
                    this.checkColumn.destroy();
                    this.checkColumn = null;
                }
                if (options.useCheckColumn) {
                    grid.removeEvent('gridDrawRow', this.updateCheckColumn);
                    if (options.checkAsHeader) {
                        grid.rowModel.options.headerColumn = this.oldHeaderColumn;
                    }
                }
            }
            this.grid.removeEvent('gridSortFinished', this.updateSelectedRows);
            
            this.grid = null;
        },
        /**
         * APIMethod: activate
         * Allows programatic access to turning selections on.
         *
         * Parameters:
         * opt - the option to turn on. One of 'cell', 'column', or 'row'
         */
        activate: function (opt) {
            this.options[opt] = true;
        },
        /**
         * APIMethod: deactivate
         * Allows programatic access to turning selections off.
         *
         * Parameters:
         * opt - the option to turn off. One of 'cell', 'column', or 'row'
         */
        deactivate: function (opt) {
            var gridTableRows = this.grid.gridTableBody.rows,
                selected = this.selected,
                i;
            this.options[opt] = false;
            if (opt === 'cell') {
                selected.cells.each(function(cell) {
                    cell.removeClass('jxGridCellSelected');
                });
                selected.cells = [];
            } else if (opt === 'row') {
                this.getSelectedRows().each(function(row){
                    idx = row.retrieve('jxRowData').row;
                    row.removeClass('jxGridRowSelected');
                    this.setCheckField(idx,false);
                }, this);
                selected.rows = [];
                selected.rowHeads.each(function(rowHead){
                    rowHead.removeClass('jxGridRowHeaderSelected');
                });
                selected.rowHeads = [];
            } else {
                selected.columns.each(function(column){
                    for (i = 0; i < gridTableRows.length; i++) {
                        gridTableRows[i].cells[column].removeClass('jxGridColumnSelected');
                    }
                });
                selected.columns = [];
    
                selected.columnHeads.each(function(rowHead){
                    rowHead.removeClass('jxGridColumnHeaderSelected');
                },this);
                selected.columnHeads = [];
            }
        },
        
        /**
         * Method: onCellClick
         * dispatch clicking on a table cell
         */
        onCellClick: function(cell) {
            if (cell) {
                this.select(cell);
            }
        },
        
        /**
         * Method: select
         * dispatches the grid click to the various selection methods
         */
        select : function (cell) {
            var data = cell.retrieve('jxCellData'),
                options = this.options,
                col;
    
            if (options.cell && 
                data.row !== undefined && 
                data.row !== null && 
                data.index !== undefined && 
                data.index !== null) {
                this.selectCell(cell);
            }
            
            if (options.row && data.row !== undefined && data.row !== null) {
                this.selectRow(data.row);
            }
    
            if (options.column && data.index !== undefined && data.index !== null) {
                if (this.grid.rowModel.useHeaders()) {
                    this.selectColumn(data.index - 1);
                } else {
                    this.selectColumn(data.index);
                }
            }
        },
        
        /**
         * Method: selectCell
         * select a cell
         *
         * Parameters: 
         * cell - {DOMElement} the cell element to select
         */
        selectCell: function(cell) {
            if (!this.options.cell) { return; }
            var cells = this.selected.cells;
            if (cell.hasClass('jxGridCellSelected')) {
                cell.removeClass('jxGridCellSelected');
                cells.erase(cell);
                this.fireEvent('unselectCell', cell);
            } else {
                cell.addClass('jxGridCellSelected');
                cells.push(cell);
                this.fireEvent('selectCell', cell);
            }
        },
        
        updateSelectedRows: function() {
            if (!this.options.row) { return; }  
            var options = this.options,
                r = this.grid.gridTableBody.rows,
                rows = [];
              
            for (var i=0; i<r.length; i++) {
                if (r[i].hasClass('jxGridRowSelected')) {
                    rows.push(i);
                }
            }
            this.selected.rows = rows;
        },
        
        /**
         * Method: selectRow
         * Select a row and apply the jxGridRowSelected style to it.
         *
         * Parameters:
         * row - {Integer} the row to select
         */
        selectRow: function (row, silently) {
            if (!this.options.row) { return; }
            var options = this.options,
                r = this.grid.gridTableBody.rows,
                tr = document.id((row >= 0 && row < r.length) ? r[row] : null),
                rows = this.selected.rows,
                silently = (silently !== undefined && silently !== null) ? silently : false;
            if (tr) {
                if (tr.hasClass('jxGridRowSelected')) {
                    tr.removeClass('jxGridRowSelected');
                    this.setCheckField(row, false);
                    if (options.multiple && options.useCheckColumn) {
                        if (options.checkAsHeader) {
                            document.id(this.grid.rowColContainer).getElement('input').removeProperty('checked');
                        } else {
                            document.id(this.checkColumn).getElement('input').removeProperty('checked');
                        }
                    }
                    //search array and remove this item
                    rows.erase(row);
                    if (!silently) {
                        this.fireEvent('unselectRow', row);
                    }
                } else {
                    tr.store('jxRowData', {row: row});
                    rows.push(row);
                    tr.addClass('jxGridRowSelected');
                    this.setCheckField(row, true);
                    if (!silently) {
                        this.fireEvent('selectRow', row);
                    }
                }
    
                if (!this.options.multiple) {
                    var unselected = [];
                    this.getSelectedRows().each(function(row) {
                        var idx;
                        if (row !== tr) {
                            idx = row.retrieve('jxRowData').row;
                            row.removeClass('jxGridRowSelected');
                            this.setCheckField(idx,false);
                            rows.erase(row);
                            unselected.push(idx);
                            if (!silently) {
                                this.fireEvent('unselectRow', row);
                            }
                        }
                      
                    }, this);
                    if (unselected.length && !silently) {
                        this.fireEvent('unselectRows', [unselected]);
                    }
                }
            }
            this.selectRowHeader(row);
        },
    
        /**
         * Method: setCheckField
         */
        setCheckField: function (row, checked) {
            var grid = this.grid,
                options = this.options,
                check,
                col,
                cell;
            if (options.useCheckColumn) {
                if (options.checkAsHeader) {
                    cell = document.id(grid.rowTableBody.rows[row].cells[0]);
                } else {
                    col = grid.columnModel.getIndexFromGrid(this.checkColumn.name);
                    cell = document.id(grid.gridTableBody.rows[row].cells[col]);
                }
                check = cell.getElement('.jxGridSelector');
                check.set('checked', checked);
            }
        },
        /**
         * Method: selectRowHeader
         * Apply the jxGridRowHeaderSelected style to the row header cell of a
         * selected row.
         *
         * Parameters:
         * row - {Integer} the row header to select
         */
        selectRowHeader: function (row) {
            if (!this.grid.rowModel.useHeaders()) {
                return;
            }
            var rows = this.grid.rowTableBody.rows,
                cell = document.id((row >= 0 && row < rows.length) ? 
                                  rows[row].cells[0] : null),
                cells;
    
            if (!cell) {
                return;
            }
            cells = this.selected.rowHeads;
            if (cells.contains(cell)) {
                cell.removeClass('jxGridRowHeaderSelected');
                cells.erase(cell);
            } else {
                cell.addClass('jxGridRowHeaderSelected');
                cells.push(cell);
            }
    
            if (!this.options.multiple) {
                cells.each(function(c){
                    if (c !== cell) {
                        c.removeClass('jxGridRowHeaderSelected');
                        cells.erase(c);
                    }
                },this);
            }
    
        },
        /**
         * Method: selectColumn
         * Select a column.
         * This deselects a previously selected column.
         *
         * Parameters:
         * col - {Integer} the column to select
         */
        selectColumn: function (col) {
            var gridTable = this.grid.gridTableBody,
                cols = this.selected.columns,
                m = '',
                i;
            if (col >= 0 && col < gridTable.rows[0].cells.length) {
                if (cols.contains(col)) {
                    //deselect
                    m = 'removeClass';
                    cols.erase(col);
                    this.fireEvent('unselectColumn', col);
                } else {
                    //select
                    m = 'addClass';
                    cols.push(col);
                    this.fireEvent('selectColumn', col);
                }
                for (i = 0; i < gridTable.rows.length; i++) {
                    gridTable.rows[i].cells[col][m]('jxGridColumnSelected');
                }
    
                if (!this.options.multiple) {
                    cols.each(function(c){
                      if (c !== col) {
                          for (i = 0; i < gridTable.rows.length; i++) {
                              gridTable.rows[i].cells[c].removeClass('jxGridColumnSelected');
                          }
                          cols.erase(c);
                          this.fireEvent('unselectColumn', c);
                      }
                    }, this);
                }
                this.selectColumnHeader(col);
            }
        },
        /**
         * method: selectColumnHeader
         * Apply the jxGridColumnHeaderSelected style to the column header cell of a
         * selected column.
         *
         * Parameters:
         * col - {Integer} the column header to select
         */
        selectColumnHeader: function (col) {
            var rows = this.grid.colTableBody.rows;
            if (rows.length === 0 || !this.grid.rowModel.useHeaders()) {
                return;
            }
    
            var cell = (col >= 0 && col < rows[0].cells.length) ?
                rows[0].cells[col] : null;
    
            if (cell === null) {
                return;
            }
    
            cell = document.id(cell);
            cells = this.selected.columnHeads;
    
            if (cells.contains(cell)) {
                cell.removeClass('jxGridColumnHeaderSelected');
                cells.erase(cell);
            } else {
                cell.addClass('jxGridColumnHeaderSelected');
                cells.push(cell);
            }
    
            if (!this.options.multiple) {
                cells.each(function(c){
                    if (c !== cell) {
                        c.removeClass('jxGridColumnHeaderSelected');
                        cells.erase(c);
                    }
                });
            }
        },
        /**
         * Method: checkSelection
         * Checks whether a row's check box is/isn't checked and modifies the
         * selection appropriately.
         *
         * Parameters:
         * column - <Jx.Grid.Column> that created the checkbox
         * field - <Jx.Field.Checkbox> instance that was checked/unchecked
         * created the checkbox
         */
        checkSelection: function (event) {
            var cell =  event.target.getParent('tr'),
                row;
            if (cell) {
                row = cell.getParent().getChildren().indexOf(cell);
                this.selectRow(row);
            }
        },
        /**
         * Method: checkAll
         * Checks all checkboxes in the column the selector inserted.
         */
        checkAll: function () {
            var grid = this.grid,
                col,
                rows,
                selection = [],
                checked = this.options.checkAsHeader ? 
                              grid.rowColContainer.getElement('input').get('checked') :
                              this.checkColumn.domObj.getElement('input').get('checked'),
                event = checked ? 'selectRows' : 'unselectRows';
    
            if (this.options.checkAsHeader) {
                col = 0;
                rows = grid.rowTableBody.rows;
            } else {
                col = grid.columnModel.getIndexFromGrid(this.checkColumn.name);
                rows = grid.gridTableBody.rows;
            }
    
            Array.from(rows).each(function(row, idx) {
                var check = row.cells[col].getElement('input');
                if (check !== undefined && check !== null) {
                    var rowChecked = check.get('checked');
                    if (rowChecked !== checked) {
                        this.selectRow(idx, true);
                        selection.push(idx);
                    }
                }
            }, this);
            
            this.fireEvent(event, [selection]);
        },
        
        sort: function(dir) {
            var grid = this.grid,
                store = grid.store,
                data = store.data,
                gridTableBody= grid.gridTableBody,
                gridParent = gridTableBody.getParent(),
                useHeaders = grid.rowModel.useHeaders(),
                rowTableBody = grid.rowTableBody,
                rowParent = rowTableBody.getParent(),
                selected = this.getSelectedRows();
          
            // sorting only works for rows and when more than zero are selected
            // in fact it is probably only useful if multiple selections are also enabled
            // but that is not a hard rule for this method
            if (!this.options.row || selected.length == 0) {
                console.log('not sorting by selection, nothing to sort');
                return;
            }
          
            store.each(function(record, index) {
                record.dom = {
                    cell: gridTableBody.childNodes[index],
                    row: useHeaders ? rowTableBody.childNodes[index] : null
                };
            });
    
            gridTableBody.dispose();
            if (useHeaders) {
                rowTableBody.dispose();
            }
            selected.sort(function(a,b) {
                return a.retrieve('jxRowData').row - b.retrieve('jxRowData').row;
            }).each(function(row) {
                console.log('moving row ' + row.retrieve('jxRowData').row + ' to beginning of array');
                data.unshift(data.splice(row.retrieve('jxRowData').row,1)[0]);
            });
    
            if (dir == 'desc') {
                data.reverse();
            }
    
            store.each(function(record, index) {
                record.dom.cell.inject(gridTableBody);
                record.dom.cell.store('jxRowData', {row: index});
                if (useHeaders) {
                    record.dom.row.inject(rowTableBody);
                }
            });
    
            if (gridParent) {
                gridParent.adopt(gridTableBody);
            }
            if (useHeaders && rowParent) {
                rowParent.adopt(rowTableBody);
            }
        },
        
        getSelectedRows: function() {
            var rows = [],
                selected = this.selected.rows,
                r = this.grid.gridTableBody.rows;
            selected.each(function(row) {
                var tr = document.id((row >= 0 && row < r.length) ? r[row] : null);
                if (tr) {
                    rows.push(tr);
                }
            });
            return rows;
        }
    });

    if (base.global) {
        base.global.Plugin.Grid.Selector = module.exports;
    }
});

/*
---

name: Jx.Plugin.Grid.Sorter

description: Enables column sorting in grids

license: MIT-style license.

requires:
 - Jx.Plugin.Grid

provides: [Jx.Plugin.Grid.Sorter]

images:
 - emblems.png
...
 */
// $Id$
/**
 * Class: Jx.Plugin.Grid.Sorter
 *
 * Extends: <Jx.Plugin>
 *
 * Grid plugin to sort the grid by a single column.
 *
 * License:
 * Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/grid/sorter", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Grid = require("../../grid")
        
    var sorter = module.exports = new Class({
        Extends: Plugin,
        Family: 'Jx.Plugin.Grid.Sorter',
        name: 'Sorter',
      
        Binds: ['sort', 'modifyHeaders'],
      
        /**
         * Property: current
         * refernce to the currently sorted column
         */
        current: null,
      
        /**
         * Property: direction
         * tell us what direction the sort is in (either 'asc' or 'desc')
         */
        direction: null,
      
        options: {
            sortableClass: 'jxColSortable',
            ascendingClass: 'jxGridColumnSortedAsc',
            descendingClass: 'jxGridColumnSortedDesc'
        },
      
        /**
         * APIMethod: attach
         * Sets up the plugin and attaches the plugin to the grid events it
         * will be monitoring
         */
        attach: function(grid) {
            if (grid === undefined || grid === null || !(grid instanceof Grid)) {
                return;
            }
            this.parent(grid);
        
            this.grid = grid;
        
            // this.grid.wantEvent('gridColumnClick');
            this.grid.addEvent('gridColumnClick', this.sort);
            this.grid.addEvent('doneCreateGrid', this.modifyHeaders);
        },
      
        /**
         * APIMethod: detach
         */
        detach: function() {
            if (this.grid) {
                this.grid.removeEvent('gridColumnClick', this.sort);
            }
            this.grid = null;
        },
      
        /**
         * Method: modifyHeaders
         */
        modifyHeaders: function() {
            var grid = this.grid,
                columnTable = grid.colObj,
                store = grid.store,
                c = this.options.sortableClass;
            if (grid.columnModel.useHeaders()) {
                grid.columnModel.columns.each(function(col, index) {
                    if (!col.isHidden() && col.isSortable()) {
                        var th = columnTable.getElement('.jxGridCol'+index);
                        th.addClass(c);
                    }
                });
            }
        },
      
        /**
         * Method: sort
         * called when a grid header is clicked.
         *
         * Parameters:
         * cell - The cell clicked
         */
        sort: function(el) {
            var current = this.current,
                grid = this.grid,
                gridTableBody = grid.gridTableBody,
                gridParent = gridTableBody.getParent(),
                rowTableBody = grid.rowTableBody,
                rowParent = rowTableBody.getParent(),
                useHeaders = grid.rowModel.useHeaders(),
                store = grid.store,
                sorter = store.getStrategy('sort'),
                data = el.retrieve('jxCellData'),
                dir = 'asc',
                opt = this.options;
          
            if (data.column !== undefined && data.column !== null && data.column.isSortable()){
                if (el.hasClass(opt.ascendingClass)) {
                    el.removeClass(opt.ascendingClass).addClass(opt.descendingClass);
                    dir = 'desc';
                } else if (el.hasClass(opt.descendingClass)) {
                    el.removeClass(opt.descendingClass).addClass(opt.ascendingClass);
                } else {
                    el.addClass(opt.ascendingClass);
                }
                if (current && el != current) {
                    current.removeClass(opt.ascendingClass).removeClass(opt.descendingClass);
                }
                this.current = el;
              
                this.grid.fireEvent('gridSortStarting');
              
                if (data.column.options.sort !== undefined && data.column.options.sort !== null && typeOf(data.column.options.sort) == 'function') {
                    data.column.options.sort(dir);
                } else {
                    if (sorter) {
                        gridTableBody.dispose();
                        if (useHeaders) {
                            rowTableBody.dispose();
                        }
                        store.each(function(record, index) {
                            record.dom = {
                                cell: gridTableBody.childNodes[index],
                                row: useHeaders ? rowTableBody.childNodes[index] : null
                            };
                        });
            
                        sorter.sort(data.column.name, null, dir);
            
                        store.each(function(record, index) {
                            record.dom.cell.inject(gridTableBody);
                            if (useHeaders) {
                                record.dom.row.inject(rowTableBody);
                            }
                        });
            
                        if (gridParent) {
                            gridParent.adopt(gridTableBody);
                        }
                        if (useHeaders && rowParent) {
                            rowParent.adopt(rowTableBody);
                        }
                    }
                }
                this.grid.fireEvent('gridSortFinished');
            }
        }
    });
    
    if (base.global) {
        base.global.Plugin.Grid.Sorter = module.exports;
    }
});

/*
---

name: Jx.Plugin.Grid.Editor

description: Enables inline editing in grids

license: MIT-style license.

requires:
 - Jx.Plugin.Grid
 - More/Keyboard

provides: [Jx.Plugin.Grid.Editor]

images:
 - icons.png
...
 */
// $Id$
/**
 * Class: Jx.Plugin.Grid.Editor
 *
 * Extends: <Jx.Plugin>
 *
 * Grid plugin to enable inline editing within a cell
 *
 * Original selection code from Jx.Grid's original class
 *
 * License:
 * Original Copyright (c) 2008, DM Solutions Group Inc.
 * This version Copyright (c) 2009, Conrad Barthelmes.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/grid/editor", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Grid = require("../../grid")
        
    var editor = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Grid.Editor",
        
        name: 'Editor',
        
        Binds: ['activate','deactivate','changeText','onCellClick'],
    
        options : {
            /**
             * Option: enabled
             * Determines if inline editing is avaiable
             */
            enabled : true,
            /**
             * Option: blurDelay
             * Set the time in miliseconds when the inputfield/popup shall hide. When
             * the user refocuses the input/popup within this time, the timeout will be cleared
             *
             * set to 'false' if no hiding on blur is wanted
             */
            blurDelay : 500,
            /**
             * Option: popup
             *
             * Definitions for a PopUp to use.
             * - use        - determines whether to use a PopUp or simply the input
             * - useLabel   - determines whether to use labels on top of the input.
             *                Text will be the column header
             * - useButtons - determines whether to use Submit and Cancel Buttons
             * - buttonLabel.submit - Text for Submit Button, uses Locale.get('Jx', 'plugin.editor').submitButton for default
             * - buttonLabel.cancel - Text for Cancel Button, uses Locale.get('Jx', 'plugin.editor').cancelButton for default
             */
            popup : {
                use           : true,
                useLabels     : false,
                useButtons    : true,
                button        : {
                    submit : {
                        label : '',
                        image : 'images/accept.png'
                    },
                    cancel : {
                        label : '',
                        image : 'images/cancel.png'
                    }
                },
                template: '<div class="jxGridEditorPopup"><div class="jxGridEditorPopupInnerWrapper"></div></div>'
            },
            /**
             * Option {boolean} validate
             * - set to true to have all editable input fields as mandatory field
             *   if they don't have 'mandatory:true' in their colOptions
             */
            validate : true,
            /**
             * Option: {Array} fieldOptions with objects
             * Contains objects with options for the Jx.Field instances to show up.
             * Default options will be added automatically if custom options are entered.
             *
             * Preferences:
             *   field             - Default * for all types or the name of the column in the store (Jx.Store)
             *   type              - Input type to show (Text, Password, Textarea, Select, Checkbox)
             *   options           - All Jx.Field options for this column. More options depend on what type you are using.
             *                       See Jx.Form.[yourField] for details
             *   validatorOptions: - See Jx.Plugin.Field.Validator Options for details
             *                       will only be used if this.options.validate is set to true
             */
            fieldOptions : [{
                field   : '*',
                type    : 'Text',
                options : {},
                validatorOptions: {
                    validators : [],
                    validateOnBlur: true,
                    validateOnChange : false
                }
            }],
            /**
             * Option: {Boolean} fieldFormatted
             * Displays the cell value also inside the input field as formatted
             */
            fieldFormatted : true,
            /**
             * Option cellChangeFx
             * set use to false if no highlighting effect is wanted.
             *
             * this is just an idea how successfully changing could be highlighed for the user
             */
            cellChangeFx : {
                use     : true,
                success : '#090',
                error   : '#F00'
            },
            /**
             * Option cellOutline
             * shows an outline style to the currently active cell to make it easier to see
             * which cell is active
             */
            cellOutline : {
                use   : true,
                style : '2px solid #88c3e7'
            },
            /**
             * Option: useKeyboard
             * Set to false if no keyboard support is needed
             */
            useKeyboard : true,
            /**
             * Option: keys
             * Contains the event codes for several commands that can be used when
             * a field is active. Syntax is the same like for the Mootools Keyboard Class
             * http://mootools.net/docs/more/Interface/Keyboard
             */
            keys : {
                'ctrl+shift+enter' : 'saveNGoUp',
                'tab'              : 'saveNGoRight',
                'ctrl+enter'       : 'saveNGoDown',
                'shift+tab'        : 'saveNGoLeft',
                'enter'            : 'saveNClose',
                'ctrl+up'          : 'cancelNGoUp',
                'ctrl+right'       : 'cancelNGoRight',
                'ctrl+down'        : 'cancelNGoDown',
                'ctrl+left'        : 'cancelNGoLeft',
                'esc'              : 'cancelNClose',
                'up'               : 'valueIncrement',
                'down'             : 'valueDecrement'
            },
            /**
             * Option: keyboardMethods
             *
             * can be used to overwrite existing keyboard methods that are used inside
             * this.options.keys - also possible to add new ones.
             * Functions are bound to the editor plugin when using 'this'
             *
             * example:
             *  keys : {
             *    'ctrl+u' : 'cancelNGoRightNDown'
             *  },
             *  keyboardMethods: {
             *    'cancelNGoRightNDown' : function(ev){
             *      ev.preventDefault();
             *      this.getNextCellInRow(false);
             *      this.getNextCellInCol(false);
             *    }
             *  }
             */
            keyboardMethods : {},
            /**
             * Option: keypressLoop
             * loop through the grid when pressing TAB (or some other method that uses
             * this.getNextCellInRow() or this.getPrevCellInRow()). If set to false,
             * the input field/popup will not start at the opposite site of the grid
             * Defaults to true
             */
            keypressLoop : true,
            /**
             * Option: linkClickListener
             * disables all click events on links that are formatted with Jx.Formatter.Uri
             * - otherwise the link will open directly instead of open the input editor)
             * - hold [ctrl] to open the link in a new tab
             */
            linkClickListener : true
        },
        classes: ['jxGridEditorPopup', 'jxGridEditorPopupInnerWrapper'],
        /**
         * Property: activeCell
         *
         * Containing Objects:
         *   field        : Reference to the Jx.Field instance that will be created
         *   cell         : Reference to the cell inside the table 
         *   span         : Reference to the Dom Element inside the selected cell of the grid
         *   oldValue     : Old value of the cell from the grid's store
         *   newValue     : Object with <data> and <error> for better validation possibilites
         *   timeoutId    : TimeoutId if the focus blurs the input.
         *   data         : Reference to the cell data
         *   fieldOptions : Reference to the field options of this column
         */
        activeCell : {
            field       : null,
            cell        : null,
            span        : null,
            oldValue    : null,
            newValue    : { data: null, error: false },
            timeoutId   : null,
            data        : {},
            fieldOptions: {}
        },
        /**
         * Property : popup
         *
         * References to all contents within a popup (only 1 popup for 1 grid initialization)
         *
         * COMMENT: I don't know how deep we need to go into that.. innerWrapper and closeLink probably don't need
         * own references.. I just made them here in case they are needed at some time..
         *
         * Containing Objects:
         *   domObj         : Reference to the Dom Element of the popup (absolutely positioned)
         *   innerWrapper   : Reference to the inner Wrapper inside the popup to provide relative positioning
         *   closeIcon      : Reference to the Dom Element of a little [x] in the upper right to close it (not saving)
         *   buttons        : References to all Jx.Buttons used inside the popup
         *   buttons.submit : Reference to the Submit Button
         *   buttons.cancel : Reference to the Cancel Button
         */
        popup : {
            domObj       : null,
            innerWarpper : null,
            closeIcon    : null,
            button       : {
                submit : null,
                cancel : null
            }
        },
        /**
         * Property: keyboard
         * Instance of a Mootols Keyboard Class
         */
        keyboard : null,
        /**
         * Property keyboardMethods
         * Editing and grid functions for keyboard functionality.
         * Methods are defined and implemented inside this.attach() because of referencing troubles
         */
        keyboardMethods : {},
        /**
         * APIMethod: init
         * construct a new instance of the plugin.  The plugin must be attached
         * to a Jx.Grid instance to be useful though.
         */
        init: function() {
            this.parent();
        },
        /**
         * APIMethod: attach
         * Sets up the plugin and attaches the plugin to the grid events it
         * will be monitoring
         *
         * @var {Object} grid - Instance of Class Jx.Grid
         */
        attach: function (grid) {
            if (grid === undefined || grid === null || !instanceOf(grid, Grid)) {
                return;
            }
            this.parent(grid);
            this.grid = grid;
            
            //this.grid.gridTableBody.addEvent('click', this.onCellClick);
            // this.grid.wantEvent('gridCellClick');
            this.grid.addEvent('gridCellClick', this.onCellClick);
    
            /*
             * add default field options to the options in case some new options were entered
             * to be still able to use them for the rest of the fields
             */
            if(this.getFieldOptionsByColName('*').field != '*') {
                this.options.fieldOptions.unshift({
                    field   : '*',
                    type    : 'Text',
                    options : {},
                    validatorOptions: {
                        validators : [],
                        validateOnBlur: true,
                        validateOnChange : false
                    }
                });
            }
    
            /**
             * set the keyboard methods here to have a correct reference to the instance of
             * the editor plugin
             *
             * @todo other names maybe? or even completely different way of handling the keyboard events?
             * @todo more documentation than method name
             */
            var self = this;
            this.keyboardMethods = {
                saveNClose     : function(ev) {
                    if(self.activeCell.fieldOptions.type != 'Textarea' || (self.activeCell.fieldOptions.type == 'Textarea' && ev.key != 'enter')) {
                        self.deactivate();
                    }
                },
                saveNGoUp      : function(ev) {ev.preventDefault();self.getPrevCellInCol();},
                saveNGoRight   : function(ev) {ev.preventDefault();self.getNextCellInRow();},
                saveNGoDown    : function(ev) {ev.preventDefault();self.getNextCellInCol();},
                saveNGoLeft    : function(ev) {ev.preventDefault();self.getPrevCellInRow();},
                cancelNClose   : function(ev) {ev.preventDefault();self.deactivate(false);},
                cancelNGoUp    : function(ev) {ev.preventDefault();self.getPrevCellInCol(false);},
                cancelNGoRight : function(ev) {ev.preventDefault();self.getNextCellInRow(false);},
                cancelNGoDown  : function(ev) {ev.preventDefault();self.getNextCellInCol(false);},
                cancelNGoLeft  : function(ev) {ev.preventDefault();self.getPrevCellInRow(false);},
                valueIncrement : function(ev) {ev.preventDefault();self.cellValueIncrement(true);},
                valueDecrement : function(ev) {ev.preventDefault();self.cellValueIncrement(false);}
            };
    
            var keyboardEvents = {};
            for(var i in this.options.keys) {
                if(this.keyboardMethods[this.options.keys[i]] !== undefined &&
                    this.keyboardMethods[this.options.keys[i]] !== null) {
                    keyboardEvents[i] = this.keyboardMethods[this.options.keys[i]];
                } else if(this.options.keyboardMethods[this.options.keys[i]] !== undefined &&
                    this.options.keyboardMethods[this.options.keys[i]] !== null){
                    keyboardEvents[i] = this.options.keyboardMethods[this.options.keys[i]].bind(self);
                }else if(Jx.type(this.options.keys[i]) == 'function') {
                    keyboardEvents[i] = this.options.keys[i].bind(self);
                }else{
                    console != undefined ? console.warn("keyboard method %o not defined", this.options.keys[i]) : false;
                }
            }
    
            // initalize keyboard support but do NOT activate it (this is done inside this.activate()).
            this.keyboard = new Keyboard({
                events: keyboardEvents
            });
    
            this.addFormatterUriClickListener();
        },
        /**
         * APIMethod: detach
         * detaches from the grid
         * 
         * @return void
         */
        detach: function() {
            if (this.grid) {
                this.grid.removeEvent('gridCellClick', this.onCellClick);
            }
            this.grid = null;
            this.keyboard = null;
        },
        /**
         * APIMethod: enable
         * enables the grid 'externally'
         *
         * @return void
         */
        enable : function () {
            this.options.enabled = true;
        },
        /**
         * APIMethod: disable
         * disables the grid 'externally'
         *
         * @var Boolean close - default true: also closes the currently open input/popup
         * @var Boolean save - default false: also changes the currently open input/popup
         * @return void
         */
        disable : function(close, save) {
            close = (close !== undefined && close !== null) ? close : true;
            save = (save !== undefined && save !== null) ? save : false;
            if(close && this.activeCell.cell != null) {
                this.deactivate(save);
            }
            this.options.enabled = false;
        },
    
        /**
         * Method: onCellClick
         * dispatch clicking on a table cell
         */
        onCellClick: function(cell) {
            this.activate(cell);
        },
        /**
         * Method: activate
         * activates the input field or breaks up if conditions are not fulfilled
         *
         * @todo Field validation
         *
         * Parameters:
         * @var {Object} cell Table Element
         * @return void
         */
        activate: function(cell) {
            // if not enabled or the cell is null, do nothing at all
            if(!this.options.enabled || !cell)
                return;
    
            // activate can be called by clicking on the same cell or a
            // different one
            if (this.activeCell.cell) {
                if (this.activeCell.cell != cell) {
                    if (!this.deactivate()) {
                        return;
                    }
                } else {
                    // they are the same, ignore?
                    return;
                }
            }
          
            var data  = this.grid.getCellData(cell); //.retrieve('jxCellData');
    
            if (!data || data.row === undefined || data.row === null || data.column === undefined || data.column === null) {
                if(console !== undefined) {
                    console.warn('out of grid %o',cell);
                    console.warn('data was %o', data);
                }
                return;
            }
    
            // column marked as not editable
            if (!data.column.options.isEditable) {
                return;
            }
    
            if (this.activeCell.timeoutId) {
                clearTimeout(activeCell.timeoutId);
            }
    
            // set active record index to selected row
            this.grid.store.moveTo(data.row);
    
            // set up the data objects we need
            var options = this.options,
                grid = this.grid,
                store = grid.getStore(),
                index = grid.columns.getIndexFromGrid(data.column.name),
                colOptions = data.column.options,
                activeCell = {
                    oldValue      : store.get(data.column.name),
                    newValue      : {data: null, error: false},
                    fieldOptions  : this.getFieldOptionsByColName(data.column.name),
                    data          : data,
                    cell          : cell,
                    span          : cell.getElement('span.jxGridCellContent'),
                    validator     : null,
                    field         : null,
                    timeoutId     : null
                },
                jxFieldOptions = activeCell.fieldOptions.options,
                oldValue,
                groups,
                k,
                n;
    
            // check if this column has special validation settings - 
            // otherwise use default from this.options.validate
            if(data.column.options.validate !== undefined || 
                data.column.options.validate !== null || 
                typeof(data.column.options.validate) != 'boolean') {
                data.column.options.validate = options.validate;
                cell.store('jxCellData', data);
            }
    
            // check for different input field types
            switch(activeCell.fieldOptions.type) {
                case 'Text':
                case 'Color':
                case 'Password':
                case 'File':
                    jxFieldOptions.value = activeCell.oldValue;
                    break;
                case 'Textarea':
                    jxFieldOptions.value = activeCell.oldValue.replace(/<br \/>/gi, '\n');
                    break;
                case 'Select':
                    // find out which visible value fits to the value inside
                    // <option>{value}</option> and set it to selected
                    jxFieldOptions.value = oldValue  = activeCell.oldValue.toString();
                    function setCombos(opts, oldValue) {
                        for(var i = 0, j = opts.length; i < j; i++) {
                            if(opts[i].value == oldValue) {
                                opts[i].selected = true;
                            }else{
                                opts[i].selected = false;
                            }
                        }
                        return opts;
                    }
    
                    if(jxFieldOptions.comboOpts) {
                        jxFieldOptions.comboOpts = setCombos(jxFieldOptions.comboOpts, oldValue);
                    }else if(jxFieldOptions.optGroups) {
                        groups = jxFieldOptions.optGroups;
                        for(k = 0, n = groups.length; k < n; k++) {
                            groups[k].options = setCombos(groups[k].options, oldValue);
                        }
                        jxFieldOptions.optGroups = groups;
                    } 
                    break;
                case 'Radio':
                case 'Checkbox':
                default:
                    console != undefined ? console.warn("Fieldtype %o is not supported yet. If you have set a validator for a column, you maybe have forgotton to enter a field type.", activeCell.fieldOptions.type) : false;
                    return;
                    break;
            }
    
            // update the 'oldValue' to the formatted style, to compare the new value with the formatted one instead with the non-formatted-one
            if(options.fieldFormatted && colOptions.renderer.options.formatter != null) {
                if(colOptions.fieldFormatted === undefined || colOptions.fieldFormatted === null || colOptions.fieldFormatted == true ) {
                    jxFieldOptions.value = colOptions.renderer.options.formatter.format(jxFieldOptions.value);
                    activeCell.oldValue = jxFieldOptions.value;
                }
            }
    
            // create jx.field
            activeCell.field = new Jx.Field[activeCell.fieldOptions.type.capitalize()](jxFieldOptions);
            // create validator
            if(options.validate && colOptions.validate) {
                activeCell.validator = new Jx.Plugin.Field.Validator(activeCell.fieldOptions.validatorOptions);
                activeCell.validator.attach(activeCell.field);
            } 
    
            // store properties of the active cell
            this.activeCell = activeCell;
            this.setStyles(cell);
    
            if(options.useKeyboard) {
                this.keyboard.activate();
            }
    
            // convert a string to an integer if somebody entered a numeric value in quotes, if it failes: make false
            if(typeOf(options.blurDelay) == 'string') {
                options.blurDelay = options.blurDelay.toInt() ? options.blurDelay.toInt() : false;
            }
    
            // add a onblur() and onfocus() event to the input field if enabled.
            if(options.blurDelay !== false && typeof(options.blurDelay) == 'number') {
                activeCell.field.field.addEvents({
                    // activate the timeout to close the input/poup
                    'blur' : function() {
                        // @todo For some reason, webkit does not clear the timeout correctly when navigating through the grid with keyboard
                        clearTimeout(activeCell.timeoutId);
                        activeCell.timeoutId = this.deactivate.delay(this.options.blurDelay);
                    }.bind(this),
                    // clear the timeout when the user focusses again
                    'focus' : function() {
                        clearTimeout(activeCell.timeoutId);
                    }, 
                    // clear the timeout when the user puts the mouse over the input
                    'mouseover' : function() {
                        clearTimeout(activeCell.timeoutId);
                    }
                });
                if(this.popup.domObj != null) {
                    this.popup.domObj.addEvent('mouseenter', function() {
                        clearTimeout(activeCell.timeoutId);
                    });
                }
            }
    
            activeCell.field.field.focus();
        }, 
        /**
         * APIMethod: deactivate
         * hides the currently active field and stores the new entered data if the
         * value has changed
         *
         * Parameters:
         * @var {Boolean} save (Optional, default: true) - force aborting
         * @return true if no data error occured, false if error (popup/input stays visible)
         */
        deactivate: function(save) {
            var newValue = {data : null, error : false},
                index,
                activeCell = this.activeCell,
                grid = this.grid,
                store = grid.store,
                options = this.options,
                highlighter,
                cellBg;
    
            clearTimeout(activeCell.timeoutId);
    
            if(activeCell.field !== null) {
                save = (save !== undefined && save !== null) ? save : true;
    
    
                // update the value in the column
                if(save && activeCell.field.getValue().toString() != activeCell.oldValue.toString()) {
                    store.moveTo(activeCell.data.row);
                    /*
                     * @todo webkit shrinks the rows when the value is updated... but refreshing the grid
                     *       immidiately returns in a wrong calculating of the cell position (getCoordinates)
                     */
                    switch (activeCell.fieldOptions.type) {
                        case 'Select':
                            index = activeCell.field.field.selectedIndex;
                            newValue.data = document.id(activeCell.field.field.options[index]).get('value');
                            break;
                        case 'Textarea':
                            newValue.data = activeCell.field.getValue().replace(/\n/gi, '<br />');
                            break;
                        default:
                            newValue.data = activeCell.field.getValue();
                            break;
                    }
                    if (save) {
                        activeCell.newValue.data = newValue.data;
                    }
                    // validation only if it should be saved!
                    if (activeCell.validator != null && !activeCell.validator.isValid()) {
                        newValue.error = true;
                        activeCell.field.field.focus.delay(50, activeCell.field.field);
                    }
                } else {
                    activeCell.span.show();
                }
    
                // var data = activeCell.cell.retrieve('jxCellData');
                if (save && newValue.data != null && newValue.error == false) {
                    store.set(activeCell.data.column.name, newValue.data);
                    this.addFormatterUriClickListener();
                    // else show error message and cell
                } else if (newValue.error == true) {
                    activeCell.span.show();
                }
    
                // update reference to activeCell
                if (activeCell.data.row !== undefined && 
                    activeCell.data.row !== null && 
                    activeCell.data.index !== undefined && 
                    activeCell.data.index !== null) {
                    var colIndex = grid.row.useHeaders() ? activeCell.data.index-1 : activeCell.data.index;
                    this.activeCell.cell = grid.gridTableBody.rows[this.activeCell.data.row].cells[colIndex];
                }
    
                if (options.useKeyboard) {
                    activeCell.field.removeEvent('keypress', this.setKeyboard);
                }
    
                /**
                 * COMMENT: this is just an idea how changing a value could be visualized
                 * we could also pass an Fx.Tween element?
                 * the row could probably be highlighted as well?
                 */
                if(options.cellChangeFx.use) {
                    highlighter = new Fx.Tween(this.activeCell.cell, {
                        duration: 250,
                        onComplete: function(ev) {
                            this.element.removeProperty('style');
                        }
                    });
                    cellBg = activeCell.cell.getStyle('background-color');
                    cellBg = cellBg == 'transparent' ? '#fff' : cellBg;
                    if (newValue.data != null && newValue.error == false) {
                        highlighter.start('background-color',options.cellChangeFx.success, cellBg);
                    } else if (newValue.error){
                        highlighter.start('background-color',options.cellChangeFx.error, cellBg);
                    }
                }
    
                // check for error and keep input field alive
                if (newValue.error) {
                    if(options.cellChangeFx.use) {
                        activeCell.field.field.highlight(options.cellChangeFx.error);
                    }
                    activeCell.field.field.setStyle('border','1px solid '+options.cellChangeFx.error);
                    activeCell.field.field.focus();
                    return false;
                // otherwise hide it
                }else{
                    this.keyboard.deactivate();
                    this.unsetActiveField();
                    return true;
                }
            }
        },
        /**
         * Method: setStyles
         * 
         * sets some styles for the Jx.Field elements...
         *
         * Parameters:
         * @var cell - table cell of the grid
         * @return void
         */
        setStyles : function(cell) {
            var styles, 
                size,
                options = this.options,
                activeCell = this.activeCell;
            // popup
            if (options.popup.use) {
                if (options.popup.useLabels) {
                    activeCell.field.options.label = activeCell.data.column.options.header;
                    activeCell.field.render();
                }
                styles = {
                    field : {
                        'width'  : activeCell.field.type == 'Select' ?
                            cell.getContentBoxSize().width + 5 + "px" :
                            cell.getContentBoxSize().width - 14 + "px",
                        'margin' : 'auto 0'
                    }
                };
                activeCell.field.field.setStyles(styles.field);
                this.showPopUp(cell);
            // No popup
            } else {
                size   = cell.getContentBoxSize();
                styles = {
                    domObj : {
                        position: 'absolute'
                    },
                    field : {
                        width : size.width + "px",
                        'margin-left' : 0
                    }
                };
    
                activeCell.field.domObj.setStyles(styles.domObj);
                activeCell.field.field.setStyles(styles.field);
    
                activeCell.field.domObj.inject(document.body);
                Widget.prototype.position(activeCell.field.domObj, cell, {
                    horizontal: ['left left'],
                    vertical: ['top top']
                });
    
                activeCell.span.hide();
            }
    
            // COMMENT: an outline of the cell helps identifying the currently active cell
            if(options.cellOutline.use) {
                cell.setStyle('outline', options.cellOutline.style);
            }
        },
        /**
         * Method: showPopUp
         *
         * Shows the PopUp of of the editor if it already exists, otherwise calls Method
         * this.createPopUp
         *
         * Parameters:
         * @var cell - table cell of the grid
         */
        showPopUp : function(cell) {
            if(this.popup.domObj != null) {
                Widget.prototype.position(this.popup.domObj, cell, {
                    horizontal: ['left left'],
                    vertical: ['top top']
                });
                this.activeCell.field.domObj.inject(this.popup.innerWrapper, 'top');
                this.popup.domObj.show();
                this.setPopUpButtons();
                this.setPopUpStylesAfterRendering();
            }else{
                this.createPopUp(cell);
            }
        },
        /**
         * Method: createPopUp
         *
         * creates the popup for the requested cell.
         *
         * COMMENT: this could also be an jx.dialog..? if we use jx.dialog, maybe without a title element?
         *          Maybe a jx.dialog is too much for this little thing?
         *
         * Parameters:
         * @var cell - table cell of the grid
         */
        createPopUp : function(cell) {
            var coords = cell.getCoordinates(),
                self      = this, popup  = null, innerWrapper = null,
                closeIcon = null, submit = null, cancel       = null,
                template  = Jx.Widget.prototype.processTemplate(this.options.popup.template, this.classes);
    
            popup = template.jxGridEditorPopup;
    
            innerWrapper = template.jxGridEditorPopupInnerWrapper;
            /**
             * COMMENT: first positioning is always in the top left of the grid..
             * don't know why
             * manual positioning is needed..?
             */
            popup.setStyles({
                'left' : coords.left+'px',
                'top'  : coords.top +'px'
            });
            /*
            Jx.Widget.prototype.position(popup, cell, {
                horizontal: ['left left'],
                vertical: ['top top']
            });
            */
    
            this.popup.domObj         = popup;
            this.popup.innerWrapper   = innerWrapper;
            this.popup.closeIcon      = closeIcon;
            this.setPopUpButtons();
    
            this.activeCell.field.domObj.inject(this.popup.innerWrapper, 'top');
            this.popup.domObj.inject(document.body);
    
            this.setPopUpStylesAfterRendering();
        },
        /**
         * Method: setPopUpStylesAfterRendering
         *
         * - measures the widths of the buttons to set a new min-width for the popup
         *   because custom labels could break the min-width and force a line-break
         * - resets the size of the field to make it fit inside the popup (looks nicer)
         *
         * @return void
         */
        setPopUpStylesAfterRendering: function() {
            if(this.options.popup.useButtons && this.popup.button.submit != null && this.popup.button.cancel != null) {
                this.popup.domObj.setStyle('min-width', this.popup.button.submit.domObj.getSize().x + this.popup.button.cancel.domObj.getSize().x + "px");
            }else{
                if(this.popup.button.submit != null)
                    this.popup.button.submit.domObj.hide();
                if(this.popup.button.cancel != null)
                    this.popup.button.cancel.domObj.hide();
            }
            this.activeCell.field.field.setStyle('width',
                this.activeCell.field.type == 'Select' ?
                this.popup.domObj.getSize().x - 7 + "px" :
                this.popup.domObj.getSize().x - 17 + "px");
        },
        /**
         * Method: setPopUpButtons
         * creates the PopUp Buttons if enabled in options or deletes them if set to false
         *
         * @return void
         */
        setPopUpButtons : function() {
            var self = this,
                button = {
                    submit : null,
                    cancel : null
                };
            // check if buttons are needed, innerWrapper exists and no buttons already exist
            if(this.options.popup.useButtons && this.popup.innerWrapper != null && this.popup.button.submit == null) {
                button.submit = new Button({
                    label : this.options.popup.button.submit.label.length == 0 ? 
                        this.getText({set:'Jx',key:'plugin.editor',value:'submitButton'}) :
                        this.getText(this.options.popup.button.submit.label),
                    image : this.options.popup.button.submit.image,
                    onClick: function() {
                        self.deactivate(true);
                    }
                }).addTo(this.popup.innerWrapper);
                button.cancel = new Button({
                    label : this.options.popup.button.cancel.label.length == 0 ? 
                        this.getText({set:'Jx',key:'plugin.editor',value:'cancelButton'}) :
                        this.getText(this.options.popup.button.cancel.label),
                    image : this.options.popup.button.cancel.image,
                    onClick: function() {
                        self.deactivate(false);
                    }
                }).addTo(this.popup.innerWrapper);
            }else if(this.options.popup.useButtons && this.popup.button.submit != null) {
                button = {
                    submit : this.popup.button.submit,
                    cancel : this.popup.button.cancel
                };
                // check if buttons are not needed and buttons already exist to remove them
            }else if(this.options.popup.useButtons == false && this.popup.button.submit != null) {
                this.popup.button.submit.cleanup();
                this.popup.button.cancel.cleanup();
            }
    
            this.popup.button = button;
        },
        /**
         * Method: unsetActiveField
         * resets the activeField and hides the popup
         *
         * @return void
         */
        unsetActiveField: function() {
            this.activeCell.field.destroy();
            if(this.popup.domObj != null) {
                this.popup.domObj.removeEvent('mouseenter');
                this.popup.domObj.hide();
            }
    
            this.activeCell.cell.setStyle('outline', '0px');
    
            this.activeCell = {
                field         : null,
                oldValue      : null,
                newValue      : { data: null, error: false},
                cell          : null,
                span          : null,
                timeoutId     : null,
                //popup         : null,   // do not destroy the popup, it might be used again
                data           : {},
                fieldOptions  : {},
                validator     : null
            };
        },
        /**
         * Method: unsetPopUp
         * resets the popup manually to be able to use it with different settings
         */
        unsetPopUp : function() {
            if(this.popup.domObj != null) {
                this.popup.domObj.destroy();
                this.popup.innerWrapper   = null;
                this.popup.closeIcon      = null;
                this.popup.button.submit = null;
                this.popup.button.cancel = null;
            }
        },
        /**
         * APIMethod: getNextCellInRow
         * activates the next cell in a row if it is editable
         * otherwise the focus jumps to the next editable cell in the next row
         * or starts at the beginning
         *
         * @var  {Boolean} save (Optional, default: true)
         * @return void
         */
        getNextCellInRow: function(save) {
            save = (save !== undefined && save !== null) ? save : true;
            var nextCell = true,
                nextRow = true,
                sumCols = this.grid.columns.columns.length,
                jxCellClass = 'td.jxGridCell:not(.jxGridCellUnattached)',
                i = 0,
                data,
                cell = this.activeCell.cell,
                options = this.options;
            if (this.activeCell.cell != null) {
                do {
                    nextCell = i > 0 ? nextCell.getNext(jxCellClass) : cell.getNext(jxCellClass);
                    // check if cell is still in row, otherwise returns null
                    if (nextCell == null) {
                        nextRow  = cell.getParent('tr').getNext();
                        // check if this was the last row in the table
                        if (nextRow == null && options.keypressLoop) {
                            nextRow = cell.getParent('tbody').getFirst();
                        } else if(nextRow == null && !options.keypressLoop){
                        return;
                        }
                        nextCell = nextRow.getFirst(jxCellClass);
                    }
                    data = this.grid.getCellData(nextCell);
                    i++;
                    // if all columns are set to uneditable during runtime, jump out of the loop after
                    // running through 2 times to prevent an endless-loop and browser crash :)
                    if (i == sumCols*2) {
                        this.deactivate(save);
                        return;
                    }
                } while(data && !data.column.options.isEditable);
    
                if (save === false) {
                    this.deactivate(save);
                }
                this.activate(nextCell);
            }
        },
        /**
         * APIMethod: getPrevCellInRow
         * activates the previous cell in a row if it is editable
         * otherwise the focus jumps to the previous editable cell in the previous row
         * or starts at the last cell in the last row at the end
         *
         * @var  {Boolean} save (Optional, default: true)
         * @return void
         */
        getPrevCellInRow: function(save) {
            save = (save !== undefined && save !== null) ? save : true;
            var prevCell, 
                prevRow, 
                i = 0,
                data,
                row,
                index,
                cell = this.activeCell.cell,
                sumCols = this.grid.columns.columns.length,
                jxCellClass = 'td.jxGridCell:not(.jxGridCellUnattached)',
                options = this.options;
            if(cell != null) {
                do {
                    prevCell = i > 0 ? prevCell.getPrevious(jxCellClass) : cell.getPrevious(jxCellClass);
                    // check if cell is still in row, otherwise returns null
                    if(prevCell == null) {
                        prevRow  = cell.getParent('tr').getPrevious();
                        // check if this was the last row in the table
                        if(prevRow == null && options.keypressLoop) {
                            prevRow = cell.getParent('tbody').getLast();
                        }else if(prevRow == null && !options.keypressLoop) {
                            return;
                        }
                        prevCell = prevRow.getLast(jxCellClass);
                    }
                    data  = this.grid.getCellData(prevCell);
                    row   = data.row;
                    index = data.index;
                    i++;
                    // if all columns are set to uneditable during runtime, jump out of the loop after
                    // running through 2 times to prevent an endless-loop and browser crash :)
                    if(i == sumCols*2) {
                        this.deactivate(save);
                        return;
                    }
                }while(data && !data.column.options.isEditable);
    
                if(save === false) {
                    this.deactivate(save);
                }
                this.activate(prevCell);
            }
        },
        /**
         * APIMethod: getNextCellInCol
         * activates the next cell in a column under the currently active one
         * if the active cell is in the last row, the first one will be used
         *
         * @var  {Boolean} save (Optional, default: true)
         * @return void
         */
        getNextCellInCol : function(save) {
            var nextRow,
                nextCell,
                activeCell = this.activeCell;
            save = (save !== undefined && save !== null) ? save : true;
            if (activeCell.cell != null) {
                nextRow = activeCell.cell.getParent().getNext();
                if (nextRow == null) {
                    nextRow = activeCell.cell.getParent('tbody').getFirst();
                }
                nextCell = nextRow.getElement('td.jxGridCol'+activeCell.data.index);
                if (save === false) {
                    this.deactivate(save);
                }
                this.activate(nextCell);
            }
        },
        /**
         * APIMethod: getPrevCellInCol
         * activates the previous cell in a column above the currently active one
         * if the active cell is in the first row, the last one will be used
         *
         * @var  {Boolean} save (Optional, default: true)
         * @return void
         */
        getPrevCellInCol : function(save) {
            var prevRow,
                prevCell,
                activeCell = this.activeCell;
            save = (save !== undefined && save !== null) ? save : true;
            if (activeCell.cell != null) {
                prevRow = activeCell.cell.getParent().getPrevious();
                if (prevRow == null) {
                    prevRow = activeCell.cell.getParent('tbody').getLast();
                }
                prevCell = prevRow.getElement('td.jxGridCol'+activeCell.data.index);
                if (save === false) {
                    this.deactivate(save);
                }
                this.activate(prevCell);
            }
        },
        /**
         * Method: cellValueIncrement
         * Whether increments or decrements the value of the active cell if the dataType is numeric
         *
         * Parameters
         * @var {Boolean} bool
         * @return void
         */
        cellValueIncrement : function(bool) {
            var activeCell = this.activeCell,
                dataType = activeCell.data.column.options.dataType,
                valueNew = null,
                formatter;
            switch (dataType) {
                case 'numeric':
                case 'currency':
                    valueNew = activeCell.field.getValue().toInt();
                    if (typeof(valueNew) == 'number') {
                        if (bool) {
                            valueNew++;
                        } else {
                            valueNew--;
                        }
                    }
                    break;
                case 'date':
                    valueNew = Date.parse(activeCell.field.getValue());
                    if (valueNew instanceof Date) {
                        if (bool) {
                            valueNew.increment();
                        } else {
                            valueNew.decrement();
                        }
                        formatter = new Jx.Formatter.Date();
                        valueNew = formatter.format(valueNew);
                    }
                    break;
            }
            if (valueNew != null) {
                activeCell.field.setValue(valueNew);
            }
        },
        /**
         * Method: cellIsInGrid
         * determins if the given coordinates are within the grid
         *
         * Parameters:
         * @var {Integer} row
         * @var {Integer} index
         * @return {Boolean}
         */
        cellIsInGrid: function(row, index) {
            if(row !== undefined && row !== null && index !== undefined && index !== null) {
                //console.log("Row %i - max Rows: %i, Col %i - max Cols %i", row, this.grid.gridTableBody.rows.length, index, this.grid.gridTableBody.rows[row].cells.length);
                if( row >= 0 && index >= 0 &&
                    row <= this.grid.gridTableBody.rows.length &&
                    index <= this.grid.gridTableBody.rows[row].cells.length) {
                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }
        },
        /**
         * APIMethod: getFieldOptionsByColName
         * checks for the name of a column inside the fieldOptions and returns
         * the object if found, otherwise the default options for the field
         *
         * Parameters:
         * @var {String} colName
         * @return {Object} default field options
         */
        getFieldOptionsByColName : function(colName) {
            var fo = this.options.fieldOptions,
                r  = this.options.fieldOptions[0];
            for(var i = 0, j = fo.length; i < j; i++) {
                if(fo[i].field == colName) {
                    r = fo[i];
                    break;
                }
            }
            return r;
        },
        /**
         * Method: addFormatterUriClickListener
         *
         * looks up for Jx.Formatter.Uri columns to disable the link and open the
         * inline editor instead when CTRL is NOT pressed.
         * set option linkClickListener to false to disable this
         *
         */
        addFormatterUriClickListener : function() {
            if(this.options.linkClickListener) {
                // prevent a link from beeing opened if the editor should appear and the uri formatter is activated
                var uriCols = [], tableCols, anchor;
                // find out which columns are using a Jx.Formatter.Uri
                this.grid.columns.columns.each(function(col,i) {
                    if(col.options.renderer.options.formatter != null && col.options.renderer.options.formatter instanceof Jx.Formatter.Uri) {
                        uriCols.push(i);
                    }
                });
                // add an event to all anchors inside these columns
                this.grid.gridObj.getElements('tr').each(function(tr,i) {
                    tableCols = tr.getElements('td.jxGridCell');
                    for(var j = 0, k = uriCols.length; j < k; j++) {
                        anchor = tableCols[uriCols[j]-1].getElement('a');
                        if(anchor) {
                            anchor.removeEvent('click');
                            anchor.addEvent('click', function(ev) {
                                // open link if ctrl was clicked
                                if(!ev.control) {
                                    ev.preventDefault();
                                }
                            });
                        }
                    }
                });
            }
        },
        /**
         * APIMethod: changeText
         * This method should be overridden by subclasses. It should be used
         * to change any language specific default text that is used by the widget.
         *
         * Parameters:
         * lang - the language being changed to or that had it's data set of
         * 		translations changed.
         */
        changeText: function (lang) {
            this.parent();
            if (this.options.popup.use && this.options.popup.useButtons) {
                if(this.popup.button.submit != null) {
                    this.popup.button.submit.cleanup();
                    this.popup.button.cancel.cleanup();
                    this.popup.button.submit = null;
                    this.popup.button.cancel = null;
                    this.setPopUpButtons();
                }
            }
        }
    }); 

    if (base.global) {
        base.global.Plugin.Grid.Editor = module.exports;
    }
});

/*
---

name: Jx.Plugin.Grid.Prelighter

description: Highlights rows, columns, cells, and headers in grids

license: MIT-style license.

requires:
 - Jx.Plugin.Grid

provides: [Jx.Plugin.Grid.Prelighter]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Grid.Prelighter
 *
 * Extends: <Jx.Plugin>
 *
 * Grid plugin to prelight rows, columns, and cells
 *
 * Inspired by the original code in Jx.Grid
 *
 * License:
 * Original Copyright (c) 2008, DM Solutions Group Inc.
 * This version Copyright (c) 2009, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/grid/prelighter", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Grid = require("../../grid"
                       )
    var prelighter = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Grid.Prelighter",
        
        name: 'Prelighter',
        
        options : {
            /**
             * Option: cell
             * defaults to false.  If set to true, the cell under the mouse is
             * highlighted as the mouse moves.
             */
            cell : false,
            /**
             * Option: row
             * defaults to false.  If set to true, the row under the mouse is
             * highlighted as the mouse moves.
             */
            row : false,
            /**
             * Option: column
             * defaults to false.  If set to true, the column under the mouse is
             * highlighted as the mouse moves.
             */
            column : false,
            /**
             * Option: rowHeader
             * defaults to false.  If set to true, the row header of the row under
             * the mouse is highlighted as the mouse moves.
             */
            rowHeader : false,
            /**
             * Option: columnHeader
             * defaults to false.  If set to true, the column header of the column
             * under the mouse is highlighted as the mouse moves.
             */
            columnHeader : false
        },
        /**
         * APIMethod: init
         * construct a new instance of the plugin.  The plugin must be attached
         * to a Jx.Grid instance to be useful though.
         */
        init: function() {
            this.parent();
            this.bound.lighton = this.lighton.bind(this);
            this.bound.lightoff = this.lightoff.bind(this);
            this.bound.mouseleave = this.mouseleave.bind(this);
        },
        /**
         * APIMethod: attach
         * Sets up the plugin and connects it to the grid
         */
        attach: function (grid) {
            if (grid === undefined || grid === null || !instanceOf(grid, Grid)) {
                return;
            }
            this.parent(grid);
            this.grid = grid;
            grid.wantEvent('gridCellEnter');
            grid.wantEvent('gridCellLeave');
            grid.wantEvent('gridRowEnter');
            grid.wantEvent('gridRowLeave');
            grid.wantEvent('gridColumnEnter');
            grid.wantEvent('gridColumnLeave');
            grid.wantEvent('gridMouseLeave');
            
            grid.addEvent('gridCellEnter', this.bound.lighton);
            grid.addEvent('gridCellLeave', this.bound.lightoff);
            grid.addEvent('gridRowEnter', this.bound.lighton);
            grid.addEvent('gridRowLeave', this.bound.lightoff);
            grid.addEvent('gridColumnEnter', this.bound.lighton);
            grid.addEvent('gridColumnLeave', this.bound.lightoff);
            grid.addEvent('gridMouseLeave', this.bound.mouseleave);
        },
        /**
         * APIMethod: detach
         */
        detach: function() {
            if (this.grid) {
                this.grid.removeEvent('gridCellEnter', this.bound.lighton);
                this.grid.removeEvent('gridCellLeave', this.bound.lightoff);
                this.grid.removeEvent('gridRowEnter', this.bound.lighton);
                this.grid.removeEvent('gridRowLeave', this.bound.lightoff);
                this.grid.removeEvent('gridColumnEnter', this.bound.lighton);
                this.grid.removeEvent('gridColumnLeave', this.bound.lightoff);
                this.grid.removeEvent('gridMouseLeave', this.bound.mouseleave);
            }
            this.grid = null;
        },
        /**
         * APIMethod: activate
         * Allows programatic access to turning prelighting on.
         * 
         * Parameters:
         * opt - the option to turn on. One of 'cell', 'row', 'rowHeader', 'column', or 'columnHeader'
         */
        activate: function (opt) {
            this.options[opt] = true;
        },
        /**
         * APIMethod: deactivate
         * Allows programatic access to turning prelighting off.
         * 
         * Parameters:
         * opt - the option to turn off. One of 'cell', 'row', 'rowHeader', 'column', or 'columnHeader'
         */
        deactivate: function (opt) {
            this.options[opt] = false;
        },
        /**
         * Method: lighton
         */
        lighton : function (cell) {
            this.light(cell, true);
    
        },
        /**
         * Method: lightoff
         */
        lightoff : function (cell) {
            this.light(cell, false);
    
        },
        /**
         * Method: light
         * dispatches the event to the various prelight methods.
         */
        light: function (cell, on) {
            var parent = cell.getParent(),
                rowIndex = parent.getParent().getChildren().indexOf(parent),
                colIndex = cell.getParent().getChildren().indexOf(cell);
    
            if (this.options.cell) {
                this.prelightCell(cell, on);
            }
            if (this.options.row) {
                this.prelightRow(rowIndex, on);
            }
            if (this.options.column) {
                this.prelightColumn(colIndex, on);
            }
            if (this.options.rowHeader) {
                this.prelightRowHeader(rowIndex, on);
            }
            if (this.options.columnHeader) {
                this.prelightColumnHeader(colIndex, on);
            }
        },
    
        /**
         * Method: prelightRowHeader
         * apply the jxGridRowHeaderPrelight style to the header cell of a row.
         * This removes the style from the previously pre-lit row header.
         *
         * Parameters:
         * row - {Integer} the row to pre-light the header cell of
         */
        prelightRowHeader : function (row, on) {
            if (this.prelitRowHeader !== undefined && this.prelitRowHeader !== null && !on) {
                this.prelitRowHeader.removeClass('jxGridRowHeaderPrelight');
            } else if (on) {
                this.prelitRowHeader = (row >= 0 && row < this.grid.rowTableBody.rows.length) ? this.grid.rowTableBody.rows[row].cells[0] : null;
                if (this.prelitRowHeader) {
                    this.prelitRowHeader.addClass('jxGridRowHeaderPrelight');
                }
            }
        },
        /**
         * Method: prelightColumnHeader
         * apply the jxGridColumnHeaderPrelight style to the header cell of a column.
         * This removes the style from the previously pre-lit column header.
         *
         * Parameters:
         * col - {Integer} the column to pre-light the header cell of
         * on - flag to tell if we're lighting on or off
         */
        prelightColumnHeader : function (col, on) {
            if (this.grid.colTableBody.rows.length === 0) {
                return;
            }
    
            if (this.prelitColumnHeader !== undefined && this.prelitColumnHeader !== null && !on) {
                this.prelitColumnHeader.removeClass('jxGridColumnHeaderPrelight');
            } else if (on) {
                this.prelitColumnHeader = (col >= 0 && col < this.grid.colTableBody.rows[0].cells.length) ? this.grid.colTableBody.rows[0].cells[col] : null;
                if (this.prelitColumnHeader) {
                    this.prelitColumnHeader.addClass('jxGridColumnHeaderPrelight');
                }
            }
    
        },
        /**
         * Method: prelightRow
         * apply the jxGridRowPrelight style to row.
         * This removes the style from the previously pre-lit row.
         *
         * Parameters:
         * row - {Integer} the row to pre-light
         * on - flag to tell if we're lighting on or off
         */
        prelightRow : function (row, on) {
           if (this.prelitRow != undefined && this.prelitRow != null && !on) {
                this.prelitRow.removeClass('jxGridRowPrelight');
            } else if (on) {
                this.prelitRow = (row >= 0 && row < this.grid.gridTableBody.rows.length) ? this.grid.gridTableBody.rows[row] : null;
                if (this.prelitRow) {
                    this.prelitRow.addClass('jxGridRowPrelight');
                }
            }
            this.prelightRowHeader(row, on);
        },
        /**
         * Method: prelightColumn
         * apply the jxGridColumnPrelight style to a column.
         * This removes the style from the previously pre-lit column.
         *
         * Parameters:
         * col - {Integer} the column to pre-light
         * on - flag to tell if we're lighting on or off
         */
        prelightColumn : function (col, on) {
            if (col >= 0 && col < this.grid.gridTableBody.rows[0].cells.length) {
                if (this.prelitColumn != undefined && this.prelitColumn != null && !on) {
                    for (var i = 0; i < this.grid.gridTableBody.rows.length; i++) {
                        this.grid.gridTableBody.rows[i].cells[this.prelitColumn].removeClass('jxGridColumnPrelight');
                    }
                } else if (on) {
                    this.prelitColumn = col;
                    for (i = 0; i < this.grid.gridTableBody.rows.length; i++) {
                        this.grid.gridTableBody.rows[i].cells[col].addClass('jxGridColumnPrelight');
                    }
                }
                this.prelightColumnHeader(col, on);
            }
        },
        /**
         * Method: prelightCell
         * apply the jxGridCellPrelight style to a cell.
         * This removes the style from the previously pre-lit cell.
         *
         * Parameters:
         * cell - the cell to lighton/off
         * on - flag to tell if we're lighting on or off
         */
        prelightCell : function (cell, on) {
            if (this.prelitCell !== undefined && this.prelitCell !== null && !on) {
                this.prelitCell.removeClass('jxGridCellPrelight');
            } else if (on) {
                this.prelitCell = cell;
                if (this.prelitCell) {
                    this.prelitCell.addClass('jxGridCellPrelight');
                }
            }
        },
        
        mouseleave: function() {
            //turn off all prelights when the mouse leaves the grid
            if (this.prelitCell !== undefined && this.prelitCell !== null) {
                this.prelitCell.removeClass('jxGridCellPrelight');
            }
            if (this.prelitColumn !== undefined && this.prelitColumn !== null) {
                for (var i = 0; i < this.grid.gridTableBody.rows.length; i++) {
                    this.grid.gridTableBody.rows[i].cells[this.prelitColumn].removeClass('jxGridColumnPrelight');
                }
            }
            if (this.prelitRow !== undefined && this.prelitRow !== null) {
                this.prelitRow.removeClass('jxGridRowPrelight');
            }
            if (this.prelitColumnHeader !== undefined && this.prelitColumnHeader !== null) {
                this.prelitColumnHeader.removeClass('jxGridColumnHeaderPrelight');
            }
            if (this.prelitRowHeader !== undefined && this.prelitRowHeader !== null) {
                this.prelitRowHeader.removeClass('jxGridRowHeaderPrelight');
            }
        }
    });
    
    if (base.global) {
        base.global.Plugin.Grid.Prelighter = module.exports;
    }
    
});


/*
---

name: Jx.Plugin.Tree.Sorter

description: A plugin that will enable drag and drop sorting in a Jx.Tree

license: MIT-style license.

requires:
 - Jx.Tree
 - Jx.Plugin.Tree
 - More/Drag.Move
 - More/Sortable


provides: [Jx.Plugin.Tree.Sorter]

css:
 - tree.sorter

...
 */
/**
 * Class: Jx.Plugin.Tree.Sorter
 * Plugin to allow trees to be reorder using drag and drop.
 * 
 * Much of this code has been adapted from 
 * https://raw.github.com/cpojer/mootools-tree/master/Source/Tree.js
 * which is under an MIT-style license
 */
define("jx/plugin/tree/sorter", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Tree = require("../../tree"),
        folder = require("../../tree/folder");
        
    var sorter = module.exports = new Class({

        Extends: Plugin,
        Family: 'Jx.Plugin.Tree.Sorter',
        
        options: {
            indicatorOffset: 0,
            cloneOffset: {x: 16, y: 16},
            cloneOpacity: 0.8,
            precalculate: false
        },
        
        tree: null,
        active: false,
        
        init: function () {
            this.bound = {
                add: this.onFolderAdd.bind(this),
                startDrag: this.onStartDrag.bind(this),
                complete: this.onComplete.bind(this)
            };
        },
    
        attach: function (tree) {
            if (tree === undefined || tree === null || !instanceOf(tree,Tree)) {
                return;
            }
            
            this.tree = tree;
            
            this.tree.addEvents({
                add: this.bound.add
            });
            
            this.tree.sortable = new Sortables(this.tree.container,{
                handle: 'a.jxTreeItem',
                onStart: this.bound.startDrag,
                onComplete: this.bound.complete
            });  
            
            this.parent(tree);
        },
        
        detach: function () {
            this.parent();
        },
        
        onFolderAdd: function(item){
            if (instanceOf(item, Folder)) {
                //allow sorting of the folder's items
                item.sortable = new Sortables(item.container,{
                    handle: 'a.jxTreeItem',
                    onStart: this.onStartDrag.bind(this),
                    onComplete: this.onComplete.bind(this)
                });  
            }
            //add the item to the sortable instance above it
            item.owner.sortable.addItems(document.id(item));
        },
        
        onComplete: function(element){
            console.log('onComplete fired by sortable');
            //only run this if we were actually sorting (start event fired)
            if (this.active) {
                //get the item just above us...
                var previous = base.getWidget(element.getPrevious('li'));
                element = base.getWidget(element);
                //fire an event
                this.tree.fireEvent('jxTreeSortDone', [element, previous]);
                //wait a split second then enable the tree events again
                var fn = function(){
                    this.tree.setHoldEvents(false);
                }.delay(250,this);
            }
        },
        
        onStartDrag: function(element,clone) {
            console.log('onStart fired by sortable');
            //stop events on the tree
            this.tree.setHoldEvents(true);
            this.active = true;
            element.removeClass('jxHover');
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Tree.Sorter = module.exports;
    }
    
});

/*
---

name: Jx.Plugin.DataView.GroupFolder

description: Enables closing and opening groups in a group dataview

license: MIT-style license.

requires:
 - Jx.Plugin.DataView
 - Jx.Slide

provides: [Jx.Plugin.DataView.GroupFolder]

...
 */
/**
 * Class: Jx.Plugin.DataView.GroupFolder
 *
 * Extends: <Jx.Plugin>
 *
 * Plugin for DataView - allows folding/unfolding of the groups in the
 * grouped dataview
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/dataview/groupfolder", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Slide = require("../../slide"),
        DataView = require("../../panel/dataview");
        
    var groupFolder = module.exports = new Class({

        Extends: Plugin,
        Family: "Jx.Plugin.DataView.GroupFolder",
    
        options: {
            /**
             * Option: headerClass
             * The base for styling the header. Gets '-open' or '-closed' added
             * to it.
             */
            headerClass: null
        },
        /**
         * Property: headerState
         * Hash that holds the open/closed state of each header
         */
        headerState: null,
        init: function() {
          this.headerState = {};
        },
        /**
         * APIMethod: attach
         * Attaches this plugin to a dataview
         */
        attach: function (dataView) {
            if (dataView === undefined || dataView === null || !instanceOf(dataview, DataView)) {
                return;
            }
    
            this.dv = dataView;
            this.dv.addEvent('renderDone', this.setHeaders.bind(this));
        },
        /**
         * Method: setHeaders
         * Called after the dataview is rendered. Sets up the Jx.Slide instance
         * for each header. It also sets the initial state of each header so that
         * if the dataview is redrawn for some reason the open/closed state is
         * preserved.
         */
        setHeaders: function () {
            var headers = this.dv.domA.getElements('.' + this.dv.options.groupHeaderClass);
    
            headers.each(function (header) {
                var id = header.get('id');
                var s = new Slide({
                    target: header.getNext(),
                    trigger: id,
                    onSlideOut: this.onSlideOut.bind(this, header),
                    onSlideIn: this.onSlideIn.bind(this, header)
                });
    
                if (Object.keys(this.headerState).contains(id)) {
                    var state = this.headerState[id];
                    if (state === 'open') {
                        s.slide('in');
                    } else {
                        s.slide('out');
                    }
                } else {
                    s.slide('in');
                }
            }, this);
        },
    
        /**
         * Method: onSlideIn
         * Called when a group opens.
         *
         * Parameters:
         * header - the header that was clicked.
         */
        onSlideIn: function (header) {
            this.headerState[header.get('id')] = 'open';
            if (header.hasClass(this.options.headerClass + '-closed')) {
                header.removeClass(this.options.headerClass + '-closed');
            }
            header.addClass(this.options.headerClass + '-open');
        },
        /**
         * Method: onSlideOut
         * Called when a group closes.
         *
         * Parameters:
         * header - the header that was clicked.
         */
        onSlideOut: function (header) {
            this.headerState[header.get('id')] = 'closed';
            if (header.hasClass(this.options.headerClass + '-open')) {
                header.removeClass(this.options.headerClass + '-open');
            }
            header.addClass(this.options.headerClass + '-closed');
        }
    });
    
    if (base.global) {
        base.global.Plugin.DataView.GroupFolder = module.exports;
    }
});


/*
---

name: Jx.Plugin.ToolbarContainer.TabMenu

description: Adds a menu of tabs to the toolbar container for easy access to all tabs.

license: MIT-style license.

requires:
 - Jx.Plugin.ToolbarContainer

provides: [Jx.Plugin.ToolbarContainer.TabMenu]

...
 */
/**
 * Class: Jx.Plugin.ToolbarContainer.TabMenu
 *
 * Extends: <Jx.Plugin>
 *
 * This plugin provides a menu of tabs in a toolbar (similar to the button in firefox at the end of the row of tabs).
 * It is designed to be used only when the toolbar contains tabs and only when the container is allowed to scroll. Also,
 * this plugin must be added directly to the Toolbar container. You can get a reference to the container for a
 * <Jx.TabBox> by doing
 *
 * (code)
 * var tabbox = new Jx.TabBox();
 * var toolbarContainer = document.id(tabBox.tabBar).getParent('.jxBarContainer').retrieve('jxBarContainer');
 * (end)
 *
 * You can then use the attach method to connect the plugin. Otherwise, you can add it via any normal means to a
 * directly instantiated Container.
 *
 * License:
 * Copyright (c) 2010, Jon Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/toolbarcontainer/tabmenu", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Tab = require("../../tab"),
        Menu = require("../../menu"),
        MenuItem = require("../../menu/item");
        
    var tabMenu = module.exports = new Class({

        Extends: Plugin,
        Family: 'Jx.Plugin.ToolbarContainer.TabMenu',
    
        Binds: ['addButton'],
    
        options: {
        },
        /**
         * Property: tabs
         * holds all of the tabs that we're tracking
         */
        tabs: [],
    
        init: function () {
            this.parent();
        },
    
        attach: function (toolbarContainer) {
            this.parent(toolbarContainer);
    
            this.container = toolbarContainer;
    
            //we will only be used if the container is allowed to scroll
            if (!this.container.options.scroll) {
                return;
            }
    
            this.menu = new Menu({},{
                buttonTemplate: '<span class="jxButtonContainer"><a class="jxButton jxButtonMenu jxDiscloser"><span class="jxButtonContent"><span class="jxButtonLabel"></span></span></a></span>'
            }).addTo(this.container.controls,'bottom');
            document.id(this.menu).addClass('jxTabMenuRevealer');
            this.container.update();
    
            //go through all of the existing tabs and add them to the menu
            //grab the toolbar...
            var tb = document.id(this.container).getElement('ul').retrieve('jxToolbar');
            tb.list.each(function(item){
                this.addButton(item);
            },this);
    
            //connect to the add event of the toolbar list to monitor the addition of buttons
            tb.list.addEvent('add',this.addButton);
        },
    
        detach: function () {
            this.parent();
        },
    
        addButton: function (item) {
            var tab;
            tab = instanceOf(item,Tab) ? item : document.id(item).getFirst().retrieve('jxTab');
    
    
            var l = tab.getLabel();
            if (l === undefined || l === null | l == "") {
                l = '&nbsp;';
            }
            var mi = new MenuItem({
                label: l,
                image: tab.options.image,
                onClick: function() {
                    if (tab.isActive()) {
                        this.container.scrollIntoView(tab);
                    } else {
                        tab.setActive(true);
                    }
                }.bind(this)
            });
    
            document.id(tab).store('menuItem', mi);
    
            tab.addEvent('close', function() {
                this.menu.remove(mi);
            }.bind(this));
    
            this.menu.add([mi]);
        }
    });
    
    if (base.global) {
        base.global.Plugin.ToolbarContainer.TabMenu  = module.exports;
    }
    
});

/*
---

name: Jx.Plugin.Editor.Button

description: base class for all buttons that act on the editor

license: MIT-style license.

requires:
 - Jx.Plugin.Editor
 - Jx.Button

provides: [Jx.Plugin.Editor.Button]

...
 */
define("jx/plugin/editor/button", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Button = require("../../button")
        
    var button = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Plugin.Editor.Button',
        
        options: {
            image: '',
            toggle: false,
            shortcut: null,
            title: '',
            imageClass: '',
            prefix: 'jxEditorButton'
        },
        
        tags: null,
        css: null,
        action: null,
        
        attach: function (editor) {
            this.editor = editor;
            this.selection = editor.selection;
            this.parent(editor);
            
            var tt = this.options.title;
            tt = (this.options.shortcut !== null && this.options.shortcut !== undefined)?tt+" (ctrl-" + this.options.shortcut + ")":tt;
            
            this.button = new Button({
                toggle: this.options.toggle,
                image: this.options.image,
                imageClass: this.options.prefix + this.options.imageClass,
                tooltip: tt
            });
            
            this.editor.toolbar.add(this.button);
            
            if (this.options.toggle) {
                this.button.addEvents({
                    down: this.command.bind(this),
                    up: this.command.bind(this)
                });
            } else {
                this.button.addEvent('click', this.command.bind(this));
            }
            
            this.editor.keys[this.options.shortcut] = this;
                
        },
        
        detach: function () {
            this.button.destroy();
            this.parent(editor);
        },
    
        setState: function (state) {
            if (this.options.toggle) {
                this.settingState = true;
                this.button.setActive(state);
            }
            this.settingState = false;
        },
        
        getState: function () {
            if (this.options.toggle) {
                return this.button.isActive();
            } 
            return false;
        },
        
        checkState: function (element) {
            this.setState(false);
            if (this.action) {
                try {
                    if (this.editor.doc.queryCommandState(this.action)) {
                        this.setState(true);
                        return;
                    }
                } catch (e) {}
            }
            if (this.tags) {
                var el = element;
                do {
                    var tag = el.tagName.toLowerCase();
                    if (this.tags.contains(tag)) {
                        this.setState(true);
                        break;
                    }
                } 
                while ( (el.tagName.toLowerCase() != 'body') && ((el = Element.getParent(el)) != null));
            }
            
            if (this.css) {
                var el = element;
                do {
                    found = false;
                    for (var prop in this.css) {
                        var css = this.css[prop];
                        if (Element.getStyle(el, prop).contains(css)){
                            this.setState(true);
                            found = true;
                        }
                    }
                    if (found || el.tagName.test(this.editor.blockEls)) break;
                }
                while ( (el.tagName.toLowerCase() != 'body') && ((el = Element.getParent(el)) != null));
            }
        },
        
        command: function () {
            if (!this.settingState) {
                this.editor.execute(this.action, false, false);
            }
        },
        
        setEnabled: function (state) {
            this.button.setEnabled(state);
        }
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Button = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Unlink

description: Button to unlink text.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Unlink]

images:
 - link_break.png

...
 */
define("jx/plugin/editor/unlink", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var unlink = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Unlink',
        
        name: 'unlink',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Unlink',
            toggle: false,
            title: 'Remove Hyperlink'
        },
        
        action: 'unlink'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Unlink = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Unorderedlist

description: Button to create an unordered list.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Unorderedlist]

images:
 - text_list_bullets.png

...
 */
define("jx/plugin/editor/unorderedlist", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var unorderedlist = module.exports = new Class({

        Extends: Button,
        Family: 'Jx.Plugin.Editor.Unoderedlist',
        
        name: 'unorderedlist',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'UnorderedList',
            toggle: false,
            title: 'Unordered List'
        },
        
        tags: ['ul'],
        action: 'insertunorderedlist'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Unorderedlist = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Underline

description: Button to underline text in editor.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Underline]

images:
 - text_underline.png

...
 */
define("jx/plugin/editor/underline", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var underline = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Underline',
        
        name: 'underline',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Underline',
            toggle: true,
            shortcut: 'u',
            title: 'Underline'
        },
        
        tags: ['u'],
        css: {'text-decoration': 'underline'},
        action: 'underline'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Underline = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.ButtonSet

description: Creates a toggle buittonset within the editor toolbar

license: MIT-style license.

requires:
 - Jx.Plugin.Editor
 - Jx.ButtonSet
 - Jx.Button

provides: [Jx.Plugin.Editor.ButtonSet]

...
 */
define("jx/plugin/editor/buttonset", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        ButtonSet = require("../../button/set"),
        Button = require("../../button");
        
    var buttonSet = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Plugin.Editor.ButtonSet',
        
        options: {
            /**
             * Option: buttons
             * an object of config objects keyed by the action
             * (code)
             * {
             *   action: { config },
             *   action: { config }
             * }
             * (end)
             */
            buttons: null     
        },
        
        buttonSet: null,
        
        buttons: [],
        
        prefix: 'jxEditorButton',
        
        init: function () {
            this.parent();
            this.buttonSet = new ButtonSet();
            
        },
        
        attach: function (editor) {
            this.parent(editor);
            this.editor = editor;
            Object.each(this.options.buttons, function(config, action){
                var button = new Button({
                    toggle: true,
                    image: config.image,
                    imageClass: this.prefix + config.imageClass,
                    tooltip: config.title
                });
                this.editor.toolbar.add(button);
                this.buttons.push(button);
                this.buttonSet.add(button);
                button.action = action;
                button.addEvents({
                    down: this.command.bind(this, action),
                    up: this.command.bind(this, action)
                });
                
            },this);
        },
        
        detach: function () {
            this.parent();
        },
        
        checkState: function (element) {
            this.buttons.each(function(button){
                this.setState(false, button);
                if (button.action) {
                    try {
                        if (this.editor.doc.queryCommandState(button.action)) {
                            this.setState(true, button);
                            return;
                        }
                    } catch (e) {}
                }
                if (button.options.tags) {
                    var el = element;
                    do {
                        var tag = el.tagName.toLowerCase();
                        if (button.options.tags.contains(tag)) {
                            this.setState(true, button);
                            break;
                        }
                    } while ((el = Element.getParent(el)) != null);
                }
                
                if (button.options.css) {
                    var el = element;
                    do {
                        found = false;
                        for (var prop in button.options.css) {
                            var css = button.options.css[prop];
                            if (Element.getStyle(el, prop).contains(css)){
                                this.setState(true, button);
                                found = true;
                            }
                        }
                        if (found || el.tagName.test(this.editor.blockEls)) break;
                    }
                    while ((el = element.getParent(el)) != null);
                }
            }, this);
        },
        
        setState: function (state, button) {
            this.settingState = true;
            button.setActive(state);
            this.settingState = false;
        },
        
        command: function (action) {
            if (!this.settingState) {
                this.editor.execute(action, false, false);
            }
        },
        
        setEnabled: function (state) {
            this.buttons.each(function(button){
                button.setEnabled(state);
            },this);
        }
    });
    
    if (base.global) {
        base.global.Plugin.Editor.ButtonSet = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Orderedlist

description: Button to create an ordered list.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Orderedlist]

images:
 - text_list_numbers.png

...
 */
define("jx/plugin/editor/orderedlist", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var orderedlist = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Orderedlist',
        
        name: 'orderedlist',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'OrderedList',
            toggle: false,
            title: 'Ordered List'
        },
        
        tags: ['ol'],
        action: 'insertorderedlist'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Orderedlist = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Outdent

description: Button to outdent lists.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Outdent]

images:
 - text_indent_remove.png

...
 */
define("jx/plugin/editor/outdent", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");

    var outdent = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Outdent',
        
        name: 'outdent',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Outdent',
            toggle: false,
            title: 'Outdent'
        },
        
        
        action: 'outdent'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Outdent = module.exports;
    }
    
});

/*
---

name: Jx.Plugin.Editor.Toggle

description: Button to toggle HTML view.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Toggle]

images:
 - toggleview.png

...
 */
define("jx/plugin/editor/toggle", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var toggle = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Toggle',
        
        name: 'toggle',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'ToggleView',
            toggle: true,
            title: 'Toggle View'
        },
        
        command: function () {
            if (this.editor.mode == 'textarea') {
                this.editor.enableToolbar();
            } else {
                this.editor.disableToolbar();
            }
            this.editor.toggleView();
        },
        
        setEnabled: function(){}
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Toggle = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Separator

description: Separator for toolbar in editor 

license: MIT-style license.

requires:
 - Jx.Toolbar.Separator
 - Jx.Plugin.Editor

provides: [Jx.Plugin.Editor.Separator]

...
 */
define("jx/plugin/editor/separator", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Separator = require("../../toolbar/separator");
        
    var separator = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Plugin.Editor.Separator',
        
        name: 'separator',
        
        attach: function (editor) {
            this.button = new Separator();
            editor.toolbar.add(this.button);
        }
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Separator = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Alignment

description: Plugin for doing alignment in Jx.Editor

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.ButtonSet

provides: [Jx.Plugin.Editor.Alignment]

images:
 - text_align_left.png
 - text_align_center.png
 - text_align_right.png
 - text_align_justify.png

...
 */
define("jx/plugin/editor/alignment", function(require, exports, module){
    
    var base = require("../../../base"),
        ButtonSet = require("./buttonset");
        
    var alignment = module.exports = new Class({
     
        Extends: ButtonSet,
        Family: 'Jx.Plugin.Editor.Aligmment',
        
        name: 'alignment',
        
        options: {
            buttons: {
                justifyleft: {
                    image: Jx.aPixel.src,
                    imageClass: 'JustifyLeft',
                    title: 'Align Left',
                    css: {'text-align': 'left'}
                },
                justifyright: {
                    image: Jx.aPixel.src,
                    imageClass: 'JustifyRight',
                    title: 'Align Right',
                    css: {'text-align': 'right'}
                },
                justifycenter: {
                    image: Jx.aPixel.src,
                    imageClass: 'JustifyCenter',
                    title: 'Align Center',
                    css: {'text-align': 'center'},
                    tags: ['center']
                },
                justifyfull: {
                    image: Jx.aPixel.src,
                    imageClass: 'JustifyFull',
                    title: 'Align Full',
                    css: {'text-align': 'justify'}
                }
            }
        }
            
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Alignment = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Indent

description: Button to indent a list in the editor.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Indent]

images:
 - text_indent.png

...
 */
define("jx/plugin/editor/indent", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var indent = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Indent',
        
        name: 'indent',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Indent',
            toggle: false,
            title: 'Indent'
        },
        
        tags: ['blockquote'],
        action: 'indent'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Indent = module.exports;
    }
    
});

/*
---

name: Jx.Plugin.Editor.Bold

description: Button to mark sections in the editor as Bold.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button
 - Core/Browser

provides: [Jx.Plugin.Editor.Bold]

images:
 - text_bold.png

...
 */
define("jx/plugin/editor/bold", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var bold = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Bold',
        
        name: 'bold',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Bold',
            toggle: true,
            shortcut: 'b',
            title: 'Bold'
        },
        
        tags: ['b','strong'],
        css: {'font-weight': 'bold'},
        action: 'bold',
        
        init: function () {
            this.parent();
            this.bound = {
                setup: this.setup.bind(this),
                parse: this.setup.bind(this)
            };
        },
        
        attach: function (editor) {
            this.parent(editor);
            
            this.editor.addEvent('preToggleView', this.bound.parse);
            this.editor.addEvent('postPluginInit', this.bound.setup);
        },
        
        setup: function () {
            var result = this.parse();
            if (result) {
                this.editor.setContent(result);
            }
            this.editor.removeEvent('postPluginInit', this.bound.setup);
        },
        
        parse: function () {
            if (Browser.firefox) {
                var s = this.editor.textarea.get('value');
                s.replace(/<strong([^>]*)>/gi, '<b$1>');
                s.replace(/<\/strong>/gi, '</b>');
                this.editor.textarea.set('html', s);
                return s;
            }
            return null;
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Bold = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Italic

description: Button to italicize text in the editor.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Italic]

images:
 - text_italic.png

...
 */
define("jx/plugin/editor/italic", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var italic = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Italic',
        
        name: 'italic',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Italic',
            toggle: true,
            shortcut: 'i',
            title: 'Italic'
        },
        
        tags: ['i','em'],
        css: {'font-style': 'italic'},
        action: 'italic',
        
        init: function () {
            this.parent();
            this.bound = {
                setup: this.setup.bind(this),
                parse: this.setup.bind(this)
            };
        },
        
        attach: function (editor) {
            this.parent(editor);
            
            this.editor.addEvent('preToggleView', this.bound.parse);
            this.editor.addEvent('postPluginInit', this.bound.setup);
        },
        
        setup: function () {
            var result = this.parse();
            if (result) {
                this.editor.setContent(result);
            }
            this.editor.removeEvent('postPluginInit', this.bound.setup);
        },
        
        parse: function () {
            if (Browser.firefox) {
                var s = this.editor.textarea.get('value')
                    .replace(/<embed([^>]*)>/gi, '<tmpembed$1>')
                    .replace(/<em([^>]*)>/gi, '<i$1>')
                    .replace(/<tmpembed([^>]*)>/gi, '<embed$1>')
                    .replace(/<\/em>/gi, '</i>');
                this.editor.textarea.set('value', s);
                return s;
            }
            return null;
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Italic = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Link

description: Button to create a link in the editor.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button
 - Jx.Dialog.Message
 - Jx.Dialog.Prompt

provides: [Jx.Plugin.Editor.Link]

images:
 - link.png

...
 */
define("jx/plugin/editor/link", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button"),
        Message = require("../../dialog/message"),
        Prompt = require("../../dialog/prompt");
        
    var link = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Link',
        
        name: 'createlink',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Link',
            toggle: false,
            shortcut: 'l',
            title: 'Create Hyperlink'
        },
        
        tags: ['a'],
        
        action: 'createlink',
        
        command: function () {
            if (this.editor.selection.isCollapsed()) {
                new Message({
                    message: 'Please select the text you wish to hyperlink.'
                }).open();
            } else {
                var text = this.editor.selection.getText();
                new Prompt({
                    prompt: 'Enter the web address you wish to link to. <br/> The text you selected to link to: "' + text + '"' ,
                    startingValue: 'http://',
                    onClose: this.finish.bind(this)
                }).open();
            }
        },
        
        finish: function (dialog, result, url) {
            if (result) {
                this.editor.execute('createlink', false, url.trim());
            }
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Link = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Redo

description: Button to redo changes.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Redo]

images:
 - edit-redo.png

...
 */
define("jx/plugin/editor/redo", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var redo = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Redo',
        
        name: 'redo',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Redo',
            toggle: false,
            shortcut: 'y',
            title: 'Redo'
        },
        
        
        action: 'redo'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Redo = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.CustomStyles

description: Creates a drop down with styles that were passed in.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor
 - Jx.Field.Select

provides: [Jx.Plugin.Editor.CustomStyles]

...
 */
define("jx/plugin/editor/customstyles", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Select = require("../../field/select");
        
    var customStyles = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Plugin.Editor.CustomStyles',
        
        options: {
            styles: []
        },
        
        rules: [],
        
        name: 'customStyles',
        
        activeClass: '',
        
        attach: function (editor) {
            this.editor = editor;
            this.parent(editor);
            
            Array.from(this.options.styles).each(function(style){
                this.rules.push(style);
            },this);
            
            var items = [];
            items.push({value: '', text: '', selected: true});
            this.rules.each(function(rule){
                items.push({value: rule, text: rule});
            },this);
            
            //now create the combo button
            this.settingState = true;
            
            //Try with an actual Select
            this.button = new Select({
                comboOpts: items,
                label: 'Choose a Style'
            });
            
            this.button.field.addEvent('change', this.command.bind(this));
            
            this.editor.toolbar.add(this.button);
            this.editor.toolbar.update();
            this.settingState = false;
        },
        
        detach: function () {
            this.button.destroy();
            this.parent(editor);
        },
        
        
        checkState: function (element) {
            if (!this.settingState) {
                for (i=0; i<this.rules.length; i++) {
                    if (element.hasClass(this.rules[i])) {
                        this.settingState = true;
                        this.button.setValue(this.rules[i]);
                        this.settingState = false;
                        return;
                    }
                }
                this.button.setValue('');
            }
        },
        
        command: function () {
            if (!this.settingState) {
                var klass = this.button.getValue();
                var node = this.editor.selection.getNode();
                if (klass !== '') { 
                    node.removeClass(this.activeClass);
                    if (node.hasClass(klass)) {
                        node.removeClass(klass);
                    } else {
                        node.addClass(klass);
                    }
                    this.activeClass = klass;
                } else {
                    this.rules.each(function(rule){
                        if (node.hasClass(rule)) {
                            node.removeClass(rule);
                        }
                    },this);
                }
            }
        },
        
        setEnabled: function (state) {
            if (state) {
                this.button.enable();
            } else {
                this.button.disable();
            }
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.CustomStyles = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Strikethrough

description: Strikethrough button for editor

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Strikethrough]

images:
 - text_strikethrough.png

...
 */
define("jx/plugin/editor/strikethrough", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var strikethrough = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Strikethrough',
        
        name: 'strikethrough',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Strikethrough',
            toggle: true,
            title: 'Strike Through',
            shortcut: 's'
        },
        
        tags: ['s','strike'],
        css: { 'text-decoration': 'line-through' },
        action: 'strikethrough'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Strikethrough = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Block

description: Creates block level tags in the editor

license: MIT-style license.

requires:
 - Jx.Field.Select
 - Jx.Plugin.Editor

provides: [Jx.Plugin.Editor.Block]


...
 */
define("jx/plugin/editor/block", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Select = require("../../field/select");
        
    var block = module.exports = new Class({
    
        Extends: Plugin,
        Family: 'Jx.Plugin.Editor.Block',
        
        name: 'block',
        
        tags: ['p','div','h1','h2','h3','h4','h5','h6','pre','address'],
        action: 'formatblock',
        
        attach: function (editor) {
            this.editor = editor;
            this.parent(editor);
            
            items = [{
                value: '',
                text: ''
            }];
            this.tags.each(function(tag){
                items.push({
                    value: tag,
                    text: tag
                });
            });
            
            this.button = new Select({
                comboOpts: items,
                label: 'Block Type'
            });
            
            this.button.field.addEvent('change', this.command.bind(this));
           
            this.editor.toolbar.add(this.button);
        },
        
        detach: function () {
            this.button.destroy();
            this.parent(editor);
        },
        
        checkState: function (element) {
            this.setState(false);
            if (this.tags) {
                var el = element;
                do {
                    var tag = el.tagName.toLowerCase();
                    if (this.tags.contains(tag)) {
                        this.setState(true, tag);
                        break;
                    }
                } 
                while ( (el.tagName.toLowerCase() != 'body') && ((el = Element.getParent(el)) != null));
            }
            
            
        },
        
        command: function () {
            if (!this.settingState) {
                var tag = this.button.getValue();
                if (tag !== '') {
                    var block = '<' + this.button.getValue() + '>';
                    this.editor.execute(this.action, false, block);
                } 
            }
        },
        
        setEnabled: function (state) {
            if (state) {
                this.button.enable();
            } else {
                this.button.disable();
            }
        },
        
        setState: function(flag, tag) {
            if (!flag) {
                tag = '';
            }
            this.button.setValue(tag);
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Block = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Undo

description: Button to undo commands in the editor.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor.Button

provides: [Jx.Plugin.Editor.Undo]

images:
 - edit-undo.png

...
 */
define("jx/plugin/editor/undo", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button");
        
    var undo = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Undo',
        
        name: 'undo',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Undo',
            toggle: false,
            shortcut: 'z',
            title: 'Undo'
        },
        
        
        action: 'undo'
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Undo = module.exports;
    }
});

/*
---

name: Jx.Plugin.Editor.Image

description: Button to add an image to the editor.

license: MIT-style license.

requires:
 - Jx.Plugin.Editor
 - Jx.Dialog.Prompt

provides: [Jx.Plugin.Editor.Image]

images:
 - image.png

...
 */
define("jx/plugin/editor/image", function(require, exports, module){
    
    var base = require("../../../base"),
        Button = require("./button"),
        Prompt = require("../../dialog/prompt");
        
    var image = module.exports = new Class({
    
        Extends: Button,
        Family: 'Jx.Plugin.Editor.Image',
        
        name: 'image',
        
        options: {
            image: base.aPixel.src,
            imageClass: 'Image',
            toggle: false,
            shortcut: 'm',
            title: 'Insert Image'
        },
        
        tags: ['img'],
        
        action: 'insertimage',
        
        command: function () {
            new Prompt({
                prompt: 'Enter the address of the image:' ,
                onClose: this.finish.bind(this)
            }).open();
        },
        
        finish: function (dialog, result, url) {
            if (result) {
                this.editor.execute(this.action, false, url.trim());
            }
        }
        
    });
    
    if (base.global) {
        base.global.Plugin.Editor.Image = module.exports;
    }
});

/*
---

name: Jx.Plugin.Form.Notifier

description: Plugin to Form.Panel to display error using a Jx.Notifier

license: MIT-style license.

requires:
 - Jx.Plugin.Panel
 - Jx.Notifier

provides: [Jx.Plugin.Form.Notifier]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Form.Notifier
 *
 * Extends: <Jx.Plugin>
 *
 * Panel.Form plugin for displaying error messages using a <Jx.Notifier> 
 * instance.
 *
 * License:
 * Copyright (c) 2011, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/form/notifier", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Notifier = require("../../notifier"),
        FloatNotifier = require("../../notifier/float"),
        ErrorNotice = require("../../notice").Error
        
    var notifier = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Form.Notifier",
        name: 'Form.Notifier',
    
        options: {
            /**
             * Option: notifierType
             * The type of notifier to use. Either 'float' or 'inline'.
             * Default is 'inline' which places the notifier at the top of the form.
             */
            notifierType: 'inline',
        },
        /**
         * Property: notices
         * Object holding all of the currently displayed notices.
         */
        notices: null,
        
        bound: null,
        
        init: function(){
            this.parent();
            this.bound = {
                postInit: this.onPostInit.bind(this),
                fieldValidationPassed: this.onFieldPassed.bind(this),
                fieldValidationFailed: this.onFieldFailed.bind(this)
            };
            this.notices = {};
        },
        
        attach: function(form){
            this.parent(form);
            this.form = form;
            
            //listen for the validation errors
            //and wait for postInit to add the notifier.
            form.addEvents(this.bound);
        },
        
        onPostInit: function(){
            //create the notifier and put it at the top of the fom
            if (instanceOf(this.options.notifierType, Notifier)) {
                this.notifier = this.options.notifierType;
            } else if (this.options.notifierType === 'inline') {
                this.notifier = new Notifier();
                this.notifier.addTo(document.id(this.form),'top');
            } else {
                this.notifier = new FloatNotifier({parent: document.body});
            }
            this.form.removeEvent('postInit',this.bound.postInit);
        },
        /**
         * APIMethod: detach
         */
        detach: function() {
            this.form.removeEvents(this.bound);
        },
    
        onFieldPassed: function (field, validator, panel) {
            if (this.notices[field.id] !== undefined && this.notices[field.id] !== null) {
                this.notices[field.id].close();
            }
        },
        
        onFieldFailed: function (field, validator, panel) {
            if (this.notices[field.id] !== undefined && this.notices[field.id] !== null) {
                this.notices[field.id].close();
            }
            var errs = validator.getErrors();
            var text = field.name + " has the following errors: " + errs.join(",") + ".";
            var notice = new ErrorNotice({
                content: text,
                onClose: function(){
                    delete this.notices[field.id];
                }.bind(this)
            });
            this.notifier.add(notice);
            this.notices[field.id] = notice;
        }
    
    });

    if (base.global) {
        base.global.Plugin.Form.Notifier = module.exports;
    }
});

/*
---

name: Jx.Plugin.Form.Validator

description: Provides validation services for Jx.Form

license: MIT-style license.

requires:
 - Jx.Plugin.Form
 - Jx.Plugin.Field.Validator

provides: [Jx.Plugin.Form.Validator]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Form.Validator
 *
 * Extends: <Jx.Plugin>
 *
 * Form plugin for enforcing validation on the fields in a form.
 *
 * License:
 * Copyright (c) 2009, Jonathan Bomgardner.
 * Parts inspired by mootools-more's Form.Validator class
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/form/validator", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin"),
        Form = require("../../form"),
        Validator = require("../field/validator")
        
    var validator = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Form.Validator",
        name: 'Form.Validator',
    
        options: {
            /**
             * Option: fields
             * This will be key/value pairs for each of the fields as shown here:
             * (code)
             * {
             *     fieldID: {
             *          ... options for Field.Validator plugin ...
             *     },
             *     fieldID: {...
             *     }
             * }
             * (end)
             */
            fields: null,
            /**
             * Option: fieldDefaults
             * {Object} contains named defaults for field validators to be
             * triggered on blur or change.  Default is:
             * (code)
             * {
             *    validateOnBlur: true
             *    validateOnChange: false
             * }
             * (end)
             */
            fieldDefaults: {
                validateOnBlur: true,
                validateOnChange: true
            },
            /**
             * Option: validateOnSubmit
             * {Boolean} default true.  Trigger validation on submission of
             * form if true.
             */
            validateOnSubmit: true,
            /**
             * Option: suspendSubmit
             * {Boolean} default false.  Stop form submission when validator is
             * attached.
             */
            suspendSubmit: false
        },
        /**
         * Property: errorMessagess
         * element holding
         */
        errorMessage: null,
        /**
         * APIMethod: init
         * construct a new instance of the plugin.  The plugin must be attached
         * to a Jx.Grid instance to be useful though.
         */
        init: function() {
            this.parent();
            this.bound.validate = this.validate.bind(this);
            this.bound.failed = this.fieldFailed.bind(this);
            this.bound.passed = this.fieldPassed.bind(this);
            this.bound.finish = this.finishSetup.bind(this);
            this.bound.fieldAdded = this.onFieldAdded.bind(this);
        },
        /**
         * APIMethod: attach
         * Sets up the plugin and connects it to the form
         */
        attach: function (form) {
            if (form === undefined || form === null || !instanceOf(form, Form)) {
                return;
            }
    
            this.parent(form);        
            
            this.form = form;
            var plugin = this;
            //override the isValid function in the form
            form.isValid = function () {
                return plugin.isValid();
            };
    
            this.plugins = {};
            
            if (this.form.ready === true) {
                this.finishSetup();
            } else {
               form.addEvent('postRender',this.bound.finish);
            }
            
            //we also need to listen for added fields so we can setup validators
            //if they are needed.
            form.addEvent('fieldAdded',this.bound.fieldAdded);
    
        },
        
        finishSetup: function(){
            var options = this.options;
            //setup the fields
            Object.each(options.fields, function (val, key) {
                var opts = Object.merge({},options.fieldDefaults, val),
                    fields = this.form.getFieldsByName(key),
                    p;
                if (fields && fields.length) {
                    p = new Validator(opts);
                    this.plugins[key] = p;
                    p.attach(fields[0]);
                    fields[0].addEvent('fieldValidationFailed', this.bound.failed);
                    fields[0].addEvent('fieldValidationPassed', this.bound.passed);
                }
            }, this);
            
            if (options.validateOnSubmit && !options.suspendSubmit) {
                document.id(this.form).addEvent('submit', this.bound.validate);
            } else if (options.suspendSubmit) {
                document.id(this.form).addEvent('submit', function (ev) {
                    ev.stop();
                });
            }
        },
        /**
         * APIMethod: onFieldAdded
         * Event handler for the form's fieldAdded event. Handles attaching
         * Field.Validator instances to the field as they are added if needed.
         */
        onFieldAdded: function(field,form) {
            if (this.options.fields[field.name] !== undefined &&
                this.options.fields[field.name] !== null) {
                var opts = Object.merge({},this.options.fieldDefaults, this.options.fields[field.name]),
                    p = new Validator(opts);
                this.plugins[field.name] = p;
                p.attach(field);
                field.addEvent('fieldValidationFailed', this.bound.failed);
                field.addEvent('fieldValidationPassed', this.bound.passed);
            }
        },
        
        /**
         * APIMethod: detach
         */
        detach: function() {
            if (this.form) {
                document.id(this.form).removeEvent('submit');
            }
            this.form = null;
            Object.each(this.plugins, function(plugin){
                plugin.detach();
                plugin = null;
            },this);
            this.plugins = null;
        },
        /**
         * APIMethod: isValid
         * Call this to determine whether the form validates.
         */
        isValid: function () {
            return this.validate();
        },
        /**
         * Method: validate
         * Method that actually does the work of validating the fields in the form.
         */
        validate: function () {
            var valid = true;
            this.errors = {};
            Object.each(this.plugins, function(plugin){
                if (!plugin.isValid()) {
                    valid = false;
                    this.errors[plugin.field.id] = plugin.getErrors();
                }
            }, this);
            if (valid) {
                this.fireEvent('formValidationPassed', [this.form, this]);
            } else {
                this.fireEvent('formValidationFailed', [this.form, this]);
            }
            return valid;
        },
        /**
         * Method: fieldFailed
         * Refires the fieldValidationFailed event from the field validators it contains
         */
        fieldFailed: function (field, validator) {
            this.form.fireEvent('fieldValidationFailed', [field, validator]);
        },
        /**
         * Method: fieldPassed
         * Refires the fieldValidationPassed event from the field validators it contains
         */
        fieldPassed: function (field, validator) {
            this.form.fireEvent('fieldValidationPassed', [field, validator]);
        },
        /**
         * APIMethod: getErrors
         * Use this method to get all of the errors from all of the fields.
         */
        getErrors: function () {
            if (this.errors !== undefined && this.errors !== null) {
               this.validate();
            }
            return this.errors;
        }
    
    
    });
    
    if (base.global) {
        base.global.Plugin.Form.Validator = module.exports;
    }
});


/*
---

name: Jx.Plugin.Form.InlineErrors

description: Plugin to Form.Panel to display error using a Jx.Notifier

license: MIT-style license.

requires:
 - Jx.Form
 - Jx.Plugin.Form

provides: [Jx.Plugin.Form.InlineErrors]

...
 */
// $Id$
/**
 * Class: Jx.Plugin.Form.InlineErrors
 *
 * Extends: <Jx.Plugin>
 *
 * Jx.Form plugin for displaying errors inline with the fields.
 *
 * License:
 * Copyright (c) 2011, Jonathan Bomgardner.
 *
 * This file is licensed under an MIT style license
 */
define("jx/plugin/form/inlineerrors", function(require, exports, module){
    
    var base = require("../../../base"),
        Plugin = require("../../plugin");
        
    var inlineErrors = module.exports = new Class({

        Extends : Plugin,
        Family: "Jx.Plugin.Form.InlineErrors",
        name: 'Form.InlineErrors',
    
        options: {
            
        },
        
        init: function(){
            this.parent();
            this.bound = {
                fieldValidationPassed: this.onFieldPassed.bind(this),
                fieldValidationFailed: this.onFieldFailed.bind(this)
            };
        },
        
        attach: function(form){
            this.parent(form);
            this.form = form;
            
            //listen for the validation errors
            //and wait for postInit to add the notifier.
            form.addEvents(this.bound);
            
        },
    
        onFieldPassed: function (field, validator) {
            field.domObj.getElements('.jxInlineError').destroy();
        },
        
        onFieldFailed: function (field, validator) {
            //build a list of the errors
            var the_errors = ""; 
            validator.getErrors().each(function(error) {
                the_errors += error + '<br />';
            });
            //trim last <br />
            if (the_errors) { the_errors.slice(0,'<br />'.length); } 
            if (field.label && the_errors) {
                if (field.error) {
                    field.error.destroy();
                }
                var e = new Element("span", {
                    'class' : 'jxInlineError',
                    html : the_errors
                });
                field.error = e;
                e.inject(field, 'bottom');
            }
        }
    
    });

    if (base.global) {
        base.global.Plugin.Form.InlineErrors = module.exports;
    }
});
    